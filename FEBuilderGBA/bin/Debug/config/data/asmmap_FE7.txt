//This data is made with the aim of being readable by machine fast.
//
//address	name	RET=return	r0=arg0	//Argument Return value is not yet used and should not trust so much.
//address	@STRUCTNAME	name			//struct STRUCTNAME name;
//address	@STRUCTNAME@[size]	name	//struct STRUCTNAME name[size];
//address	:address2	name			//range data from address to address2
//
//@STRUCTNAME@OFFSET1	TYPE	name	//struct STRUCTNAME{   TYPE name
//@STRUCTNAME@OFFSET2	TYPE	name	//                     TYPE name      };
//
//	{J}		//for FE7J
//	{U}		//for FE7U
//
0800105c	パレット読込	void	r0=パレットアドレス:PAL	r1=不明	r2=不明	{J}
08001084	パレット読込	void	r0=パレットアドレス:PAL	r1=不明	r2=不明	{U}
08013688	LZ77圧縮されているデータの解凍AutoCopyOrDecompressImageToVRAM	void	r0=圧縮データ	r1=解凍場所	{J}
08013168	LZ77圧縮されているデータの解凍AutoCopyOrDecompressImageToVRAM	void	r0=圧縮データ	r1=解凍場所	{U}
080c0c28	無圧縮ヘッダー付きTSA	{J}
080036F0	音楽再生0	void	r0=音楽	{J}
0800376c	音楽再生1	void	r0=音楽	{J}
08003890	音楽再生1	void	r0=音楽	{U}
08003788	音楽再生2	void	r0=音楽	{J}
080038AC	音楽再生2	void	r0=音楽	{U}
08003fd4	音楽再生3	void	r0=音楽	{J}
080040F8	音楽再生3	void	r0=音楽	{U}
08067e78	音楽再生4	void	r0=音楽	{J}
0806768C	音楽再生4	void	r0=音楽	{U}
0202BC04	マップID	{J}
0202BC05	フェイズ 0=自軍,0x40=友軍,0x80=敵軍	{J}
0202BC06	ターン数	{J}
0202BC06	マップID	{U}
0202BC07	フェイズ 0=自軍,0x40=友軍,0x80=敵軍	{U}
0202BC08	ターン数	{U}
0202BBFC	所持金	{J}
0202BC00	所持金	{U}
020251BD	設定 01=ハード	{J}
0202BC02	マップID	{J}
0202B5B0	最後に表示した文字列ID	{J}
0202B5B4	最後に表示した文字列ID	{U}
08080b5c	ステータス1パラメータ	{J}
0807FDF0	ステータス1パラメータ	{U}
08080e04	ステータス2所持アイテム	{J}
080800B4	ステータス2所持アイテム	{U}
0808116c	ステータス3武器レベル	{J}
08080424	ステータス3武器レベル	{U}
08082250	Rメニューの設定	{J}
080814F4	Rメニューの設定	{U}
08080804	ステータス画面文字描画	{J}
0807FA48	ステータス画面文字描画	{U}
030045B0	&Unit	操作キャラのワークメモリへのポインタ	{J}
03004690	&Unit	操作キャラのワークメモリへのポインタ	{U}
0202bc18	軍師名1-7	{U}

083bdff4	:083be18c	地形の日本語表記	{J}
083be18c	:083bee00	地形やキャラの名前がASCIIで入力されている	{J}
083bee00	:083bf508	スタッフロールがASCIIで入力されている 利用されない	{J}
083bf508	:083bf728	MAPIDの文字列 利用されない	{J}
083B7C7C	:083B7E14	地形の日本語表記	{U}
083B7E14	:083B8A94	地形やキャラの名前がASCIIで入力されている	{U}
083B8A94	:083b8cac	地形やキャラの名前がASCIIで入力されている	{U}

08D6696C	:08D66A2C	チュートリアルポインタテーブル	{J}
08D685AC	:08D6982C	チュートリアル内部データ	{J}
08D6FFF0	:08D7607C	チュートリアルから呼ばれるイベントデータ	{J}
08C9EA2C	:08C9EAEC	チュートリアルポインタテーブル	{U}
08CA05DC	:08CA1828	チュートリアル内部データ	{U}
08CA7D70	:08CADDC8	チュートリアルから呼ばれるイベントデータ	{U}

08033D54	輸送体のデータの場所	{U}
08029A00	輸送体のデータの場所	{J}

//thank you Tiki
//BIOS ARM(not thumb)
080C0548	ArcTan2	{J}
080BFA04	ArcTan2	{U}
080C054C	BgAffineSet	{J}
080BFA08	BgAffineSet	{U}
080C0550	CPUFastSet	{J}
080BFA0C	CPUFastSet	{U}
080C0554	CPUSet	{J}
080BFA10	CPUSet	{U}
080C0558	Div	{J}
080BFA14	Div	{U}
080C055C	Mod	{J}
080BFA18	Mod	{U}
080C0564	HuffUnComp	{J}
080BFA20	HuffUnComp	{U}
080C0568	LZ77UnCompVram	{J}
080BFA24	LZ77UnCompVram	{U}
080C056C	LZ77UnCompWram	{J}
080BFA28	LZ77UnCompWram	{U}
080C0570	MultiBoot	{J}
080BFA2C	MultiBoot	{U}
080C0578	ObjAffineSet	{J}
080BFA34	ObjAffineSet	{U}
080C057C	RLUnCompVram	{J}
080BFA38	RLUnCompVram	{U}
080C0580	RLUnCompWram	{J}
080BFA3C	RLUnCompWram	{U}
080C059C	SoundBiasReset	{J}
080BFA58	SoundBiasReset	{U}
080C05A4	SoundBiasSet	{J}
080BFA60	SoundBiasSet	{U}
080C05AC	Sqrt	{J}
080BFA68	Sqrt	{U}
080C05B0	VBlankIntrWait	{J}
080BFA6C	VBlankIntrWait	{U}

// Spell Anmations
//thumb
08056BC8	NoneSpellAnimation	void	int a1	{J}
08056C40	ThrowingAxeSpellAnimation	void	int a1	{J}
08056F98	ArrowSpellAnimation	void	int a1	{J}
08057120	Javelin1SpellAnimation	void	int a1	{J}
0805717C	Javelin2SpellAnimation	void	int a1	{J}
080571D8	Javelin3SpellAnimation	void	int a1	{J}
08057234	Javelin4SpellAnimation	void	int a1	{J}
08057290	Javelin5SpellAnimation	void	int a1	{J}
080572EC	Javelin6SpellAnimation	void	int a1	{J}
08057348	Javelin7SpellAnimation	void	int a1	{J}
080573A4	Javelin8SpellAnimation	void	int a1	{J}
08057400	Javelin9SpellAnimation	void	int a1	{J}
0805745C	Javelin10SpellAnimation	void	int a1	{J}
080574B8	Javelin11SpellAnimation	void	int a1	{J}
08057664	DancePlay1SpellAnimation	void	int a1	{J}
08057924	DancePlay2SpellAnimation	void	int a1	{J}
08057A6C	BalistaArrowSpellAnimation	void	int a1	{J}
08057C24	ExaccusWaveSpellAnimation	void	int a1	{J}
08057F84	SoSFireSpellAnimation	void	int a1	{J}
08058120	FlametongueSpellAnimation	void	int a1	{J}
0805843C	FaHolyDragonStoneSpellAnimation	void	int a1	{J}
08058584	IdunDarkDragonStoneSpellAnimation	void	int a1	{J}
08058B28	FireSpellAnimation	void	int a1	{J}
08058B6C	ElfireSpellAnimation	void	int a1	{J}
0805ABD8	ForblazeSpellAnimation	void	int a1	{J}
0805882C	ThunderSpellAnimation	void	int a1	{J}
0805979C	BoltingSpellAnimation	void	int a1	{J}
08059138	FimbulvetrSpellAnimation	void	int a1	{J}
08059BF0	AircaliburSpellAnimation	void	int a1	{J}
08059BF4	FluxSpellAnimation	void	int a1	{J}
0805A090	NosferatuSpellAnimation	void	int a1	{J}
0805A60C	LightningSpellAnimation	void	int a1	{J}
0805A838	PurgeSpellAnimation	void	int a1	{J}
0805BA78	AureolaSpellAnimation	void	int a1	{J}
0805B678	DivineSpellAnimation	void	int a1	{J}
0805C3D4	ApocalypseSpellAnimation	void	int a1	{J}
0805C3D8	EclipseSpellAnimation	void	int a1	{J}
0805CA38	FenrirSpellAnimation	void	int a1	{J}
0805D1D8	HealSpellAnimation	void	int a1	{J}
0805D328	MendSpellAnimation	void	int a1	{J}
0805D4CC	RecoverSpellAnimation	void	int a1	{J}
0805D670	PhysicSpellAnimation	void	int a1	{J}
0805DEC0	FortifySpellAnimation	void	int a1	{J}
0805DEF0	FortifyGreenSpellAnimation	void	int a1	{J}
0805E3B0	RestoreSpellAnimation	void	int a1	{J}
0805E650	SilenceSpellAnimation	void	int a1	{J}
0805E8E8	SleepSpellAnimation	void	int a1	{J}
0805EC08	HammerneSpellAnimation	void	int a1	{J}
0805EE84	BerserkSpellAnimation	void	int a1	{J}
0805F48C	BarrierSpellAnimation	void	int a1	{J}
0805F6F8	ShineSpellAnimation	void	int a1	{J}
0805FBE8	LunaSpellAnimation	void	int a1	{J}
080605A4	ExcaliburSpellAnimation	void	int a1	{J}
08060E70	GespenstSpellAnimation	void	int a1	{J}
080615C4	AuraSpellAnimation	void	int a1	{J}
08061BE0	LuceSpellAnimation	void	int a1	{J}
08062350	ErishkigalAnimation	void	int a1	{J}
08062AAC	FillaMight1SpellAnimation	void	int a1	{J}
08062AE8	NinisGraceSpellAnimation	void	int a1	{J}
08062B24	ThorIreSpellAnimation	void	int a1	{J}
08062B60	SetLitanySpellAnimation	void	int a1	{J}

// Spell Animation Engine
//arm
8004370	SpellCallBack	void *funcSequence, signed int callNum	{J}
8004494	SpellCallBack	void *funcSequence, signed int callNum	{U}
804EC74	ScrollScreen	int a1, unsigned __int16 a2	{J}
804E498	ScrollScreen	int a1, unsigned __int16 a2	{U}
80689D0	PlaySFX		int SFXID, int a2, int a3, int a4	{J}
80681E4	PlaySFX		int SFXID, int a2, int a3, int a4	{U}
80017E8	memClear2K	void	void *mem, int num	{J}
8001810	memClear2K	void	void *mem, int num	{U}
8001188	LCDIOMapSync	{J}
80011B0	LCDIOMapSync	{U}
8001320	GetBGnCNTBufferAddr	u16*	u16 *result	{J}
8001348	GetBGnCNTBufferAddr	u16*	u16 *result	{U}
80016C4	BGMapBGPaletteSync	void	{J}
80016EC	BGMapBGPaletteSync	void	{U}
8000FD4	SetBGMapSyncFlag	void	u8 flag	{J}
8000FFC	SetBGMapSyncFlag	void	u8 flag	{U}
8000FF0	EnableBGMapSync	void	u8 n	{J}
8001018	EnableBGMapSync	void	u8 n	{U}
8001034	EnableBGPaletteSync	void	{J}
800105C	EnableBGPaletteSync	void	{U}
8001048	DisablePaletteSync	void	{J}
8001070	DisablePaletteSync	void	{U}
800105C	OutputToBGPaletteBuffer	void	void *src, signed int paletteOffset, signed int len	{J}
8001084	OutputToBGPaletteBuffer	void	void *src, signed int paletteOffset, signed int len	{U}
80010CC	OutputToBGPaletteBufferWithAlpha	void	_WORD *src, signed int paletteOffset, int len, int alpha	{J}
80010F4	OutputToBGPaletteBufferWithAlpha	void	_WORD *src, signed int paletteOffset, int len, int alpha	{U}
8003054	TileTransferInfoSync	void	{J}
8003178	TileTransferInfoSync	void	{U}
8002EB8	TileTransferInfoClear	void	{J}
8002FDC	TileTransferInfoClear	void	{U}
8002F54	TileTransferInfoAdd	void	void *src, void *dst, int len	{J}
8003078	TileTransferInfoAdd	void	void *src, void *dst, int len	{U}
8002FD8	TileIntializeInfoAdd	void	void *src, void *dst, int len	{J}
80030FC	TileIntializeInfoAdd	void	void *src, void *dst, int len	{U}
8003214	OAM1BufferSync	void	{J}
8003338	OAM1BufferSync	void	{U}
80031BC	OAM2BufferSync void	{J}
80032E0	OAM2BufferSync void	{U}
8003108	OAMBufferSyncInfoInitialize	void	int SpriteNum1	{J}
800322C	OAMBufferSyncInfoInitialize	void	int SpriteNum1	{U}
80031A4	GetSpriteNum1	int	{J}
80032C8	GetSpriteNum1	int	{U}
8003264	SetOBJAttribute	void	int OBJIndex, __int16 Attribute0, __int16 Attribute1, __int16 Attribute2, __int16 RSParameter	{J}
8003388	SetOBJAttribute	void	int OBJIndex, __int16 Attribute0, __int16 Attribute1, __int16 Attribute2, __int16 RSParameter	{U}
8013614	OutputBitmapToVRAM	void	unsigned int *bitmap, void *dst	{J}
80130F4	OutputBitmapToVRAM	void	unsigned int *bitmap, void *dst	{U}
8013688	AutoCopyOrDecompressImageToVRAM	void	_BYTE *src, int dst	{J}
8013168	AutoCopyOrDecompressImageToVRAM	void	_BYTE *src, int dst	{U}
801383C	writePlainTSA	void	u16 *TSABufferInWRAM, int tileIndexAndPaletteIndex, int height, int width	{J}
801331C	writePlainTSA	void	u16 *TSABufferInWRAM, int tileIndexAndPaletteIndex, int height, int width	{U}
801372C	changeTiles	void	void *src, void *dst, int width, int height	{J}
801320C	changeTiles	void	void *src, void *dst, int width, int height	{U}
80C0C28	writeTemplateTSA	_WORD	_WORD *TSABufferInWRAM, _WORD *TSATemplate, __int16 TSABaseValue	{J}
80C57AC	writeTemplateTSA	_WORD	_WORD *TSABufferInWRAM, _WORD *TSATemplate, __int16 TSABaseValue	{U}
80068C4	AddSprite	void	int priorityInLinkedList, s16 x, s16 y, int templateAddr, s16 tileNo	{J}
8006A34	AddSprite	void	int priorityInLinkedList, s16 x, s16 y, int templateAddr, s16 tileNo	{U}
8001D64	setBGnPosition	void	unsigned __int16 n, __int16 x, __int16 y	{J}
8001D8C	setBGnPosition	void	unsigned __int16 n, __int16 x, __int16 y	{U}
8057088	loadArrowOBJ	void	void *AIS	{J}
80568A0	loadArrowOBJ	void	void *AIS	{U}
8050348	loadSpellCast	void	{J}
804FB6C	loadSpellCast	void	{U}
805091C	reduceHPBar	void	void *targetAIS, bool ifMiss	{J}
8050140	reduceHPBar	void	void *targetAIS, bool ifMiss	{U}
8050AC8	suckBloodAnimation	void	int a1, int ifMiss	{J}
80502EC	suckBloodAnimation	void	int a1, int ifMiss	{U}
8054F4C	checkIfCritical	int	void *AIS	{J}
8054764	checkIfCritical	int	void *AIS	{U}
8062D68	criticalAttackEffect	void	int a1	{J}
8062580	criticalAttackEffect	void	int a1	{U}
8062E9C	normalAttackEffect	void	int a1	{J}
8062580	normalAttackEffect	void	int a1	{U}
8068500	playHitSound	int	void *AIS	{J}
8067D14	playHitSound	int	void *AIS	{U}
80117AC	eventCodeFunc_DF	int	struct context *parent	{J}
801135C	eventCodeFunc_DF	int	struct context *parent	{U}
807D314	loadIceCrystal	void	int a1	{J}
807C8A0	loadIceCrystal	void	int a1	{U}
8C11370	efxResire	{J}
8B935EC	efxResire	{U}
8C11388	efxResireBG	{J}
8B9ABC4	efxResireBG	{U}
8C113B8	efxResireBG2	{J}
8B935EC	efxResireBG2	{U}
8C11568	efxResireRST	{J}
8B935EC	efxResireRST	{U}
805A29C	loadResireBG2	void	int a1	{J}
8059AB4	loadResireBG2	void	int a1	{U}
805A210	loadResireBG	void	int a1, u8 ifMiss	{J}
8059A28	loadResireBG	void	int a1, u8 ifMiss	{U}
80560A4	loadResireRST5	context*	int a1, int a2, int a3, int a4, int a5	{J}
80558BC	loadResireRST5	context*	int a1, int a2, int a3, int a4, int a5	{U}
805A594	loadResireRST3	void	int a1, struct context *a2, u16 a3	{J}
8059DAC	loadResireRST3	void	int a1, struct context *a2, u16 a3	{U}
8C108A0	efxRestWINH	{J}
8B9AD1C	efxRestWINH	{U}
80564B8	loadRestWINH	void	int a1, int a2, u16 a3, u32 a4	{J}
8055CD0	loadRestWINH	void	int a1, int a2, u16 a3, u32 a4	{U}
80565FC	loadRestWINH1	void	int a1, int a2, u32 a3	{J}
8055E14	loadRestWINH1	void	int a1, int a2, u32 a3	{U}
8C11FA4	efxHazymoon	{J}
8B935EC	efxHazymoon	{U}
8C11FBC	efxHazymoonBG	{J}
8B935EC	efxHazymoonBG	{U}
8C120AC	efxHazymoonOBJ2	{J}
8B9A9BC	efxHazymoonOBJ2	{U}
8C120F4	efxHazymoonOBJ3	{J}
8BA2DA8	efxHazymoonOBJ3	{U}
8C12124	efxHazymoonOBJ3RND	{J}
8BA2DD8	efxHazymoonOBJ3RND	{U}
805C5B4	loadHazymoonBG1	void	void *AIS	{J}
805BDCC	loadHazymoonBG1	void	void *AIS	{U}
805C924	loadHazymoonOBJ3	void	void *AIS	{J}
805C13C	loadHazymoonOBJ3	void	void *AIS	{U}
805C624	loadHazymoonBG2	void	void *AIS	{J}
805BE3C	loadHazymoonBG2	void	void *AIS	{U}
805C6A8	loadHazymoonBG3	void	void *AIS	{J}
805BEC0	loadHazymoonBG3	void	void *AIS	{U}
805C77C	loadHazymoonOBJ2	void	void *AIS	{J}
805BF94	loadHazymoonOBJ2	void	void *AIS	{U}
8000BB8	geneateRN65536	int	{J}
8000BE0	geneateRN65536	int	{U}
8000DDC	geneateRN100	int	{J}
8000E04	geneateRN100	int	{U}
8000E08	geneateRNRange	int	int range	{J}
8000E30	geneateRNRange	int	int range	{U}
8054F90	getTargetAIS	void	int a1	{J}
80547A8	getTargetAIS	void	int a1	{U}
804F7B8	loadFlashBG	{J}
804EFDC	loadFlashBG	{U}

//テキスト関係
080056d8	draw_serif_text	{J}
08005B9C	draw_serif_text	{U}
08005528	strlen_serif_width	{J}
08005BD0	strlen_serif_width	{U}
080055dc	draw_item_text	{J}
08005B60	draw_item_text	{U}
080054cc	strlen_item_width	{J}
080054C4	strlen_item_width	{U}
080055c8	draw_text_nextline	{J}
//	draw_text_nextline	{U}

080195BC	マップパレットロード	{J}
080191D4	マップパレットロード	{U}
08019634	マップパレットロード2	{J}
0801924C	マップパレットロード2	{U}
080C09A4	割り算 値切り捨て(Div)	{J}
080BFE60	割り算 値切り捨て(Div)	{U}
080C0580	RegisterRamReset	{J}
080BFA3C	RegisterRamReset	{U}
080C07CC	割り算 値切り捨て(Div)	{J}
080BFC88	割り算2 値切り捨て(Div)	{U}

0807A0B4	フラグを立てる関数	void	r0=立てるフラグ:FLAG	{J}
080798E4	フラグを立てる関数	void	r0=立てるフラグ:FLAG	{U}
0807A0A0	フラグを下す関数	void	r0=下すフラグ:FLAG	{J}
0807A0E0	フラグを下す関数	void	r0=下すフラグ:FLAG	{U}
0807A0C8	フラグ状態確認関数	RET=結果BOOL	r0=確認するフラグ:FLAG	{J}
080798F8	フラグ状態確認関数	RET=結果BOOL	r0=確認するフラグ:FLAG	{U}
080BF0D8	効果音を鳴らす関数	void	r0=鳴らしたい音番号:SOUND	{J}
080BE594	効果音を鳴らす関数	void	r0=鳴らしたい音番号:SOUND	{U}
0802AA80	経験値+10する関数	void	r0=経験値を付与するユニット:UNIT	{J}
0802A5D0	経験値+10する関数	void	r0=経験値を付与するユニット:UNIT	{U}
08031a5c	マップ番号から、マップ設定のアドレスを返す関数	r0=マップ設定のアドレス	r0=調べたいマップID:MAPCHAPTER	{J}
08031574	マップ番号から、マップ設定のアドレスを返す関数	r0=マップ設定のアドレス	r0=調べたいマップID:MAPCHAPTER	{U}
080043d4	6C Structスクリプトロード	void	r0=6C Structアドレス:6CSTRUCT	r1=不明	{J}
080044F8	6C Structスクリプトロード	void	r0=6C Structアドレス:6CSTRUCT	r1=不明	{U}
08009E78	会話@0080@0005で参照できるところに数字を書く	void	r0=表示したい数字	{J}
08009FE8	会話@0080@0005で参照できるところに数字を書く	void	r0=表示したい数字	{U}

0800B4C6	シナリオ分岐選択子表示	void	{J}
0800B58A	シナリオ分岐選択子表示	void	{U}

//https://doc.feuniverse.us/stan より
0804A9FA	NewMenu_Default Constructs Menu 6C, BG1 is background, BG0 is foreground, no parent 6C, default geometry, default everything	RET=E_Menu 6C pointer	r0=pointer to Menu Definition	{J}
0804A212	NewMenu_Default Constructs Menu 6C, BG1 is background, BG0 is foreground, no parent 6C, default geometry, default everything	RET=E_Menu 6C pointer	r0=pointer to Menu Definition	{U}
0804AA0C	NewMenu_DefaultAdjusted Same as NewMenu_Default, except default geometry is adjusted given the parameters	RET=E_Menu 6C pointer	r0=pointer to Menu Definition	r1=some x screen position?	r2=X tile position of menu on the left	r3=X tile position of menu of the right	{J}
0804A224	NewMenu_DefaultAdjusted Same as NewMenu_Default, except default geometry is adjusted given the parameters	RET=E_Menu 6C pointer	r0=pointer to Menu Definition	r1=some x screen position?	r2=X tile position of menu on the left	r3=X tile position of menu of the right	{U}
0804AA3C	NewMenu_DefaultChild Same as NewMenu_Default, except the E_Menu has a parent	RET=E_Menu 6C pointer	r0=pointer to Menu Definition	r1=Parent 6C	{J}
0804A254	NewMenu_DefaultChild Same as NewMenu_Default, except the E_Menu has a parent	RET=E_Menu 6C pointer	r0=pointer to Menu Definition	r1=Parent 6C	{U}

//from https://doc.feuniverse.us/static/stan/EventEngineCalls.txt
08035CC4	CallEventsFromBuffer Will call the events corresponding the output of CheckForEvents	void	r0=Event Check Buffer, r1=Passed Argument to Event Engine Call	{J}
080357EC	CallEventsFromBuffer Will call the events corresponding the output of CheckForEvents	void	r0=Event Check Buffer, r1=Passed Argument to Event Engine Call	{U}

//from https://doc.feuniverse.us/static/stan/RealSaveData.txt
080A7BB4	LoadLocalEventIds	{J}
080A722C	LoadLocalEventIds	{U}
0809F384	LoadGlobalEventIds	{J}
0809E974	LoadGlobalEventIds	{U}
080A119C	SaveGame	{J}
080A0810	SaveGame	{U}
080A1276	LoadGame	{J}
080A08EE	LoadGame	{U}
080A13E8	SaveUnit     	void	r0=Unit	r1=Target SRAM	{J}
080A0A60	SaveUnit     	void	r0=Unit	r1=Target SRAM	{U}
080A1824	LoadSavedUnit	void	r0=Source SRAM	r1=Unit	{J}
080A0E9C	LoadSavedUnit	void	r0=Source SRAM	r1=Unit	{U}

//from https://doc.feuniverse.us/static/stan/TrigoTables.txt
080C0F18	:080C1117	Lookup Table for cos (0x100 -> 0 -> -0x100 -> 0 -> 0x100)	{J}
080C5AC8	:080C5CC7	Lookup Table for cos (0x100 -> 0 -> -0x100 -> 0 -> 0x100)	{U}
080C0E98	:080C0F97	Lookup Table for sin (0 -> 0x100 -> 0 -> -0x100 -> 0)	{J}
080C5A48	:080C5B47	Lookup Table for sin (0 -> 0x100 -> 0 -> -0x100 -> 0)	{U}

//from https://doc.feuniverse.us/static/stan/TCSNotes.txt
08012658	TCS_New Creates a new TCS	RET=TCS Pointer	r0=Source ROMTCS, r1=OAM Index? idk	{J}
08011FC4	TCS_New Creates a new TCS	RET=TCS Pointer	r0=Source ROMTCS, r1=OAM Index? idk	{U}
0801267C	TCS_Free Frees/Deletes/Ends a TCS	void	r0=TCS	{J}
08011FE8	TCS_Free Frees/Deletes/Ends a TCS	void	r0=TCS	{U}
08012694	TCS_Update Updates TCS Logic and Graphics	RET=bool	r0=TCS	r1=display x	r2=display y	{J}
08012000	TCS_Update Updates TCS Logic and Graphics	RET=bool	r0=TCS	r1=display x	r2=display y	{U}
080128F0	TCS_SetAnim Sets Anim of TCS	void	r0=TCS	r1=Anim Index	{J}
0801225C	TCS_SetAnim Sets Anim of TCS	void	r0=TCS	r1=Anim Index	{U}
08012924	TCS_SetROMTCS Sets (Changes) ROMTCS of TCS	void	r0=TCS, r1=ROMTCS	{J}
08012290	TCS_SetROMTCS Sets (Changes) ROMTCS of TCS	void	r0=TCS, r1=ROMTCS	{U}
0801263C	TCS_ClearAll	{J}
080126BC	TCS_RegisterGraphics	{J}
08012028	TCS_RegisterGraphics	{U}
08012718	TCS_Exec	{J}
08012084	TCS_Exec	{U}
08012808	TCS_QueueRotScaleData	{J}
08012174	TCS_QueueRotScaleData	{U}
08012A54	TCS_Load	{J}
080123C0	TCS_Load	{U}
08012A78	TCS_ExecOneFrame	{J}
080123E4	TCS_ExecOneFrame	{U}
08012A98	TCS_Init	{J}
08012404	TCS_Init	{U}
08012AD0	TCS_Alloc	{J}
08012434	TCS_Alloc	{U}


@ROMTCS@00	short	Relative Offset to Frame Data Ref Array
@ROMTCS@02	short	Relative Offset to Anim Data Ref Array
	
@ROMTCSRefArrays@00	short	Arrays of shorts that are relative offsets (relative *to the array*) to the relevant data
@ROMTCSAnimData@00	short	cycle time of this anim frame
@ROMTCSAnimData@02	short	data	if (cycle time is non 0){ Frame index of this anim frame}else{ 0 = Error, 1 = End/Free Anim/TCS, FFFF = Loop back to start of Anim, other = same as with std cycle }

@ROMTCSFrameData@00	short	alpha
@ROMTCSFrameData@02	short	xScale
@ROMTCSFrameData@04	short	yScale

@APHandle@00	&ROMTCS	Pointer to ROMTCS
@APHandle@04	&ROMTCSFrameData	Pointer to Frame Data Ref (from ROMTCS)
@APHandle@08	&ROMTCSAnimData	Pointer to Current Anim Data (Start, where you go back on loop)
@APHandle@0C	&ROMTCSAnimData	Pointer to Current Anim Data (Cursor)
@APHandle@10	&ROMTCSFrameData	Pointer to Current Frame/OAM Data
@APHandle@14	pointer	Pointer Current Rot/Scale Data
@APHandle@18	short	Cycle Timer
@APHandle@1A	short	Cycle Time Step (0x100 is one frame)
@APHandle@1C	short	Sub frame time offset or something
@APHandle@1E	short	OAM Index?
@APHandle@20	byte	bool defining whether gfx needs update
@APHandle@21	byte	Rotation/Scale OAM Index
@APHandle@22	short	OAM Extra Data (Tile Index Root & OAM2 Stuff)
@APHandle@24	pointer	Gfx Pointer

03000110	@APHandle	gApPool	{U}
03000110	@APHandle	gApPool	{J}

@AnimationInterpreter@00	short	state
@AnimationInterpreter@02	short	xPosition
@AnimationInterpreter@04	short	yPosition
@AnimationInterpreter@06	short	delayTimer
@AnimationInterpreter@08	short	oam2base
@AnimationInterpreter@0a	short	drawLayerPriority
@AnimationInterpreter@0c	short	state2
@AnimationInterpreter@0e	short	nextRoundId
@AnimationInterpreter@10	short	state3
@AnimationInterpreter@12	byte	currentRoundType
@AnimationInterpreter@13	byte	frameIndex
@AnimationInterpreter@14	byte	queuedCommandCount
@AnimationInterpreter@15	byte	commandQueue
@AnimationInterpreter@20	word	pCurrentFrame
@AnimationInterpreter@24	word	pStartFrame
@AnimationInterpreter@28	word	pUnknown28
@AnimationInterpreter@2c	word	pUnknown2C
@AnimationInterpreter@30	word	pStartObjData
@AnimationInterpreter@34	&AnimationInterpreter	pPrev
@AnimationInterpreter@38	&AnimationInterpreter	pNext
@AnimationInterpreter@40	&AnimationInterpreter	pUnknown40
@AnimationInterpreter@44	&AnimationInterpreter	pUnknown44

@WaveData@00	short	type
@WaveData@02	short	status
@WaveData@04	word	freq
@WaveData@08	word	loopStart
@WaveData@0c	word	size
@WaveData@10	byte	data_array

@INSTRUMENT_TONEDATA@00	byte	type
@INSTRUMENT_TONEDATA@01	byte	key
@INSTRUMENT_TONEDATA@02	byte	length
@INSTRUMENT_TONEDATA@03	byte	pan_sweep
@INSTRUMENT_TONEDATA@04	&WaveData	wav
@INSTRUMENT_TONEDATA@0c	byte	attack
@INSTRUMENT_TONEDATA@0d	byte	decay
@INSTRUMENT_TONEDATA@0e	byte	sustain
@INSTRUMENT_TONEDATA@0f	byte	release

@SoundChannel@00	byte	status
@SoundChannel@01	byte	type
@SoundChannel@02	byte	rightVolume
@SoundChannel@03	byte	leftVolume
@SoundChannel@04	byte	attack
@SoundChannel@05	byte	decay
@SoundChannel@06	byte	sustain
@SoundChannel@07	byte	release
@SoundChannel@08	byte	ky
@SoundChannel@09	byte	ev
@SoundChannel@0a	byte	er
@SoundChannel@0b	byte	el
@SoundChannel@0c	byte	echoVolume
@SoundChannel@0d	byte	echoLength
@SoundChannel@0e	byte	d1
@SoundChannel@0f	byte	d2
@SoundChannel@10	byte	gt
@SoundChannel@11	byte	mk
@SoundChannel@12	byte	ve
@SoundChannel@13	byte	pr
@SoundChannel@14	byte	rp
@SoundChannel@15	byte	d3_0
@SoundChannel@16	byte	d3_1
@SoundChannel@17	byte	d3_2
@SoundChannel@18	word	ct
@SoundChannel@1C	word	fw
@SoundChannel@20	word	freq
@SoundChannel@24	&WaveData	wav
@SoundChannel@28	word	cp
@SoundChannel@2c	&MusicPlayerTrack track
@SoundChannel@30	word	pp
@SoundChannel@34	word	np
@SoundChannel@38	word	d4
@SoundChannel@3C	word	xpi
@SoundChannel@40	word	xpc

@MusicPlayerTrack@00	byte	flags
@MusicPlayerTrack@01	byte	wait
@MusicPlayerTrack@02	byte	patternLevel
@MusicPlayerTrack@03	byte	repN
@MusicPlayerTrack@04	byte	gateTime
@MusicPlayerTrack@05	byte	key
@MusicPlayerTrack@06	byte	velocity
@MusicPlayerTrack@07	byte	runningStatus
@MusicPlayerTrack@08	byte	keyM
@MusicPlayerTrack@09	byte	pitM
@MusicPlayerTrack@0a	byte	keyShift
@MusicPlayerTrack@0b	byte	keyShiftX
@MusicPlayerTrack@0c	byte	tune
@MusicPlayerTrack@0d	byte	pitX
@MusicPlayerTrack@0e	byte	bend
@MusicPlayerTrack@0f	byte	bendRange
@MusicPlayerTrack@10	byte	volMR
@MusicPlayerTrack@11	byte	volML
@MusicPlayerTrack@12	byte	vol
@MusicPlayerTrack@13	byte	volX
@MusicPlayerTrack@14	byte	pan
@MusicPlayerTrack@15	byte	panX
@MusicPlayerTrack@16	byte	modM
@MusicPlayerTrack@17	byte	mod
@MusicPlayerTrack@18	byte	modT
@MusicPlayerTrack@19	byte	lfoSpeed
@MusicPlayerTrack@1a	byte	lfoSpeedC
@MusicPlayerTrack@1b	byte	lfoDelay
@MusicPlayerTrack@1c	byte	lfoDelayC
@MusicPlayerTrack@1d	byte	priority
@MusicPlayerTrack@1e	byte	echoVolume
@MusicPlayerTrack@1f	byte	echoLength
@MusicPlayerTrack@20	&SoundChannel	chan
@MusicPlayerTrack@24	@INSTRUMENT_TONEDATA	instrument_tonedata
@MusicPlayerTrack@34	byte	_gap34
@MusicPlayerTrack@3a	short	_unk_3A
@MusicPlayerTrack@3c	short	_unk_3C
@MusicPlayerTrack@40	word	cmdPtr
@MusicPlayerTrack@44	byte	patternStack0
@MusicPlayerTrack@45	byte	patternStack1
@MusicPlayerTrack@46	byte	patternStack2
@MusicPlayerTrack@47	byte	_pad47

@SongHeader@00	byte	trackCount
@SongHeader@01	byte	blockCount
@SongHeader@02	byte	priority
@SongHeader@03	byte	reverb
@SongHeader@04	&INSTRUMENT_TONEDATA	instrument_tonedata
@SongHeader@08	byte	part_array

@MusicPlayerInfo@00	&SongHeader	songHeader
@MusicPlayerInfo@04	word	status
@MusicPlayerInfo@08	byte	trackCount
@MusicPlayerInfo@09	byte	priority
@MusicPlayerInfo@0a	byte	cmd
@MusicPlayerInfo@0b	byte	unk_B
@MusicPlayerInfo@0c	word	clock
@MusicPlayerInfo@10	byte	gap	//[8]
@MusicPlayerInfo@18	word	memAccAreaPtr
@MusicPlayerInfo@1c	short	tempoD
@MusicPlayerInfo@1e	short	tempoU
@MusicPlayerInfo@20	short	tempoI
@MusicPlayerInfo@22	short	tempoC
@MusicPlayerInfo@24	short	fadeOI
@MusicPlayerInfo@26	short	fadeOC
@MusicPlayerInfo@28	short	fadeOV
@MusicPlayerInfo@2a	short	_pad2A
@MusicPlayerInfo@2c	&MusicPlayerTrack	tracksArray
@MusicPlayerInfo@30	&INSTRUMENT_TONEDATA	instrument_tonedata
@MusicPlayerInfo@34	word	ident
@MusicPlayerInfo@38	word	func
@MusicPlayerInfo@3c	word	intp

@MusicPlayer@00	&MusicPlayerInfo	info
@MusicPlayer@04	&MusicPlayerTrack	track
@MusicPlayer@08	byte	_unk_8
@MusicPlayer@09	byte	_pad09
@MusicPlayer@0a	byte	_unk_A

@Song@00	&SongHeader	header
@Song@04	short	ms
@Song@06	short	me

//from https://doc.feuniverse.us/static/stan/RangeMoveDisplayNotes.txt
0801D6A4	DisplayMoveRangeGraphics Creates relevant 6C and sets relevant stuff in game data	void	r0=type bitfield (see above)	{J}
0801D2A0	DisplayMoveRangeGraphics Creates relevant 6C and sets relevant stuff in game data	void	r0=type bitfield (see above)	{U}
0801D6D8	HideMoveRangeGraphics Deletes relevant 6C and all that stuff	{J}
0801D2D4	HideMoveRangeGraphics Deletes relevant 6C and all that stuff	{U}

//from https://doc.feuniverse.us/static/stan/TrapNotes%20(With%20Map%20Changes!).txt
@TrapEntry@00	byte	x pos
@TrapEntry@01	byte	y pos
@TrapEntry@02	byte	trap type id	0=Nothing (unused entry) 1=Ballista 2=Wall/Snag 3=Map Change (yes those are actually traps) 4=Fire Trap 5=Gas Trap 6=Map Change too? game supports them but idk where it might be used 7=Arrow Trap 8=? (used?) 9=? (used?) A=Light from Torch Staff B=Mine C=Gorgon Egg? (needs investigating as to in which circumstances) D=Light Rune
@TrapEntry@03	byte	ext1
@TrapEntry@04	byte	ext2
@TrapEntry@05	byte	ext3
@TrapEntry@06	byte	ext4
@TrapEntry@07	byte	ext5

0203A518	@TrapEntry@[40]	Traps	{U}
0203A514	@TrapEntry@[40]	Traps	{J}

0802BA6C	トラップデータへのポインタ	{U}
0802C174	トラップデータへのポインタ	{J}

0802BF8C	AddTrap Adds/Creates new trap	Pointer to Trap Entry Struct	r0=x	r1=y	r2=trap type	r3=extra byte 1	{J}
0802BACC	AddTrap Adds/Creates new trap	Pointer to Trap Entry Struct	r0=x	r1=y	r2=trap type	r3=extra byte 1	{U}
0802BFB0	AddTrapExt Adds/Creates new trap (with extra parameters) (used exclusively for fire/gas/arrow traps, trap 6 and gorgon eggs)	Pointer to Trap Entry Struct	r0=x	r1=y	r2=trap type	 r3=ext1	 [sp+0]:ext2&4	[sp+4]:ext3	[sp+8]:ext5	{J}
0802BAF0	AddTrapExt Adds/Creates new trap (with extra parameters) (used exclusively for fire/gas/arrow traps, trap 6 and gorgon eggs)	Pointer to Trap Entry Struct	r0=x	r1=y	r2=trap type	 r3=ext1	 [sp+0]:ext2&4	[sp+4]:ext3	[sp+8]:ext5	{U}
0802BF54	GetSpecificTrapAt Looks for a trap at given position with given type	Pointer to Trap Entry Struct (0 if none found)	r0=x	r1=y	r2=trap type	{J}
0802BA94	GetSpecificTrapAt Looks for a trap at given position with given type	Pointer to Trap Entry Struct (0 if none found)	r0=x	r1=y	r2=trap type	{U}
0802BF08	ResetTraps Resets Trap Array (Sets all trap ids to 0)	{J}
0802BA48	ResetTraps Resets Trap Array (Sets all trap ids to 0)	{U}
0802C7D8	GetTrap Gets Trap Struct by Index	Pointer to Trap Entry Struct (= pTrapArrayStart + 8*i)	r0=Trap index (0-indexed position in trap data array)	{J}
0802C318	GetTrap Gets Trap Struct by Index	Pointer to Trap Entry Struct (= pTrapArrayStart + 8*i)	r0=Trap index (0-indexed position in trap data array)	{U}
0802BFCC	RemoveTrap Removes Trap Struct from the array	void	r0=Trap Struct Entry Pointer	{J}
0802BB0C	RemoveTrap Removes Trap Struct from the array	void	r0=Trap Struct Entry Pointer	{U}
08034C18	AddBallista Adds/Creates Ballista	Trap Struct Entry Pointer	r0=x, r1=y, r2=Ballista Item Index	{J}
08034740	AddBallista Adds/Creates Ballista	Trap Struct Entry Pointer	r0=x, r1=y, r2=Ballista Item Index	{U}
0801975E	AddLightRune Adds/Creates Light Rune (fixed 3 turn duration) (Handles Terrain Changes too)	Trap Struct Entry Pointer	r0=x	r1=y	{J}
087CB610	AddLightRune Adds/Creates Light Rune (fixed 3 turn duration) (Handles Terrain Changes too)	Trap Struct Entry Pointer	r0=x	r1=y	{U}
08019796	RemoveLightRune Removes Light Rune (Handles Terrain Changes too)	void	r0=Trap Struct Entry Pointer	{J}
080193AE	RemoveLightRune Removes Light Rune (Handles Terrain Changes too)	void	r0=Trap Struct Entry Pointer	{U}
0802C140	UpdateAllLightRunes Goes through all light runes and changes terrain accordingly (used on load from suspend maybe?)	{J}
0802BC80	UpdateAllLightRunes Goes through all light runes and changes terrain accordingly (used on load from suspend maybe?)	{U}
0802C078	AddSnagsAndWalls Goes through the terrain map and adds all the snag & wall traps where relevant	{J}
0802BBB8	AddSnagsAndWalls Goes through the terrain map and adds all the snag & wall traps where relevant	{U}
0802C70C	HandleTrapDecay Handle Turn count down for Light Runes & Torch Lights	{J}
0802C24C	HandleTrapDecay Handle Turn count down for Light Runes & Torch Lights	{U}
0802C294	TriggerMapChange Adds a map change trap. /!\ it doesn't actually *apply* the map change, just sets the trigger on.	void	r0=Map Change Id	{J}
0802BDD4	TriggerMapChange Adds a map change trap. /!\ it doesn't actually *apply* the map change, just sets the trigger on.	void	r0=Map Change Id	{U}
0802C2A8	UntriggerMapChange Removes a map change trap. /!\ it doesn't actually *apply* the map change, just sets the trigger off.	void	r0=Map Change Id	{J}
0802BDE8	UntriggerMapChange Removes a map change trap. /!\ it doesn't actually *apply* the map change, just sets the trigger off.	void	r0=Map Change Id	{U}
0802C100	ApplyTrapMapChanges Applies all triggered map changes (used on suspend load maybe?)	{J}
0802BC40	ApplyTrapMapChanges Applies all triggered map changes (used on suspend load maybe?)	{U}
0802C020	AddArrowTrap Adds/Creates Arrow Trap	void	r0=x	r1=Initial Turn Countdown	r2=Reset Turn Countdown	{J}
0802BB60	AddArrowTrap Adds/Creates Arrow Trap	void	r0=x	r1=Initial Turn Countdown	r2=Reset Turn Countdown	{U}
0802C000	AddGasTrap Adds/Creates Gas Trap	void	r0=x	r1=y	r2=direction	r3=Initial Turn Countdown	[sp+0]:Reset Turn Countdown	{J}
0802BB40	AddGasTrap Adds/Creates Gas Trap	void	r0=x	r1=y	r2=direction	r3=Initial Turn Countdown	[sp+0]:Reset Turn Countdown	{U}
0802BFE4	AddFireTrap Adds/Creates Fire Trap	void	r0=x	r1=y	r2=Initial Turn Countdown	r3=Reset Turn Countdown	{J}
0802BB24	AddFireTrap Adds/Creates Fire Trap	void	r0=x	r1=y	r2=Initial Turn Countdown	r3=Reset Turn Countdown	{U}
0802C228	ApplyMapChangesById	void	r0=Map Change Id	{J}
0802BD68	ApplyMapChangesById	void	r0=Map Change Id	{U}
08019714	FlushTerrainData(You need to call that in order to have the map changes properly applied?)	{J}
0801932C	FlushTerrainData(You need to call that in order to have the map changes properly applied?)	{U}

//from https://doc.feuniverse.us/static/stan/TargetSelectionNotes.txt
0804B4D8	AddTarget	Adds Target to the list	void	r0=x	r1=y	r2=Unit Index	r3=Extra/Trap Id?	{J}
0804ACFC	AddTarget	Adds Target to the list	void	r0=x	r1=y	r2=Unit Index	r3=Extra/Trap Id?	{U}
0804B950	GetTargetListSize	Gets list size (used to check for empty lists in usability routines)	Number of entries in the list	{J}
0804b174	GetTargetListSize	Gets list size (used to check for empty lists in usability routines)	Number of entries in the list	{U}
0804B95C	GetTarget	Gets Target Struct by Index	Target Struct for given Index (= pTargetList + i*sizeof(TargetStruct))	r0=Target Index	{J}
0804B180	GetTarget	Gets Target Struct by Index	Target Struct for given Index (= pTargetList + i*sizeof(TargetStruct))	r0=Target Index	{U}
0804B4C0	InitTargets	Inits Target List (and clears it)	void	r0=x, r1=y (the position is used internally for sorting later)	{J}
0804ACE4	InitTargets	Inits Target List (and clears it)	void	r0=x, r1=y (the position is used internally for sorting later)	{U}
08023F00	ForEachAdjacentUnit	Goes through all units adjacent to position and calls routine with unit struct as argument	void	r0=x	r1=y	r2=Routine pointer (takes Unit Struct as argument)	{J}
08023A74	ForEachAdjacentUnit	Goes through all units adjacent to position and calls routine with unit struct as argument	void	r0=x	r1=y	r2=Routine pointer (takes Unit Struct as argument)	{U}
08023DD0	ForEachUnitInRange	Goes through all units that are on a non-null tile on the Range Map and calls routine	void	r0=Routine pointer (takes Unit Struct as argument)	{J}
08023944	ForEachUnitInRange	Goes through all units that are on a non-null tile on the Range Map and calls routine	void	r0=Routine pointer (takes Unit Struct as argument)	{U}
0804B664	NewTargetSelection	Creates a new target selection 6C and everything (target list must be setup)	Target Selection 6C	r0=pointer to routine list	{J}
0804AE88	NewTargetSelection	Creates a new target selection 6C and everything (target list must be setup)	Target Selection 6C	r0=pointer to routine list	{U}
0804B6C8	NewTargetSelection_Specialized	Same as above, but the A Press routine from the list gets overwritten by the one given as arg	Target Selection 6C	r0=pointer to routine list	r1=routine to call on A Press	{J}



//from https://doc.feuniverse.us/static/stan/TorchStaffNotes.txt
0802849C	NewTorchStaffSelection	{J}
08028010	NewTorchStaffSelection	{U}
08028354	TorchTargetPosSelect_Init	{J}
08027EC8	TorchTargetPosSelect_Init	{U}
080283AC	TorchTargetSelection_Loop	{J}
08027F20	TorchTargetSelection_Loop	{U}
0802849C	NewTorchStaffSelection	{J}
08028010	NewTorchStaffSelection	{U}

080BE394	umul3232H32	{J}
080BE3A4	SoundMain	{J}
080BE428	SoundMainRAM	{J}
080BE7CC	SoundMainBTM	{J}
080BE7E4	RealClearChain	{J}
080BE804	ply_fine	{J}
080BE834	MPlayJumpTableCopy	{J}
080BE868	ld_r3_tp_adr_i	{J}
080BE874	ply_goto	{J}
080BE894	ply_patt	{J}
080BE8B0	ply_pend	{J}
080BE8C4	ply_rept	{J}
080BE8F4	ply_prio	{J}
080BE900	ply_tempo	{J}
080BE914	ply_keysh	{J}
080BE928	ply_voice	{J}
080BE958	ply_vol	{J}
080BE96C	ply_pan	{J}
080BE980	ply_bend	{J}
080BE994	ply_bendr	{J}
080BE9A8	ply_lfodl	{J}
080BE9B4	ply_modt	{J}
080BE9CC	ply_tune	{J}
080BE9E0	ply_port	{J}
080BE9F8	m4aSoundVSync	{J}
080BEA44	MPlayMain	{J}
080BECAC	TrackStop	{J}
080BECF0	ChnVolSetAsm	{J}
080BED20	ply_note	{J}
080BEF20	ply_endtie	{J}
080BEF60	clear_modM	{J}
080BEF88	ply_lfos	{J}
080BEF9C	ply_mod	{J}
080BEFB0	MidiKeyToFreq	{J}
080BF014	UnusedDummyFunc	{J}
080BF018	MPlayContinue	{J}
080BF034	MPlayFadeOut	{J}
080BF054	m4aSoundInit	{J}
080BF0CC	m4aSoundMain	{J}
080BF0D8	m4aSongNumStart	{J}
080BF104	m4aSongNumStartOrChange	{J}
080BF104	m4aSongNumStartOrContinue	{J}
080BF1A4	m4aSongNumStop	{J}
080BF1A4	m4aSongNumContinue	{J}
080BF20C	m4aMPlayAllStop	{J}
080BF238	m4aMPlayContinue	{J}
080BF20C	m4aMPlayAllContinue	{J}
080BF270	m4aMPlayFadeOut	{J}
080BF280	m4aMPlayFadeOutTemporarily	{J}
080BF2A0	m4aMPlayFadeIn	{J}
080BF2C8	m4aMPlayImmInit	{J}
080BF310	MPlayExtender	{J}
080BF428	MusicPlayerJumpTableCopy	{J}
080BF42C	ClearChain	{J}
080BF42C	Clear64byte	{J}
080BF454	SoundInit	{J}
080BF54C	SampleFreqSet	{J}
080BF5F0	m4aSoundMode	{J}
080BF688	SoundClear	{J}
080BF6DC	m4aSoundVSyncOff	{J}
080BF758	m4aSoundVSyncOn	{J}
080BF794	MPlayOpen	{J}
080BF80C	MPlayStart	{J}
080BF8F0	m4aMPlayStop	{J}
080BF930	FadeOutBody	{J}
080BF9F8	TrkVolPitSet	{J}
080BFAAC	MidiKeyToCgbFreq	{J}
080BFB54	CgbOscOff	{J}
080BFC0C	CgbSound	{J}
080C0058	m4aMPlayTempoControl	{J}
080C0080	m4aMPlayVolumeControl	{J}
080C00E8	m4aMPlayPitchControl	{J}
080C015C	m4aMPlayPanpotControl	{J}
080C01C4	ClearModM	{J}
080C01E4	m4aMPlayModDepthSet	{J}
080C0258	m4aMPlayLFOSpeedSet	{J}
080C02CC	ply_memacc	{J}
080C0424	ply_xcmd	{J}
080C0444	ply_xxx	{J}
080C0458	ply_xwave	{J}
080C04A0	ply_xtype	{J}
080C04B4	ply_xatta	{J}
080C04C8	ply_xdeca	{J}
080C04DC	ply_xsust	{J}
080C04F0	ply_xrele	{J}
080C0504	ply_xiecv	{J}
080C0510	ply_xiecl	{J}
080C051C	ply_xleng	{J}
080C0530	ply_xswee	{J}
080C0458	ply_xcmd_0D	{J}
080C0584	SoftReset	{J}
080C05AC	Sqrt	{J}
080C0790	_call_via_r0	{J}
080C0794	_call_via_r1	{J}
080C0798	_call_via_r2	{J}
080C079C	_call_via_r3	{J}
080C07A0	_call_via_r4	{J}
080C07A4	_call_via_r5	{J}
080C07A8	_call_via_r6	{J}
080C07AC	_call_via_r7	{J}
080C07B0	_call_via_r8	{J}
080C07B4	_call_via_r9	{J}
080C07B8	_call_via_sl	{J}
080C07BC	_call_via_fp	{J}
080C07C0	_call_via_ip	{J}
080C07C4	_call_via_sp	{J}
080C07C8	_call_via_lr	{J}
080C07CC	__divsi3	{J}
080506E0	__fixunssfsi	{J}
080C0864	__modsi3	{J}
080C0934	__muldi3	{J}
080320D8	__udivdi3	{J}
080C09A4	__udivsi3	{J}
080C0A1C	__umodsi3	{J}
080419D4	__muldf3	{J}
080C075C	__lshrdi3	{J}
0803DD20	_malloc_trim_r	{J}
080C0ADC	memcpy	{J}
080C0B3C	memset	{J}
080C0B90	strcpy	{J}
080C0BDC	strlen	{J}


080BD850	umul3232H32	{U}
080BD860	SoundMain	{U}
080BD8E4	SoundMainRAM	{U}
080BDC88	SoundMainBTM	{U}
080BDCA0	RealClearChain	{U}
080BDCC0	ply_fine	{U}
080BDCF0	MPlayJumpTableCopy	{U}
080BDD24	ld_r3_tp_adr_i	{U}
080BDD30	ply_goto	{U}
080BDD50	ply_patt	{U}
080BDD6C	ply_pend	{U}
080BDD80	ply_rept	{U}
080BDDB0	ply_prio	{U}
080BDDBC	ply_tempo	{U}
080BDDD0	ply_keysh	{U}
080BDDE4	ply_voice	{U}
080BDE14	ply_vol	{U}
080BDE28	ply_pan	{U}
080BDE3C	ply_bend	{U}
080BDE50	ply_bendr	{U}
080BDE64	ply_lfodl	{U}
080BDE70	ply_modt	{U}
080BDE88	ply_tune	{U}
080BDE9C	ply_port	{U}
080BDEB4	m4aSoundVSync	{U}
080BDF00	MPlayMain	{U}
080BE168	TrackStop	{U}
080BE1AC	ChnVolSetAsm	{U}
080BE1DC	ply_note	{U}
080BE3DC	ply_endtie	{U}
080BE41C	clear_modM	{U}
080BE444	ply_lfos	{U}
080BE458	ply_mod	{U}
080BE46C	MidiKeyToFreq	{U}
080BE4D0	UnusedDummyFunc	{U}
080BE4D4	MPlayContinue	{U}
080BE4F0	MPlayFadeOut	{U}
080BE510	m4aSoundInit	{U}
080BE588	m4aSoundMain	{U}
080BE594	m4aSongNumStart	{U}
080BE5C0	m4aSongNumStartOrChange	{U}
080BE5C0	m4aSongNumStartOrContinue	{U}
080BE660	m4aSongNumStop	{U}
080BE660	m4aSongNumContinue	{U}
080BE6C8	m4aMPlayAllStop	{U}
080BE6F4	m4aMPlayContinue	{U}
080BE6C8	m4aMPlayAllContinue	{U}
080BE72C	m4aMPlayFadeOut	{U}
080BE73C	m4aMPlayFadeOutTemporarily	{U}
080BE75C	m4aMPlayFadeIn	{U}
080BE784	m4aMPlayImmInit	{U}
080BE7CC	MPlayExtender	{U}
080BE8E4	MusicPlayerJumpTableCopy	{U}
080BE8E8	ClearChain	{U}
080BE8E8	Clear64byte	{U}
080BE910	SoundInit	{U}
080BEA08	SampleFreqSet	{U}
080BEAAC	m4aSoundMode	{U}
080BEB44	SoundClear	{U}
080BEB98	m4aSoundVSyncOff	{U}
080BEC14	m4aSoundVSyncOn	{U}
080BEC50	MPlayOpen	{U}
080BECC8	MPlayStart	{U}
080BEDAC	m4aMPlayStop	{U}
080BEDEC	FadeOutBody	{U}
080BEEB4	TrkVolPitSet	{U}
080BEF68	MidiKeyToCgbFreq	{U}
080BF010	CgbOscOff	{U}
080BF0C8	CgbSound	{U}
080BF514	m4aMPlayTempoControl	{U}
080BF53C	m4aMPlayVolumeControl	{U}
080BF5A4	m4aMPlayPitchControl	{U}
080BF618	m4aMPlayPanpotControl	{U}
080BF680	ClearModM	{U}
080BF6A0	m4aMPlayModDepthSet	{U}
080BF714	m4aMPlayLFOSpeedSet	{U}
080BF788	ply_memacc	{U}
080BF8E0	ply_xcmd	{U}
080BF900	ply_xxx	{U}
080BF914	ply_xwave	{U}
080BF95C	ply_xtype	{U}
080BF970	ply_xatta	{U}
080BF984	ply_xdeca	{U}
080BF998	ply_xsust	{U}
080BF9AC	ply_xrele	{U}
080BF9C0	ply_xiecv	{U}
080BF9CC	ply_xiecl	{U}
080BF9D8	ply_xleng	{U}
080BF9EC	ply_xswee	{U}
080BF914	ply_xcmd_0D	{U}
080BFA40	SoftReset	{U}
080BFA68	Sqrt	{U}
080BFC4C	_call_via_r0	{U}
080BFC50	_call_via_r1	{U}
080BFC54	_call_via_r2	{U}
080BFC58	_call_via_r3	{U}
080BFC5C	_call_via_r4	{U}
080BFC60	_call_via_r5	{U}
080BFC64	_call_via_r6	{U}
080BFC68	_call_via_r7	{U}
080BFC6C	_call_via_r8	{U}
080BFC70	_call_via_r9	{U}
080BFC74	_call_via_sl	{U}
080BFC78	_call_via_fp	{U}
080BFC7C	_call_via_ip	{U}
080BFC80	_call_via_sp	{U}
080BFC84	_call_via_lr	{U}
080BFC88	__divsi3	{U}
0804FF04	__fixunssfsi	{U}
080BFD20	__modsi3	{U}
080BFDF0	__muldi3	{U}
08010690	__udivdi3	{U}
080BFE60	__udivsi3	{U}
080BFED8	__umodsi3	{U}
080C4078	__pack_d	{U}
080C41C0	__unpack_d	{U}
080C4504	__adddf3	{U}
080C4534	__subdf3	{U}
080C456C	__muldf3	{U}
080C4814	__divdf3	{U}
080C499C	__fpcmp_parts_d	{U}
080C4A9C	__cmpdf2	{U}
080C4AC8	__eqdf2	{U}
080C4B14	__nedf2	{U}
080C4B60	__gtdf2	{U}
080C4BAC	__gedf2	{U}
080C4BF8	__ltdf2	{U}
080C4C44	__ledf2	{U}
080C4C90	__floatsidf	{U}
080C4D0C	__fixdfsi	{U}
080C4D80	__negdf2	{U}
080C4DA8	__make_dp	{U}
080C4DD0	__truncdfsf2	{U}
080C4E14	__pack_f	{U}
080C4ECC	__unpack_f	{U}
080C50C4	__addsf3	{U}
080C50F0	__subsf3	{U}
080C5124	__mulsf3	{U}
080C5288	__divsf3	{U}
080C5374	__fpcmp_parts_f	{U}
080C5458	__cmpsf2	{U}
080C5480	__eqsf2	{U}
080C54C8	__nesf2	{U}
080C5510	__gtsf2	{U}
080C5558	__gesf2	{U}
080C55A0	__ltsf2	{U}
080C55E8	__lesf2	{U}
080C5630	__floatsisf	{U}
080C5690	__fixsfsi	{U}
080C56F8	__negsf2	{U}
080C571C	__make_fp	{U}
080C5734	__extendsfdf2	{U}
080C5760	__lshrdi3	{U}
080C5794	__negdi2	{U}
080C00C8	strcpy	{U}
080C3A44	strcmp	{U}
080BFFF8	memset	{U}
080C01EC	vfprintf	{U}
080C0200	_vfprintf_r	{U}
080C12C4	__swsetup	{U}
080C2634	__sfvwrite	{U}
080C2290	__sfmoreglue	{U}
080C22C0	__sfp	{U}
080C2354	__sinit	{U}
080C004C	_sprintf_r	{U}
080C0088	sprintf	{U}
080C12C4	__srefill	{U}
080C2860	_fwalk	{U}
080C3980	__sread	{U}
080C39B4	__swrite	{U}
080C39F4	__sseek	{U}
080C290C	__smakebuf	{U}
080C3910	isinf	{U}
080C3934	isnan	{U}
080C14CC	_dtoa_r	{U}
080C2F04	_mbtowc_r	{U}
080C3040	_Balloc	{U}
080C3098	_Bfree	{U}
080C30B0	_multadd	{U}
080C3148	_s2b	{U}
080C31CC	_hi0bits	{U}
080C3224	_lo0bits	{U}
080C32A8	_i2b	{U}
080C32BC	_multiply	{U}
080C3428	_pow5mult	{U}
080C34C0	_lshift	{U}
080C3560	__mcmp	{U}
080C35A0	__mdiff	{U}
080C3690	_ulp	{U}
080C36DC	_b2d	{U}
080C3798	_d2b	{U}
080C3880	_ratio	{U}
080C38D0	_mprec_log10	{U}
080C3954	_close_r	{U}
080C4018	_read_r	{U}
080C3F04	_open_r	{U}
080C3FC4	_fstat_r	{U}
080C3FC4	_gettimeofday_r	{U}
080C4018	_write_r	{U}
080C3F04	_lseek_r	{U}
080C3954	_sbrk_r	{U}
080C3B0C	initialise_monitor_handles	{U}
080C3BBC	_swiread	{U}
080C3BE0	_read	{U}
080C3C28	_swilseek	{U}
080C3CAC	_lseek	{U}
080C3CB8	_swiwrite	{U}
080C3CDC	_write	{U}
080C3D28	_swiopen	{U}
080C3DC8	_open	{U}
080C3DDC	_swiclose	{U}
080C3E10	_close	{U}
080C3E1C	_exit	{U}
080C3E3C	_kill	{U}
080C3E5C	_getpid	{U}
080C3E60	_sbrk	{U}
080C3E9C	_fstat	{U}
080C3EA8	_unlink	{U}
080C3EB0	_raise	{U}
080C3EB4	_gettimeofday	{U}
080C3EE0	_times	{U}
080C3FF0	abort	{U}
080C28A0	_setlocale_r	{U}
080C2B44	_malloc_r	{U}
080C23B4	_free_r	{U}
080C2574	_malloc_trim_r	{U}
080C3F34	_calloc_r	{U}
080BFF98	memcpy	{U}
080C0114	strlen	{U}
080C2F30	memchr	{U}
080C2FB0	memmove	{U}

@Unit@00	pointer	ユニットポインタ
@Unit@04	pointer	クラスポインタ
@Unit@08	byte	レベル
@Unit@09	byte	経験値
@Unit@0A	byte	回復モード
@Unit@0B	byte	部隊表ID
@Unit@0C	byte	状態	(+1=??,+2=行動済,+4=死亡,+8=非出撃,+10=救出中,+20=被救出中,+40=??,+80=??)
@Unit@0D	byte	状態2	(+$20 成長アップ +$40 ?? +$80 ??)
@Unit@0E	byte	状態3	+1=離脱状態
@Unit@0F	byte	状態4	+2=出撃不可
@Unit@10	byte	X	座標
@Unit@11	byte	Y	座標
@Unit@12	byte	最大HP
@Unit@13	byte	現在HP
@Unit@14	byte	力と魔力
@Unit@15	byte	技
@Unit@16	byte	速さ
@Unit@17	byte	守備
@Unit@18	byte	魔防
@Unit@19	byte	運
@Unit@1A	byte	体格＋	(5bit)
@Unit@1B	byte	同行者ID
@Unit@1C	byte	Unknown1	(tmp?)
@Unit@1D	byte	移動＋	(5bit)
@Unit@1E	byte	アイテムID1
@Unit@1F	byte	アイテム数1
@Unit@20	byte	アイテムID2
@Unit@21	byte	アイテム数2
@Unit@22	byte	アイテムID3
@Unit@23	byte	アイテム数3
@Unit@24	byte	アイテムID4
@Unit@25	byte	アイテム数4
@Unit@26	byte	アイテムID5
@Unit@27	byte	アイテム数5
@Unit@28	byte	剣 EXP
@Unit@29	byte	槍 EXP
@Unit@2A	byte	斧 EXP
@Unit@2B	byte	弓 EXP
@Unit@2C	byte	杖 EXP
@Unit@2D	byte	理 EXP
@Unit@2E	byte	光 EXP
@Unit@2F	byte	闇 EXP
@Unit@30	byte	状態とターン
@Unit@31	byte	聖水松明
@Unit@32	byte	支援1
@Unit@33	byte	支援2
@Unit@34	byte	支援3
@Unit@35	byte	支援4
@Unit@36	byte	支援5
@Unit@37	byte	支援6
@Unit@38	byte	支援7
@Unit@39	byte	支援フラグ
@Unit@3A	byte	Unknown2	maybe blank
@Unit@3B	byte	Unknown3	maybe blank
@Unit@3C	pointer	MapSprite
@Unit@40	byte	AI 3
@Unit@41	byte	AI 4
@Unit@42	byte	AI 1
@Unit@43	byte	AI 1 Counter
@Unit@44	byte	AI 2
@Unit@45	byte	AI 2 Counter
@Unit@46	byte	Unknown8	(tmp)
@Unit@47	byte	Unknown9	(blank)


0202BD4C	@Unit@[33]	Player	{J}
0202CEBC	@Unit@[32]	Enemy	{J}
0202DCCC	@Unit@[14]	Ally	{J}

0202BD50	@Unit@[33]	Player	{U}
0202CEC0	@Unit@[32]	Enemy	{U}
0202DCD0	@Unit@[14]	Ally	{U}

02022860	Palette wram buffer
02022C60	gBG0TilemapBuffer	BG 0 wram buffer
02023460	gBG1TilemapBuffer	BG 1 wram buffer
02023C60	gBG2TilemapBuffer	BG 2 wram buffer
02024460	gBG3TilemapBuffer	BG 3 wram buffer

0200310C	Stat screen data	{U}

@StatusMenuText@00	short	start tile index	(relative to Font root)
@StatusMenuText@02	byte	current local x cursor	(in pixels)
@StatusMenuText@03	byte	current text color id
@StatusMenuText@04	byte	Text tile width	(usually only half the actual used tile amount!)
@StatusMenuText@05	bool	Uses Double Buffer
@StatusMenuText@06	byte	current buffer id	(0 or 1)
@StatusMenuText@07	byte	idk	(maybe unused? initialized to 0)
02003144	@StatusMenuText	Skill	{J}
0200314C	@StatusMenuText	Speed	{J}
02003154	@StatusMenuText	Luck	{J}
0200315C	@StatusMenuText	Def	{J}
02003164	@StatusMenuText	Ref	{J}
0200316C	@StatusMenuText	Mov	{J}
02003174	@StatusMenuText	Con	{J}
0200317C	@StatusMenuText	Aid	{J}
02003184	@StatusMenuText	Trv	{J}
0200318C	@StatusMenuText	Affin	{J}
02003194	@StatusMenuText	Cond	{J}
020031CC	@StatusMenuText	Atk	{J}
020031D4	@StatusMenuText	Hit	{J}
020031C4	@StatusMenuText	Rng	{J}
020031DC	@StatusMenuText	Crit	{J}
020031E4	@StatusMenuText	Avoid	{J}
020031EC	@StatusMenuText	Weapon1	{J}
020031F4	@StatusMenuText	Weapon2	{J}
020031FC	@StatusMenuText	Weapon3	{J}
02003204	@StatusMenuText	Weapon4	{J}

02003144	@StatusMenuText	Skill	{U}
0200314C	@StatusMenuText	Speed	{U}
02003154	@StatusMenuText	Luck	{U}
0200315C	@StatusMenuText	Def	{U}
02003164	@StatusMenuText	Ref	{U}
0200316C	@StatusMenuText	Mov	{U}
02003174	@StatusMenuText	Con	{U}
0200317C	@StatusMenuText	Aid	{U}
02003184	@StatusMenuText	Trv	{U}
0200318C	@StatusMenuText	Affin	{U}
02003194	@StatusMenuText	Cond	{U}
020031CC	@StatusMenuText	Atk	{U}
020031D4	@StatusMenuText	Hit	{U}
020031C4	@StatusMenuText	Rng	{U}
020031DC	@StatusMenuText	Crit	{U}
020031E4	@StatusMenuText	Avoid	{U}

//FEU\Stan\_notes\Drawing Text Notes.txt
@DrawFont@00	pointer	root output VRAM pointer
@DrawFont@04	pointer	pointer to glyphs
@DrawFont@08	pointer	pointer to glyph drawing routine (ex: 08004218+1, 08004268+1)
@DrawFont@0C	pointer	pointer to current VRAM tile offset getter (ex: 080041E8+1)
@DrawFont@10	short	base value for text tiles (containing base tile index & palette mask)
@DrawFont@12	short	current tile index (local/relative to root)
@DrawFont@14	short	palette index
@DrawFont@16	byte	idk	 (set from byte at 02028E74, which is initialized at 1 at the start of the game and never changed again. My guess is that it denotes whenever to use Japanses (Shift-JS, 0) or English (ascii, 1) string format, since it is checked in various routines related to strings and glyphs)
@DrawFont@17	byte	idk

02028D58	@DrawFont	Default font struct	{U}	//maybe
02028D50	@DrawFont	Default font struct	{J}	//maybe


//FEU\Stan\_notes\GameDataStruct.txt
@GameData@00	byte	Unknown1
@GameData@01	byte	6C Main 2 Skip Counted	(Main 2 6C Exec will be skipped if this is non 0)
@GameData@02	byte	Unknown2
@GameData@03	byte	GameData State bitfield	&0x01:? &0x02:? &0x04:? &0x08:? &0x10:? &0x20:? &0x40:When set, prevents things like gaining wexp, leveling up or recieving support bonuses (Link Arena Flag Maybe?) &0x80:?
@GameData@04	short	VerticalCounter	(IOReg:04000006) state at the end of the last main loop iteration
@GameData@0C	word	Current Real Camera Pos?
@GameData@10	word	Unknown3
@GameData@14	word	Target Map Camera Pos?
@GameData@18	word	Unknown4
@GameData@1C	word	Another Real Camera Pos?
@GameData@20	word	ANOTHER Real Camera Pos.
@GameData@24	word	Some Real Camera *Offset* (Used When Setting Up Backgrounds)

////FE8U 0202BCB0	@GameData	GameData	{U}
////I do not know FE7



//\FEU\Stan\_notes\KeyStatus.txt
@KeyStatusBuffer@00	byte	FirstTickDelay
@KeyStatusBuffer@01	byte	NextTickDelay
@KeyStatusBuffer@02	byte	TickDownCounter	(decreased by one each frame, reset to FirstTickDelay when Presses change and NextTickDelay when reaches 0)
@KeyStatusBuffer@03	byte	unused 
@KeyStatusBuffer@04	short	Current
@KeyStatusBuffer@06	short	TickPresses	 1 For Press|Tick&Pressed, 0 Otherwise
@KeyStatusBuffer@08	short	NewPresses:  1 For Press, 0 Otherwise
@KeyStatusBuffer@0A	short	Previous
@KeyStatusBuffer@0C	short	LastPressState: Current, but set only if NewPresses is not null
@KeyStatusBuffer@0E	short	Release	1 for Release (A B L R Only), 0 Otherwise
@KeyStatusBuffer@10	short	Another NewPresses?
@KeyStatusBuffer@12	short	Time since last	Non-Start Non-Select Button was pressed

02024C78	@KeyStatusBuffer	KeyStatusBuffer	{U}
02024CC0	@KeyStatusBuffer	KeyStatusBuffer	{J}
08B857F8	KeyStatusBuffer Pointer	{U}
08BBFC7C	KeyStatusBuffer Pointer	{J}

08001ba0	UpdateKeyStatus	{J}
08001bc8	UpdateKeyStatus	{U}

//\FEU\Tequila\Teq Doq\Better Notes.txt
@MapSize@0	short	Width
@MapSize@2	short	Height
0202E3D8	@MapSize	MapSize	{U}
0202E3D4	@MapSize	MapSize	{J}


//Just before the attacker's battle struct is data used to display the pre-battle numbers and calculate the rounds data
@BattleStats@00	short	bitfield	(0x2='battle hasn't started yet', 0x20=arena, 0x80=Promotion)
@BattleStats@02	short	Type of animation?	No idea, really. -Appears to be range
@BattleStats@04	short	Damage	(Attack - defense)
@BattleStats@06	short	Attack
@BattleStats@08	short	Defense
@BattleStats@0A	short	Battle hit
@BattleStats@0C	short	Battle crit
@BattleStats@0E	short	Lethality chance
@BattleStats@10	&Unit	taUnitA
@BattleStats@14	&Unit	taUnitB

0203A3D8	@BattleStats	BattleStats	{U}	//maybe
0203A3D4	@BattleStats	BattleStats	{J}	//maybe



@BattleRound@00	byte	Option1	0x01=Critical 0x02=Miss 0x04=? 0x08=? 0x10=Brave 0x20=? 0x40=Poison 0x80=Devil
@BattleRound@01	byte	Option2	0x01=Steal HP 0x02=? 0x04=Triangle attack 0x08=Lethality 0x10=? 0x20=Petrified 0x40=Sure Shot 0x80=Great Shield
@BattleRound@02	byte	Option3	0x01=Pierce 0x02=? 0x04=? 0x08=End Battle 0x10=?
@BattleRound@03	byte	Damage


@ActionBattleStruct@06	byte	Apparently sometimes has the item id
@ActionBattleStruct@0C	byte	Current character's allegiance
@ActionBattleStruct@0D	byte	Target's allegiance	Target's allegiance byte (once selected)
@ActionBattleStruct@0E	byte	moved-to X	Current character's moved-to x coordinate
@ActionBattleStruct@0F	byte	moved-to Y	Current character's moved-to y coordinate
@ActionBattleStruct@10	byte	Squares moved this turn
@ActionBattleStruct@11	byte	Action taken this turn	0x01=Wait 0x02=Combat (Attack) 0x03=Staff 0x04=Dance/Play 0x05=Unused? 0x06=Steal 0x07=Summon 0x08=DK Summoning (I think) 0x09=Rescue 0x0A=Drop 0x0B=Take 0x0C=Give 0x0D=Unused? (I use this for auto-promotions) 0x0E=Talk 0x0F=Support 0x10=Visit 0x11=Seize 0x12=Door 0x13=Unused? 0x14=Chest 0x15=Pick 0x16=Unused? 0x17=Bought something from shop/armory/(presumably) secret shop 0x18=Unused? 0x19=Arena 0x1A=Use item 0x1B=Unused? (stored at 2D774) 0x1C=Unused? (stored at 9E3BA/9E8F2) 0x1D=Trade/Supply 0x1E=Wait due to finding an enemy in fog 0x1F=Backing out of an action, under certain circumstances 0x20=? 0x21=Ride (ballista) 0x22=Exit (ballista)
@ActionBattleStruct@12	Inventory slot number (0-4)

0203A85C	@ActionBattleStruct	ActionBattleStruct	{U}
0203A858	@ActionBattleStruct	ActionBattleStruct	{J}


@ChapterData@00	word	TurnStartClock
@ChapterData@04	word	ChapterStartClock
@ChapterData@08	word	所持金
@ChapterData@0C	byte	saveSlotIndex
@ChapterData@0D	byte	霧の濃さ (0なら霧なし)
@ChapterData@0E	byte	マップID
@ChapterData@0F	byte	フェイズ 0=自軍,0x40=友軍,0x80=敵軍
@ChapterData@10	short	ターン数
@ChapterData@12	byte	カーソル位置X (only when displaying a menu?)
@ChapterData@13	byte	カーソル位置Y (only when displaying a menu?)
@ChapterData@14	byte	Chapter Stuff	&01=Stat screen page 1 (Inventory) (0=stats) (these are set after backing out of the stat menu)	&02=Stat screen page 2 (Difficulty)	&10=Set when on prep screen	&20=Epilogue &40=Set for hard mode	&80=Don't gain weapon exp (not sure what this is for)
@ChapterData@15	byte	天気 (0=clear, 1=snow, 2=snowstorm, 4=rain) (funnily enough, if non-zero, arena battles take support bonuses into account)
@ChapterData@16	short	達成した支援数。 support Gain Total
@ChapterData@18	byte	playthroughId
@ChapterData@19	byte	_pad19
@ChapterData@1A	byte	lastUnitListSortType
@ChapterData@1B	byte	編指定 序盤=0x1,A編=0x2,F編=0x3
@ChapterData@1C	word	Weapon type lookup by weapon specifying which character ids may bypass the unusable bit?????
@ChapterData@20	byte	軍師名 tactician name(0x20-0x2B)
@ChapterData@2B	word	tactician name term 0x00
@ChapterData@2C	word	Unknown2C
@ChapterData@30	word	fundsTotalDifference
@ChapterData@34	word	Unknown34
@ChapterData@38	short	padding_38
@ChapterData@40	byte	CONFIGの設定 カーソル等	 &02=Terrain window (set=off, not set=on)  &04=Unit window (set=burst, not set=panel) &08=Unit window (set=off, not set=panel)  &10=Autocursor (set=off, not set=on)
 &20=Text speed (set=normal, not set=slow)  &40=Text speed (set=fast, not set=slow, set + 0x20 also set=max)  &80=Game speed (set=fast, not set=normal)
@ChapterData@41	byte	CONFIGの設定 効果音	&01=Music (set=off, not set=on) &02=Sound effects (set=off, not set=on) &04=Window color (set=orange, not set=blue) &08=Window color (set=green, not set=blue, set + 0x08 also set=black) &10=Something about displaying B/W/L on the stat screen &40=Autoend turns (set=off, not set=on) &80=Subtitle help (set=off, not set=on)
@ChapterData@42	byte	CONFIGの設定 アニメ設定 難易度	&01=Show objective (set=off, not set=on) &02=Combat animations off (if both 2 and 4 are set, combat animations are on with backgrounds on) &04=Combat animations solo (if both 2 and 4 are not set, combat animations are on with backgrounds off) &08=Combat info window (set=detail, not set=strat) &10=Combat info window (set=off, not set=strat)
@ChapterData@43	byte	Unknown43
@ChapterData@44	word	Unknown44
@ChapterData@48	short	Unknown48
@ChapterData@4A	short	Unknown4A
0202BBF8	@ChapterData	ChapterData	{U}
0202BBF4	@ChapterData	ChapterData	{J}

@CharacterBattleStatistic@00	byte	Losses
@CharacterBattleStatistic@01	short	Number of times a unit performs an action (seems to increase by 2) (non-aligned halfword)
@CharacterBattleStatistic@03	byte	Number of times selected (caps at 199)
@CharacterBattleStatistic@04	byte	Number of times viewed in stat screen (caps at 199)
@CharacterBattleStatistic@05	short	Lower 4 bits are the (most recent) chapter number they died on, upper 4 bits (along with byte 0x6) are the turn number they died on
@CharacterBattleStatistic@09	short	Top 4 bits, along with 0xA, is exp gained this chapter
@CharacterBattleStatistic@0B	byte	Along with bottom 2 bits of 0xC, wins
@CharacterBattleStatistic@0C	short	Bottom 2 bits are wins, top 6 bits, along with the bottom 6 bits of 0xD, are battles
@CharacterBattleStatistic@0E	byte	Character number of the most recent killer
@CharacterBattleStatistic@0F	byte	Unknown F

0203E790	@CharacterBattleStatistic@[46]	Unit	{U}
0203E768	@CharacterBattleStatistic@[46]	Unit	{J}


@ClearTurn@00	short	章IDとターン数	ターン数 << 7 + 章ID
@ClearTurn@02	short	クリアタイム秒数

0203EBD8	@ClearTurn@[30]	章クリアターン	{J}
0203EC00	@ClearTurn@[30]	章クリアターン	{U}


//@ITEMSTOCK@00	byte	アイテムID
//@ITEMSTOCK@01	byte	アイテム個数
//0203A46C	@ITEMSTOCK@[64]	輸送隊在庫	{J}
//0203A470	@ITEMSTOCK@[64]	輸送隊在庫	{U}

08012C60	GetStringFromIndex	Calls some functions in IRAM to copy text from the rom		r0=text id	{U}
08013318	GetStringFromIndex	Calls some functions in IRAM to copy text from the rom		r0=text id	{J}

//https://www.dropbox.com/sh/zymc1h221nnxpm9/AACrgal3LFRvbDKL-5qDxF3-a/Tequila/Teq%20Doq?dl=0&preview=Useful+functions.txt
08019CE0	Copies movement	cost entry (0x40 bytes long) from the rom to 3004BB0, for use in calculating which squares can be moved to.	r0=movement cost entry pointer	{U}
08018D0C	Get_Char_Data	Given the allegiance byte (0xB in unit data), returns the beginning of said data. Used for looping through units.	RET=RAM character data pointer	r0=allegiance byte	{U}
08017610	checks if character is riding a ballista and what the weather is	Usually called before calling 1A4CC, this function checks if character is riding a ballista and what the weather is.	movement cost table entry	r0=ram char data ptr	{U}
08018A70	Current_HP_Getter	RET=Gets current hp, adds equipped weapon bonus, checks to make sure current hp <= max hp.	Character's current hp	r0=ram char data ptr	{U}
08018AB0	Max_HP_Getter	RET=Character's max hp	r0=ram char data ptr	{U}
08018AD0	Str_Getter	RET=Character's strength	r0=ram char data ptr	{U}
08018AF0	Skl_Getter		RET=Character's skill	r0=ram char data ptr	{U}
08018B30	Spd_Getter		RET=Character's speed	r0=ram char data ptr	{U}
08018B70	Def_Getter	RET=Character's defense	r0=ram char data ptr	{U}
08018B90	Res_Getter	RET=Character's resistance	r0=ram char data ptr	{U}
08018BB8	Luk_Getter	RET=Character's luck	r0=ram char data ptr	{U}
08018450	Aid_Getter	RET=Character's aid	r0=ram char data ptr	{U}
08016764	Get_Equipped_Weapon	RET=equipped weapon id/uses halfword	r0=ram char data ptr	{U}
08017DE4	Write_Rescue_Data	Sets the appropriate bits in the turn words, writes allegiance bytes to 0x1B, and sets coordinates	r0=rescuer char data ptr, r1=rescuee char data ptr	{U}
080238C2	Compare_Allegiance_Func1	True if both units are of the same allegiance	r0=allegiance bytes (0xB of RAM char data ptr)	r1=same	{U}
080238AE	Compare_Allegiance_Func2	RET=True if both units are either both enemies or are both blue/green	r0=allegiance bytes (0xB of RAM char data ptr)	r1=same	{U}
08037914	AI_Compare_Allegiance_Func	Checks current unit's allegiance	RET=True if not on the same team	r0=allegiance byte of target	{U}
08018D20	Get_Class_Data	RET=Pointer to entry in class data table	r0=class number	{U}
0801725C	Get_Weapon_Type	RET=Item's weapon type	r0=item id	{U}
080315BC	Get_Chapter_Events	RET=Pointer to that chapter's events	r0=chapter number	{U}
08017D34	Find_Character	Useful for supports, I guess.	RET=Ram char data ptr	r0=character number (rom character, that is)	{U}

080175E6	Set_Character_Status	Orr's the status nibble with 0x50 (duration) and stores to char data+0x30 if nonzero; stores 0 otherwise	r0=ram char data ptr, r1=status id	{U}
08001084	Write_Palette	r0=pointer to palette	{U}
08034740	Add_Ballista_Data	r0=x	r1=y	r2=ballista item index	{U}
080176DA	Get_Open_Inventory_Space	RET=Slot of next open inventory space (0-4, 5 = full)	r0=char data ptr	{U}
0802E76E	Count_Items_In_Convoy	RET=Number of items in convoy	{U}
08023926	Add_Gold_To_Cashpile	r0=amount of gold	{U}
080174AC	Get_Item_Data	This function is (at least, in fe8) literally never used	RET=Pointer to item data	r0=item id/uses short	{U}
08017734	Create_Unit	Creates a unit with the given characteristics	RET=number of units made	r0=pointer to list of UNIT data	{U}
080167F4	Shuffle_Used_Item	r0=char data ptr	r1=invetory slot	{U}
080190AC	Fill_Map	Used for clearing maps (unit, range, movement, fog, etc). Also stores r0 to 30049A0	void	r0=map's row pointer table, r1=byte to fill with	{U}
08023874	Count_Faction_With_Criteria		RET=number of units in a faction that do NOT have any of those bits set	r0=faction bit (0 for player, 80 for enemy, 40 for npc), r1 = word to AND with the unit's turn status word (+0xC)	{U}
08016D0E	Unit_Has_Item		RET=inventory slot, or -1 if unit doesn't have said item	r0=char data ptr, r1=item id to search for	{U}



0801A0C0	Copies movement	cost entry (0x40 bytes long) from the rom to 3004BB0, for use in calculating which squares can be moved to.	r0=movement cost entry pointer	{J}
080190F4	Get_Char_Data	Given the allegiance byte (0xB in unit data), returns the beginning of said data. Used for looping through units.	RET=RAM character data pointer	r0=allegiance byte	{J}
08017A00	checks if character is riding a ballista and what the weather is	Usually called before calling 1A4CC, this function checks if character is riding a ballista and what the weather is.	movement cost table entry	r0=ram char data ptr	{J}
08018E60	Current_HP_Getter	RET=Gets current hp, adds equipped weapon bonus, checks to make sure current hp <= max hp.	Character's current hp	r0=ram char data ptr	{J}

08018EA0	Max_HP_Getter	RET=Character's max hp	r0=ram char data ptr	{J}
08018EC0	Str_Getter	RET=Character's strength	r0=ram char data ptr	{J}
08018EE0	Skl_Getter		RET=Character's skill	r0=ram char data ptr	{J}
08018F20	Spd_Getter		RET=Character's speed	r0=ram char data ptr	{J}
08018F60	Def_Getter	RET=Character's defense	r0=ram char data ptr	{J}
08018F80	Res_Getter	RET=Character's resistance	r0=ram char data ptr	{J}
08018FA8	Luk_Getter	RET=Character's luck	r0=ram char data ptr	{J}
08018840	Aid_Getter	RET=Character's aid	r0=ram char data ptr	{J}
08016BC4	Get_Equipped_Weapon	RET=equipped weapon id/uses halfword	r0=ram char data ptr	{J}
080181D4	Write_Rescue_Data	Sets the appropriate bits in the turn words, writes allegiance bytes to 0x1B, and sets coordinates	r0=rescuer char data ptr, r1=rescuee char data ptr	{J}
08023D4E	Compare_Allegiance_Func1	True if both units are of the same allegiance	r0=allegiance bytes (0xB of RAM char data ptr)	r1=same	{J}
08023D3A	Compare_Allegiance_Func2	RET=True if both units are either both enemies or are both blue/green	r0=allegiance bytes (0xB of RAM char data ptr)	r1=same	{J}
08037DC8	AI_Compare_Allegiance_Func	Checks current unit's allegiance	RET=True if not on the same team	r0=allegiance byte of target	{J}
08018D20	Get_Class_Data	RET=Pointer to entry in class data table	r0=class number	{J}
08017664	Get_Weapon_Type	RET=Item's weapon type	r0=item id	{J}
08018124	Find_Character	Useful for supports, I guess.	RET=Ram char data ptr	r0=character number (rom character, that is)	{J}

080179D6	Set_Character_Status	Orr's the status nibble with 0x50 (duration) and stores to char data+0x30 if nonzero; stores 0 otherwise	r0=ram char data ptr, r1=status id	{J}
0800105C	Write_Palette	r0=pointer to palette	{J}
08034C18	Add_Ballista_Data	r0=x	r1=y	r2=ballista item index	{J}
08017ACA	Get_Open_Inventory_Space	RET=Slot of next open inventory space (0-4, 5 = full)	r0=char data ptr	{J}
0802EC3A	Count_Items_In_Convoy	RET=Number of items in convoy	{J}
08023DB2	Add_Gold_To_Cashpile	r0=amount of gold	{J}
080174AC	Get_Item_Data	This function is (at least, in fe8) literally never used	RET=Pointer to item data	r0=item id/uses short	{J}

08017B24	Create_Unit	Creates a unit with the given characteristics	RET=number of units made	r0=pointer to list of UNIT data	{J}
08016C54	Shuffle_Used_Item	r0=char data ptr	r1=invetory slot	{J}
08019494	Fill_Map	Used for clearing maps (unit, range, movement, fog, etc). Also stores r0 to 30049A0	void	r0=map's row pointer table, r1=byte to fill with	{J}
08023D00	Count_Faction_With_Criteria		RET=number of units in a faction that do NOT have any of those bits set	r0=faction bit (0 for player, 80 for enemy, 40 for npc), r1 = word to AND with the unit's turn status word (+0xC)	{J}
08017162	Unit_Has_Item		RET=inventory slot, or -1 if unit doesn't have said item	r0=char data ptr, r1=item id to search for	{J}

08BDCE18	UnitsID:0	{U}
08C4C124	UnitsID:0	{J}




//from https://doc.feuniverse.us/static/stan/GraphicsBuffersEtc.txt
@IORegisters@00	short	To 04000000 (DISPCNT / LCD Control)
@IORegisters@04	short	To 04000004 (DISPSTAT/ General LCD Status)
@IORegisters@0C	short	To 04000008 (BG0CNT / BG0 Control)
@IORegisters@10	short	To 0400000A (BG1CNT / BG1 Control)
@IORegisters@14	short	To 0400000C (BG2CNT / BG2 Control)
@IORegisters@18	short	To 0400000E (BG3CNT / BG3 Control)
@IORegisters@1C	vec2*	To 04000010 (BG0HOFS / BG0 X-Offset; BG0VOFS  / BG0 Y-Offset)
@IORegisters@20	vec2 	To 04000014 (BG1HOFS / BG1 X-Offset; BG1VOFS  / BG1 Y-Offset)
@IORegisters@24	vec2 	To 04000018 (BG2HOFS / BG2 X-Offset; BG2VOFS  / BG2 Y-Offset)
@IORegisters@28	vec2 	To 0400001C (BG3HOFS / BG3 X-Offset; BG3VOFS  / BG3 Y-Offset)
@IORegisters@2C	short	To 04000040 (WIN0H / Window 0 Horizontal Dimensions)
@IORegisters@2E	short	To 04000042 (WIN1H / Window 1 Horizontal Dimensions)
@IORegisters@30	short	To 04000044 (WIN0V / Window 0 Vertical Dimensions)
@IORegisters@32	short	To 04000046 (WIN1V / Window 1 Vertical Dimensions)
@IORegisters@34	short	To 04000048 (WININ / Inside of Window 0 and 1)
@IORegisters@36	short	To 0400004A (WINOUT / Inside of OBJ Window & Outside of Windows)
@IORegisters@38	short	To 0400004C (MOSAIC / Mosaic Size)
@IORegisters@3C	short	To 04000050 (BLDCNT / Color Special Effects Selection)
@IORegisters@44	short	To 04000052 (BLDALPHA / Alpha Blending Coefficients)
@IORegisters@46	short	To 04000054 (BLDY / Brightness (Fade-In/Out) Coefficient)
@IORegisters@48	short	To 04000020 (BG2PA / BG2 Rotation/Scaling Parameter A (dx))
@IORegisters@4A	short	To 04000022 (BG2PB / BG2 Rotation/Scaling Parameter B (dmx))
@IORegisters@4C	short	To 04000024 (BG2PC / BG2 Rotation/Scaling Parameter C (dy))
@IORegisters@4E	short	To 04000026 (BG2PD / BG2 Rotation/Scaling Parameter D (dmy))
@IORegisters@50	word 	To 04000028 (BG2X / BG2 Reference Point X-Coordinate)
@IORegisters@54	word 	To 0400002C (BG2Y / BG2 Reference Point Y-Coordinate)
@IORegisters@58	short	To 04000030 (BG3PA / BG3 Rotation/Scaling Parameter A (dx))
@IORegisters@5A	short	To 04000032 (BG3PB / BG3 Rotation/Scaling Parameter B (dmx))
@IORegisters@5C	short	To 04000034 (BG3PC / BG3 Rotation/Scaling Parameter C (dy))
@IORegisters@5E	short	To 04000036 (BG3PD / BG3 Rotation/Scaling Parameter D (dmy))
@IORegisters@60	word 	To 04000038 (BG3X / BG3 Reference Point X-Coordinate)
@IORegisters@64	word 	To 0400003C (BG3Y / BG3 Reference Point Y-Coordinate)

03002870	@IORegisters	IORegisters	{U}
03002790	@IORegisters	IORegisters	{J}

02022C60	BG0 Map Buffer	{U}
02022C60	BG0 Map Buffer	{J}
02023460	BG1 Map Buffer	{U}
02023460	BG1 Map Buffer	{J}
02023C60	BG2 Map Buffer	{U}
02023C60	BG2 Map Buffer	{J}
02024460	BG3 Map Buffer	{U}
02024460	BG3 Map Buffer	{J}

@TileRegistry@00	word	source pointer / fill value
@TileRegistry@04	word	destination (VRAM) pointer
@TileRegistry@08	short	size of graphics (bytes)
@TileRegistry@0A	short	mode?	is 0 when size isn't a multiple of 0x20, is 2 for fill (not copy)
0201D41C	@TileRegistry@[20]	TileRegistries	{U}	//maybe
0201D41C	@TileRegistry@[20]	TileRegistries	{J}	//maybe

02022860	palette buffer	{U}
02022860	palette buffer	{J}

@IntermediateOAMEntry@00	word	Next Entry	(yes this is linked list)
@IntermediateOAMEntry@04	short	base x coordinate
@IntermediateOAMEntry@06	short	base y coordinate
@IntermediateOAMEntry@08	short	base OAM2 data	(tile index & palette index)
@IntermediateOAMEntry@0C	word	pointer to ROM OAM Data	(see above, "Object Attributes (raw buffers)" section)
02029C8C	@IntermediateOAMEntry@[40]	oam	{U}
02029C80	@IntermediateOAMEntry@[40]	oam	{J}
0202A48C	@IntermediateOAMEntry@[F]	oam root node	{U}
0202A480	@IntermediateOAMEntry@[F]	oam root node	{J}

//DEBUG STUFF NOTES.txt
0801B924	Debug Startup routine	the following EA code will replace the standard one	{U}
0801BCD4	Debug Startup routine	the following EA code will replace the standard one	{J}

//BWLEntry.txt
080A003C	BWL_AddTilesMoved	r0=Char Id	r1=Tiles moved	{U}
080A0A08	BWL_AddTilesMoved	r0=Char Id	r1=Tiles moved	{J}
080A0248	BWL_AddFavoritismValue	r0=Char Id	r1=Value	{U}
080A0C14	BWL_AddFavoritismValue	r0=Char Id	r1=Value	{J}

//6CNotes.txt
@6CStructHeader@00	word	Pointer to start of code	(I used to misrefer this as "struct type")
@6CStructHeader@04	word	Pointer to code cursor
@6CStructHeader@08	word	Pointer to Destructor routine	(called when struct is destroyed)
@6CStructHeader@0C	word	Pointer to Loop Routine	(this is called instead of code when it is not null)
@6CStructHeader@10	word	Pointer to name	(Probably for debug purpose. Still set in FE8. /!\ Never cleared)
@6CStructHeader@14	word	Pointer to Parent 6C	(If Struct is Main 6C, Main 6C Array Index instead)
@6CStructHeader@18	word	Pointer to First Child Struct (0 if none)
@6CStructHeader@1C	word	Pointer to Previous Struct (0 if first)
@6CStructHeader@20	word	Pointer to Next Struct (0 if last)
@6CStructHeader@24	short	Sleep Timer	(each call to the sleep loop decrements it, the sleep loop will clear itself when this reaches 0)
@6CStructHeader@26	byte	Mark	(Code 000F stores sarg to this byte, used by various routines)
@6CStructHeader@27	byte	Some kind of bitfield	(see below for known bits)
@6CStructHeader@28	byte	Block Counter (Won't exec self if not 0)
@6CStructHeader@2C	word	userspace0
@6CStructHeader@30	word	userspace1
@6CStructHeader@34	word	userspace2
@6CStructHeader@38	word	userspace3
@6CStructHeader@3C	word	userspace4
@6CStructHeader@40	word	userspace5
@6CStructHeader@44	word	userspace6
@6CStructHeader@48	word	userspace7
@6CStructHeader@4C	word	userspace8
@6CStructHeader@50	word	userspace9
@6CStructHeader@54	word	userspace10
@6CStructHeader@58	word	userspace11
@6CStructHeader@5C	word	userspace12
@6CStructHeader@60	word	userspace13
@6CStructHeader@64	word	userspace14
@6CStructHeader@68	word	userspace15

08004690	Exec6C Routine Locations	Arguments: r0 = Struct Pointer; Returns: nothing	{U}
0800456C	Exec6C Routine Locations	Arguments: r0 = Struct Pointer; Returns: nothing	{J}
08004510	Exec6C Routine Locations(wraps)	{J}

08004A60	Run6CCode Routine Locations	r0=Struct Pointer; Returns: nothing	{J}

0801529C	a main update routine 6C Exec Order	{U}


@6CPointer@0	word	pointer


02024E28	@6CStructHeader@[40]	ProcAllocList	{U}
02024E20	@6CStructHeader@[40]	ProcAllocList	{J}
02026928	@6CPointer@[40]	ProcAllocListHead	{U}
02026920	@6CPointer@[40]	ProcAllocListHead	{J}
02026A2C	ProcAllocListHead	{U}
02026A24	ProcAllocListHead	{J}
02026A30	@6CPointer@[8]	ProcTreeRootArray	{U}
02026A28	@6CPointer@[8]	ProcTreeRootArray	{J}

08004420	Initialize6CEngine	{U}
080042FC	Initialize6CEngine	{J}
08004494	New6C	{U}
08004370	New6C	{J}
080044F8	NewBlocking6C	{U}
080043D4	NewBlocking6C	{J}
08004528	Delete6CInternal	{U}
08004404	Delete6CInternal	{J}

08004584	Delete6C	{U}
08004460	Delete6C	{J}
0800459C	Allocate6C	{U}
08004478	Allocate6C	{J}
080045AC	Free6C	{U}
08004488	Free6C	{J}
080045BC	InsertMain6C	{U}
08004498	InsertMain6C	{J}
080045DC	InsertChild6C	{U}
080044B8	InsertChild6C	{J}
080045F0	Isolate6C	{U}
080044CC	Isolate6C	{J}
08004690	Exec6C (Wrapper)	{U}
0800456C	Exec6C (Wrapper)	{J}
08004634	Exec6C_	{U}
08004510	Exec6C_	{J}
080046A0	Break6CLoop	{U}
0800457C	Break6CLoop	{J}
080046A8	Find6C	{U}
08004584	Find6C	{J}
080046C8	Find6CRunning	{U}
080045A4	Find6CRunning	{J}
080046F4	Find6CByMark	{U}
080045D0	Find6CByMark	{J}
08004720	Goto6CLabel	{U}
080045FC	Goto6CLabel	{J}
08004758	Goto6CPointer	{U}
08004634	Goto6CPointer	{J}
08004760	Set6CMark	{U}
0800463C	Set6CMark	{J}
08004768	Set6CDestructor	{U}
08004644	Set6CDestructor	{J}
0800476C	ForAll6C	{U}
08004648	ForAll6C	{J}
08004794	ForEach6C	{U}
08004670	ForEach6C	{J}
080047BC	ForEach6CMarked	{U}
08005E04	ForEach6CMarked	{J}
080047E8	BlockEach6CMarked	{U}
080046C4	BlockEach6CMarked	{J}
0800480C	UnblockEach6CMarked	{U}
080046E8	UnblockEach6CMarked	{J}
08004834	DeleteEach6CMarked	{U}
08004710	DeleteEach6CMarked	{J}
08004860	Delete6C (Wrapper)	{U}
0800473C	Delete6C (Wrapper)	{J}
0800486C	DeleteEach6C	{U}
08004748	DeleteEach6C	{J}
0800487C	Clear6CLoopWrapper	{U}
08004758	Clear6CLoopWrapper	{J}
08004888	ClearEach6CLoop	{U}
08004764	ClearEach6CLoop	{J}
08004898	ForAll6CFollowing	{U}
08004774	ForAll6CFollowing	{J}


//https://doc.feuniverse.us/static/stan/HiddenMapFlags.txt
0202E3F0	maps to each tile a set of flags	&0x01 <=> A unit is hidden here	&0x02 <=> A trap is hidden here?	{U}
0202E3EC	maps to each tile a set of flags	&0x01 <=> A unit is hidden here	&0x02 <=> A trap is hidden here?	{J}

//https://doc.feuniverse.us/static/stan/HardcodedChecks.txt
080288D6	Item checks for Magic Swords	{U}
08028D52	Item checks for Magic Swords	{J}
080167C6	IsItemCoveringRange	Item Table is read directly for range	{U}
08016C26	IsItemCoveringRange	Item Table is read directly for range	{J}

0802D74C	マップタイルアニメーションの読込	{J}
0802D28C	マップタイルアニメーションの読込	{U}
0802D794	マップタイルアニメーション2の読込(パレットアニメ)		{J}
0802D2D4	マップタイルアニメーション2の読込(パレットアニメ)		{U}

0203E070	戦闘アニメで攻撃側へのRAMポインタ(0203A3ECへ)	{J}
0203E098	戦闘アニメで攻撃側へのRAMポインタ(0203A3F0へ)	{U}
0203E06C	戦闘アニメで防御側へのRAMポインタ(0203A46Cへ)	{J}
0203E094	戦闘アニメで防御側へのRAMポインタ(0203A470へ)	{U}

@BattleUnit@00	@Unit	CopyUnit
@BattleUnit@48	short	weapon
@BattleUnit@4A	short	weaponBefore
@BattleUnit@4C	word	weaponAttributes
@BattleUnit@50	byte	weaponType
@BattleUnit@51	byte	weaponSlotIndex
@BattleUnit@52	byte	canCounter
@BattleUnit@53	byte	wTriangleHitBonus
@BattleUnit@54	byte	wTriangleDmgBonus
@BattleUnit@55	byte	terrainId
@BattleUnit@56	byte	terrainDefense
@BattleUnit@57	byte	terrainAvoid
@BattleUnit@58	byte	terrainResistance
@BattleUnit@59	byte	pad59
@BattleUnit@5a	short	battleAttack
@BattleUnit@5c	short	battleDefense
@BattleUnit@5e	short	battleSpeed
@BattleUnit@60	short	battleHitRate
@BattleUnit@62	short	battleAvoidRate
@BattleUnit@64	short	battleEffectiveHitRate
@BattleUnit@66	short	battleCritRate
@BattleUnit@68	short	battleDodgeRate
@BattleUnit@6a	short	battleEffectiveCritRate
@BattleUnit@6c	short	battleSilencerRate
@BattleUnit@6e	byte	expGain
@BattleUnit@6f	byte	statusOut
@BattleUnit@70	byte	levelPrevious
@BattleUnit@71	byte	expPrevious
@BattleUnit@72	byte	hpInitial
@BattleUnit@73	byte	changeHP
@BattleUnit@74	byte	changePow
@BattleUnit@75	byte	changeSkl
@BattleUnit@76	byte	changeSpd
@BattleUnit@77	byte	changeDef
@BattleUnit@78	byte	changeRes
@BattleUnit@79	byte	changeLck
@BattleUnit@7a	byte	changeCon
@BattleUnit@7b	byte	wexpMultiplier
@BattleUnit@7c	byte	nonZeroDamage
@BattleUnit@7d	byte	weaponBroke
@BattleUnit@7e	byte	hasItemEffectTarget
@BattleUnit@7f	byte	pad7f

0203A3EC	@BattleUnit	gBattleActor	戦闘アニメで右側。	{J}
0203A3F0	@BattleUnit	gBattleActor	戦闘アニメで右側。	{U}
0203A46C	@BattleUnit	gBattleTarget	戦闘アニメで左側。	{J}
0203A470	@BattleUnit	gBattleTarget	戦闘アニメで左側。	{U}


08080A94	Stat Screens DrawBar	{J}
0807FD28	Stat Screens DrawBar	{U}
08004D04	Stat Screens DrawIcon	{J}
08018CF0	Stat Screens WriteStatusText	{U}
08005B18	Stat Screens AppendText	{U}
08016BC4	Stat Screens EquippedWeaponGetter	{J}
08016764	Stat Screens EquippedWeaponGetter	{U}
080810A8	Stat Screens DrawWeaponRank	{J}
08080360	Stat Screens DrawWeaponRank	{U}
08080FB8	Stat Screens DrawSupports	{J}
08080270	Stat Screens DrawSupports	{U}
0200310C	Stat Screens StatScreenStruct	{J}
0200310C	Stat Screens StatScreenStruct	{U}

08063014	戦闘アニメスクリプト C26(盾を投げる)/C27(剣を投げる)コマンドの判定	{J}
0806CC94	戦闘アニメスクリプト C26(盾を投げる)/C27(剣を投げる)コマンドの判定	{U}

08050bf8	PrepAIS	タイルの特殊移動 C26/C27とかから呼ばれる	r0=ParentProcs	r1=FrameDataMeleeLeft	r2=FrameDataMeleeRight	r3=FrameDataRangedLeft	[sp+0]=FrameDataRangedRight	{J}
0805041C	PrepAIS	タイルの特殊移動 C26/C27とかから呼ばれる	r0=ParentProcs	r1=FrameDataMeleeLeft	r2=FrameDataMeleeRight	r3=FrameDataRangedLeft	[sp+0]=FrameDataRangedRight	{U}


08029040	回避率 計算式	{J}
08028BA0	回避率 計算式	{U}

08006488	AISArray_Sort	戦闘アニメーションのフレームデータのパース	{J}
080065F8	AISArray_Sort	戦闘アニメーションのフレームデータのパース	{U}

0804A040	ClearBG0BG1	{U}
0804A210	LoadNewUIGraphics	{U}
0804A828	ClearBG0BG1	{J}
0804A9F8	LoadNewUIGraphics	{J}

080BF0F0	効果音再生(ボツ効果音再生を追跡時に発見)	{J}
080BE5AC	効果音再生(ボツ効果音再生を追跡時に発見)	{U}

08016470	店での販売アイテム欄の描画	{U}
080168EC	店での販売アイテム欄の描画	{J}

0802c190	指定したマップ変化のアドレスの取得	r0=Map Change Id	{J}
0802bcd0	指定したマップ変化のアドレスの取得	r0=Map Change Id	{U}

080ABD24	サウンドルームの曲を一覧表示を表示する	{J}
080AAE40	サウンドルームの曲を一覧表示を表示する	{U}

08053320	武器の間接エフェクトのアニメーションを取得	{J}
08052B08	武器の間接エフェクトのアニメーションを取得	{U}

080858D8	BADステータスの状態を表示するルーチン StatusTextWriter	{J}
080864DC	数字やHP 毒などのよく使われるステータス画像を読みこむ	{J}
08084EDC	BADステータスの状態を表示するルーチン StatusTextWriter	{U}
08085ADC	数字やHP 毒などのよく使われるステータス画像を読みこむ	{U}

080C0544	_malloc_unlock_14	{J}
080BFA00	_malloc_unlock_14	{U}
080C0178	_sbprintf	{U}
080C1160	cvt	{U}
080C1254	exponent	{U}
080C2334	_cleanup_r	{U}
080C2344	_cleanup	{U}
080C28DC	_localeconv_r	{U}
080C28E4	setlocale	{U}
080C28FC	localeconv	{U}



//Zane's Stuff\Doc\Master MMB Doc.txt
02024C60	an array of 4 pointers (one for each BG) that contain where in VRAM will the BG Maps be written to.	{J}
080861DC	MMBSetup	This is the main routine for setting up the minimug box. It determines where to put the box and the things on it.	{J}
0202BBB4	MiscRAMData	This section of memory has information on cursor position,  phases, chapter number, gold, and a bunch of other things	{J}
0202E3D8	BaseRowPointer	This is part of a system for getting elements on the map.  It begins with two shorts that go 0xXX 0xXX 0xYY 0xYY  followed by a pointer to the first 'row pointer'. The .set value above is this pointer to the first row pointer. I think an example would demonstrate better.	{J}
08D8B134	Table of bytes, either 0x00, 0x01, or 0xFF for determining the position of windows such as the  minimug box, goal window, or terrain window	{J}
08D8B1A0	MMBStructType	This is the type of 0x6C struct used when drawing the box.	{J}
08C0216C	RAMSlotTable	This is a table of pointers, with one for every deployment slot in RAM	{J}
0808512C	WindowPosCheck	This returns 0-3 based on cursor position. Uses the same misc. RAM data. This function is used by all window elements. here (goal, terrain, minimug), so don't edit it.	{J}
0808510E	WindowType	'Type' is inaccurate, it's still position but for label purposes I'm calling it type This routine returns 0-3 depending. on whether r0 and r1 are negative, positive, or zero, from the box control table. Used when determining where to draw terrain, goal, and minimug windows.	{J}
08085B0C	MMBBuilder	This is the routine that handles parts on the box, such as the unit's name and minimug along with the tilemap for the box itself.	{J}
0200323C		gBG0TilemapBuffer	This is the BG buffer dedicated to window  tilemaps, such as the tilemaps for the terrain window, goal window, and minimug box	{J}
0200373C	MMBTilemapRAMBuffer	This is where the box's tilemap is written to to accomplish the scrolling effect	{J}
081C9F2C	MMBTilemap	This is where the rilemap for the minimug box is.	{J}
0202A5B0	TextBufferOffset	This is the buffer text is written to.	{J}
03005A70	WRAMRoutinePointer	{J}
08005564	TexCenterer	his routine takes a given amount of space nd tries to center a given text string n that space.	RET=r0  distance in pixels to center by	r0=Space in pixels available	r1=Text string, usually text buffer	{J}
02028D68	CurrentFont	TextParams	{J}
080053B0	TextVRAMClearer	This function gets a space in VRAM and prepares it for the new text to be written to.	{J}
08005774	DefaultTextDraw	This is the default drawing routine There's a pointer to it at 2028E60	{J}
08005764	TextPalSelecter	{J}
080C0430	WRAMRoutineGetter	This routine grabs and branches to a routine written in WRAM. This one draws text.	{J}
08000540	CharSizeTable	{J}
0801BD56	MinimugGetter	Determines a unit's minimug	{J}
08006E10	CreateMinimug	This routine draws the minimug to VRAM and writes its tilemap	{J}
08BFF9E0	MMSizeTable	{J}
08006DAC	MinimugWriter	{J}
080069B0	GetPortraitStructPointer	{J}
08006D1C	TilemapWriter	Writes a tilemap	r0=destination	r1=tile table	r2=base tile	r3=flag for flipping	{J}
08BFF760	:08BFF96F	OAMTable	This is a table of size/shape	data and number of sprites to draw	{J}
08016620	EquippableCheck:	returns 0 or 1 if a unit can equip and use an item checks for silenced units	{J}
080175CA	UnusableItem	For when an item has ability 2, unusable set	{J}
080164BA	StatBonusGetter	Gets the stat bonus pointer of an item returns 0 if none	{J}
08004F20	NumBufferWriter	{J}
08018EA0	AnotherHPBonus	Another getter for bonus hp added to max	{J}
0808516E	HPBarLeftEnd	{J}
08085188	HPBarMiddle	{J}
080851C4	HPBarRightEnd	{J}
0800043C	TilemapWriter	This is an ARM routine. that draws a tilemap. For some reason, this isn't run from RAM	r0=destination	r1=tilemap	r2=base tile	{J}
08085824	MMBPalSelect	Routine selects a palette and  writes it based on the unit's allegiance after ANDing the unit's number with 0xF0 you'll get 0x00, 0x40, 0x80 which are ally, npc, and enemy, respectively	{J}

08025B54	ChapterMapSpritePal	Map sprite palette routine Called to determine map sprite palettes  in chapter maps. World map uses a  different routine. Called whenever a map sprite changes state, i.e. moving, being selected. Used every frame in unit menu	RET=r0 0x0B-0x0F 0x0B is light rune 0x0C is blue 0x0D is red 0x0E is green 0x0F is gray	r0=character in ram	{J}

08025BB0	MSUnk1Start	The following routine comes directly after, andmore research is needed on it. It's called when a sprite is updated. i.e. moving or something	{J}
0203A3C8	UnkEntryPtr	{J}
02039F18	UnkOAMTablePtr	{J}

02002774	When in the item menu	{J}
0203E678	HelpTextHandles	{J}
030000E8	When dialogue is displayed	{J}
02000044	Main Menu	{J}
020040D4	Status screen	{J}
02012B50	Supply	{J}
02017648	In battles	{J}
0203DA48	Link Arena	{J}
02000C60	Link Arena point assignment	{J}
0201EA50	Sound Room	{J}
0203E6CC	Tutorial Text	{J}
02028D50	World Map menu	{J}

0804203A	Cleared Japanese menu loading routine	{J}
083BE180	:083BEE94	Cleared beta class list	{J}
083BEE00	:083BF4F4	Cleared FE6 credits	{J}





02024C60	an array of 4 pointers (one for each BG) that contain where in VRAM will the BG Maps be written to.	{U}
080857DC	MMBSetup	This is the main routine for setting up the minimug box. It determines where to put the box and the things on it.	{U}
0202BBB8	MiscRAMData	This section of memory has information on cursor position,  phases, chapter number, gold, and a bunch of other things	{U}
0202E3DC	BaseRowPointer	This is part of a system for getting elements on the map.  It begins with two shorts that go 0xXX 0xXX 0xYY 0xYY  followed by a pointer to the first 'row pointer'. The .set value above is this pointer to the first row pointer. I think an example would demonstrate better.	{U}
08CC2B94	Table of bytes, either 0x00, 0x01, or 0xFF for determining the position of windows such as the  minimug box, goal window, or terrain window	{U}
08CC2C00	MMBStructType	This is the type of 0x6C struct used when drawing the box.	{U}
08B92EB0	RAMSlotTable	This is a table of pointers, with one for every deployment slot in RAM	{U}
08084730	WindowPosCheck	This returns 0-3 based on cursor position. Uses the same misc. RAM data. This function is used by all window elements. here (goal, terrain, minimug), so don't edit it.	{U}
08084712	WindowType	'Type' is inaccurate, it's still position but for label purposes I'm calling it type This routine returns 0-3 depending. on whether r0 and r1 are negative, positive, or zero, from the box control table. Used when determining where to draw terrain, goal, and minimug windows.	{U}
08085110	MMBBuilder	This is the routine that handles parts on the box, such as the unit's name and minimug along with the tilemap for the box itself.	{U}
0200323C		gBG0TilemapBuffer	This is the BG buffer dedicated to window  tilemaps, such as the tilemaps for the terrain window, goal window, and minimug box	{U}
0200373C	MMBTilemapRAMBuffer	This is where the box's tilemap is written to to accomplish the scrolling effect	{U}
0202A5B4	TextBufferOffset	This is the buffer text is written to.	{U}
03005B50	WRAMRoutinePointer	{U}
02028D70	CurrentFont	TextParams	{U}
08000540	CharSizeTable	{U}
0801B9A6	MinimugGetter	Determines a unit's minimug	{U}
08B90830	MMSizeTable	{U}
08B905B0	:08B907BF	OAMTable	This is a table of size/shape	data and number of sprites to draw	{U}
080161A4	EquippableCheck:	returns 0 or 1 if a unit can equip and use an item checks for silenced units	{U}
08017176	UnusableItem	For when an item has ability 2, unusable set	{U}
0801603E	StatBonusGetter	Gets the stat bonus pointer of an item returns 0 if none	{U}
08018AB0	AnotherHPBonus	Another getter for bonus hp added to max	{U}
02022C60	OAMBufferEnd	{U}
08084772	HPBarLeftEnd	{U}
0808478C	HPBarMiddle	{U}
080847C8	HPBarRightEnd	{U}
0800043C	TilemapWriter	This is an ARM routine. that draws a tilemap. For some reason, this isn't run from RAM	r0=destination	r1=tilemap	r2=base tile	{U}
08084E28	MMBPalSelect	Routine selects a palette and  writes it based on the unit's allegiance after ANDing the unit's number with 0xF0 you'll get 0x00, 0x40, 0x80 which are ally, npc, and enemy, respectively	{U}

080256C8	ChapterMapSpritePal	Map sprite palette routine Called to determine map sprite palettes  in chapter maps. World map uses a  different routine. Called whenever a map sprite changes state, i.e. moving, being selected. Used every frame in unit menu	RET=r0 0x0B-0x0F 0x0B is light rune 0x0C is blue 0x0D is red 0x0E is green 0x0F is gray	r0=character in ram	{U}

08025724	MSUnk1Start	The following routine comes directly after, andmore research is needed on it. It's called when a sprite is updated. i.e. moving or something	{U}
0203A3CC	UnkEntryPtr	{U}
02039F1C	UnkOAMTablePtr	{U}

02002774	When in the item menu	{U}
0203E6A0	HelpTextHandles	{U}
030000E8	When dialogue is displayed	{U}
02000044	Main Menu	{U}
020040D4	Status screen	{U}
02012B50	Supply	{U}
02017648	In battles	{U}
0203DA60	Link Arena	{U}
02000C60	Link Arena point assignment	{U}
0201EA50	Sound Room	{U}
0203E6F4	Tutorial Text	{U}
02028D58	World Map menu	{U}


083B7E08	:083B8B1C	Cleared beta class list	{U}
081D2700	:081D2B3C	Cleared Japanese text image	{U}
084120A0	:084137FC	Cleared Japanese text image	{U}

080003A8	ARM_FillRect	arm_func	{U}
080005FC	IRAMARM_Func3_DrawGlyph	arm_func	{U}
080016F6	FlushBackgrounds	{U}
08002FE4	Call6C_02CallAndContinue	{U}
08002DFE	Call6C_0ESleep	{U}
08005708	String_GetEnd	{U}
08005718	Text_AppendString	{U}
08005814	Text_AppendChar	{U}
08005900	Font_SpecializedGlyphDrawer	{U}
08005B18	Text_InsertString	{U}
08005B18	Text_InsertNumberOr2Dashes	{U}
08005B60	Text_AppendStringSimple	{U}
08005C00	GetStringTextWidthSimple	{U}
0800ADD0	Null6CCallback	{U}
0800BE98	SetSomeRealCamPos	{U}
0800D186	HideAllUnits	{U}
0800D86E	ShouldUNITBeLoaded	{U}
080119F8	NewGoldGotPopup	{U}
080130DA	CopyString	{U}
080130F4	CopyDirect	{U}
08013168	UnLZ77Decompress	{U}
080131A8	FilterR0ForRawCopy	{U}
0801320C	RegisterObjectTileGraphics	{U}
08013238	CopyTileGfxForObj	{U}
08013688	GetPaletteBufferBuffer	{U}
0801362C	SetSomethingInPaletteBB_2A	{U}
0801363C	SetSomethingInPaletteBB_5A	{U}
08013650	SetSomethingInPaletteBB_8A	{U}
08013664	GetSomethingInPaletteBB_2A	{U}
08013670	GetSomethingInPaletteBB_5A	{U}
0801369C	GetSomethingInPaletteBB_8A	{U}
080136AC	ArchiveCurrentPalettes	{U}
080136F8	ArchivePalette	{U}
08013728	WriteFadedPaletteFromArchive	{U}
08014298	ContinueUntilSomeTransistion6CExists	{U}
08014494	NewBlockingTimer	{U}
080144B0	Timer6C_Countdown	{U}
08014590	String_FromNumber	{U}
080146DC	DeleteAllPaletteAnimator	{U}
080146EC	NewPaletteAnimator	{U}
08014740	NewPaletteAnimator_	{U}
08014AE8	FutureCall2_Loop	{U}
08014B0C	FutureCall_Loop	{U}
08014B34	SetupFutureCall2	{U}
08014B50	SetupFutureCall	{U}
08014D58	RerangeSomething	{U}
08014D80	PlaySpacialSoundMaybe	{U}
0801524C	GeneralVBlankHandler	{U}
0801529C	SomeUpdateRoutine	{U}
08015328	GetThread2SkipStack	{U}
08015334	SwitchPhases	{U}
080153E0	MakePhaseController6C	{U}
08015434	NewPlayerPhase6C	{U}
08015484	E_BMAPMAIN_SuspendGame	{U}
0801551A	SetupBackgroundForWeatherMaybe	{U}
08015590	LoadObjUIGfx	{U}
080155CC	LoadGameCoreGfx	{U}
080155EC	HandleCursorMovement	{U}
08015714	MoveCameraByStepMaybe	{U}
08015894	GetSomeAdjustedCameraX	{U}
080158D8	GetSomeAdjustedCameraY	{U}
0801596C	DisplayCursor	{U}
08015A90	SetCursorMapPosition	{U}
08015AF0	Init6C_GENS	{U}
08015B84	Loop6C_GENS	{U}
08015C04	StoreAdjustedCameraPositions	{U}
08015CE0	EnsureCameraOntoPosition	{U}
08015D70	ShouldMoveCameraPosSomething	{U}
08015E9C	GetCurrentMapMusicIndex	{U}
08016040	GetItemPowBonus	{U}
0801606C	GetItemSklBonus	{U}
08016098	GetItemSpdBonus	{U}
080160C4	GetItemDefBonus	{U}
080160F0	GetItemResBonus	{U}
0801611C	GetItemLckBonus	{U}
08016148	GetItemUnkBonus	{U}
080161A4	CanUnitUseAsWeapon	{U}
08016380	CanUnitUseWeapon	{U}
080163D2	CanUnitUseAsStaff	{U}
08016428	CanUnitUseStaff	{U}
08016470	DrawItemMenuCommand	{U}
080165DC	DrawTextAndIconForItem	{U}
0801672E	ValidateItem	{U}
08016764	GetUnitEquippedWeapon	{U}
08016794	GetUnitEquippedWeaponSlot	{U}
080167C6	IsItemCoveringRange	{U}
080167F4	EquipUnitItemByIndex	{U}
08016948	GetWeaponRankLevel	{U}
0801697C	GetWRankTextBuffer	{U}
080169E0	GetWRankText	{U}
08016A08	GetWTypeTextInStandardBuffer	{U}
08016A38	GetWRankBarData	{U}
08016AB0	IsItemUsable	{U}
08016B2C	CanUnitUse	{U}
08016D0E	GetUnitItemSlot	{U}
08016D36	IsItemStealable	{U}
08016D60	IsItemHammernable	{U}
08016DB4	GetWeaponRangeMask	{U}
08016EBC	GetUnitRangeMask	{U}
08016F10	GetUnitStaffRangeMask_0	{U}
0801704C	GetConvoyTotalGoldValue	{U}
080171B4	GetItemIndex	{U}
0801725C	GetItemWType	{U}
080172BC	GetItemMaxUses	{U}
080172E0	GetItemMight	{U}
080172F8	GetItemHit	{U}
08017328	GetItemCrit	{U}
0801733E	GetItemCost	{U}
0801736C	GetItemMinRange	{U}
08017384	GetItemMaxRange	{U}
080173A0	GetItemRange	{U}
080173B8	GetItemWRank	{U}
080173D0	GetItemEffectivenessPtr	{U}

0801746A	GetItemMaxCost	{U}
08017494	GetItemWExp	{U}
080174AC	GetROMItemStructPtr	{U}
080174D8	ClearUnits	{U}
08017508	ClearUnitStruct	r0=@Unit	{U}
08017530	CopyUnitStruct	r0=@Unit	r1=@Unit	{U}
0801754C	GetNextFreeUnitStructPtr	RET=@Unit	r0=faction	{U}
08017584	GetNextFreePlayerUnitStruct	RET=@Unit	{U}
080175BA	GetUnitFogViewRange	{U}
080175E6	SetUnitNewStatus	{U}
08017600	WriteUnitStatusDuration	{U}
08017610	GetUnitSMSIndex	{U}
08017652	UnitAddItem	{U}
08017672	UnitClearInventory	{U}
08017688	RemoveUnitBlankItems	{U}
080176DA	GetUnitItemCount	{U}
080176F8	UnitHasItem	{U}
08017734	LoadUnits	{U}
08017868	StoreNewUnitFromCode	{U}
080178F4	CharFillInventoryFromCode	{U}
08017930	LoadUnitStats	{U}
080179BA	FixROMUnitStructPtr	{U}
080179F0	LoadUnitSupports	{U}
08017A1C	AutolevelUnitWeaponRanks	{U}
08017AC0	IncreaseUnitStatsByLevelCount	{U}
08017B80	AutolevelUnit	{U}
08017D34	GetUnitByCharId	{U}
08017D70	GetNonAllyUnitStructById	{U}
08017DB4	CanUnitRescue	{U}
08017DE4	UnitRescue	{U}
08017E08	UpdateRescuingData	{U}
08017E5C	UpdateRescueData	{U}
08017EB8	HandleAllegianceChange	{U}
08017F28	ApplyUnitMovement	{U}
080180EC	SetupActiveUnit	{U}
08018164	SetActiveUnit	{U}
080183F4	SetAllUnitNotBackSprite	{U}
0801842C	ValidateUnitItem	{U}
08018450	GetUnitAid	{U}
080184B4	GetUnitMagBy2Range	{U}
080184DC	UnitHasMagicRank	{U}
080185AC	GetUnitUseFlags	{U}
0801865C	CanUnitMove	{U}
0801871C	IsPosMagicSealed	{U}
0801878E	CanUnitNotUseMagic	{U}
080187BC	GetUnitLastItem	{U}
08018812	GetClassStandingMapSpriteId	{U}
080188D4	UpdatePrevDeployStates	{U}
080188CE	LoadUnitPrepScreenPositions	{U}
08018830	ClearCutsceneUnits	{U}
08018A70	GetUnitCurrentHP	{U}
08018AB0	GetUnitMaxHP	{U}
08018AD0	GetUnitPower	{U}
08018AF0	GetUnitSkill	{U}
08018B30	GetUnitSpeed	{U}
08018B70	GetUnitDefense	{U}
08018B90	GetUnitResistance	{U}
08018BB8	GetUnitLuck	{U}
08018C40	SetUnitHP	{U}
08018C7C	UnitTryHeal	{U}
08018CF0	WriteStatusTextToRAM	{U}
08018D0C	GetUnitStruct	{U}
08018D50	UnitRemoveItem	{U}
08018D68	CanUnitCrossTerrain	{U}
08018D88	InitChapterMap	{U}
0801906C	SetupMapRowPointers	{U}
080190AC	ClearMapWith	{U}
08019174	LoadChapterMap	{U}
080191D4	LoadChapterMapGfx	{U}
0801926C	FlushTilesFromBuffer	{U}
0801932C	FlushTerrainData	{U}
080193BC	GetSomeTerrainToChangeAtSomePosition	{U}
080193E0	UpdateGameTileGfx	{U}
08019504	UpdateGameTilesGraphics	{U}
08019868	UpdateUnitMapAndVision	{U}
08019A3C	UpdateTrapFogVision	{U}
08019A68	UpdateTrapHiddenStates	{U}
08019ABC	RefreshFogAndUnitMaps	{U}
08019B08	GetTerrainNameString	{U}
08019B20	GetTerrainHealAmount	{U}
08019B30	GetTerrainRestoreBadStatus	{U}
08019BA0	FillMovementMapForUnit	{U}
08019BE0	FillMovementMapForUnitAndMovement	{U}
08019C1C	FillMovementMapForUnitPosition	{U}
08019CB0	FillMovementMapForUnitAt	{U}
08019CE0	StoreMovCostTable	{U}
08019D00	FillMovementMap	{U}
0801A2D4	MapAddInRange	{U}
0801A3D8	MapSetInRange	{U}
0801A4D4	FillMapAttackRangeForUnit	{U}
0801AC60	FillRangeByRangeMask	{U}
0801AE10	FillMapStaffRangeForUnit	{U}
0801B008	ApplyStuffToRangeMaps	{U}
0801B190	SetSubjectMap	{U}
0801B19C	FillRangeMap	{U}
0801B1DC	GetCurrentMovCostTable	{U}
0801B244	Get8	{U}
0801B250	Loop6C_WaitForSelectPress	{U}
0801B61C	DebugMapMenu_DisplayInfoIdle	{U}
0801B66C	DebugMapMenu_DisplayInfoEffect	{U}
0801B672	DebugMenu_WeatherDraw	{U}
0801B7A0	DebugMenu_WeatherEffect	{U}
0801B7A4	DebugMenu_ClearDraw	{U}
0801B814	DebugMenu_ClearIdle	{U}
0801B8B8	DebugMenu_ClearEffect	{U}
0801B8BC	DebugMenu_ErasedEffect	{U}
0801B924	DEBUGONLY_Startup	{U}
0801BDBC	DebugMenu_FogEffect	{U}
0801BDCC	DebugMenu_GNightEffect	{U}
0801B472	HandlePlayerCursorMovement	{U}
0801C234	PlayerPhase_MainLoop	{U}
0801C4D0	DisplayUnitEffectRange	{U}
0801CA38	PlayerPhase_PrepareAction	{U}
0801CB98	TryMakeCantoUnit	{U}
0801CC4C	RunPotentialWaitEvents	{U}
0801CC68	EnsureCameraOntoActiveUnitPosition	{U}
0801CDBC	PlayerPhase_ApplyUnitMovement	{U}
0801CE6C	GetUnitSelectionValueThing	{U}
0801CF98	PlayerPhase_WaitForUnitMovement	{U}
0801D078	MoveLimitViewChange_OnInit	{U}
0801D0C8	MoveLimitViewChange_OnLoop	{U}
0801D1E4	MoveLimitView_OnLoop	{U}
0801D268	MoveLimitView_OnEnd	{U}
0801D2A0	DisplayMoveRangeGraphics	{U}
0801D2D4	HideMoveRangeGraphics	{U}
0801D3AC	PlayerPhase_HandleAutoEnd	{U}
0801D3DA	GetSomeFacingDirection	{U}
0801D404	Make6CMOVEUNITForUnitBeingRescued	{U}
0801D47C	Make6CKOIDO	{U}
0801D4D0	Make6CKOIDOAMM	{U}
0801D5EC	Destruct6CBMXFADE	{U}
0801D608	NewBMXFADE	{U}
0801D60A	MakeNew6CBMXFADE2	{U}
0801D6A0	GetEnemyStartCursorPosition	{U}
0801D77C	ADJUSTFROMXI_MoveCameraOnSomeUnit	{U}
0801D8B0	HandleNewItemGetFromDrop	{U}
0801D950	SendToConvoyMenu_Draw	{U}
0801D95C	MenuCommand_DrawExtraItem	{U}
0801D9A0	SendToConvoyMenu_NormalEffect	{U}
0801DBC4	FillWarpRangeMap	{U}
0801EC10	ChangeActiveUnitFacing	{U}
08021580	CommandEffectEndPlayerPhase	{U}
080215C0	Make6CE_Guide	{U}
08021644	EffectWait	{U}
08021654	GenericSelection_BackToUM	{U}
08021738	GenericSelection_BackToUM_CamWait	{U}
080217B0	RescueUsability	{U}
080217E8	RescueEffect	{U}
08021808	RescueSelection_OnSelect	{U}
0802181C	DropUsability	{U}
08021854	DropEffect	{U}
08021874	DropSelection_OnSelect	{U}
08021898	TakeUsability	{U}
080217E8	TakeEffect	{U}
08021898	GiveUsability	{U}
080217E8	GiveEffect	{U}
08021968	MakeUnitRescueTransferGraphics	{U}
0802199C	TakeSelection_OnSelect	{U}
0802199C	GiveSelection_OnSelect	{U}
08021B34	DisplayUnitStandingAttackRange	{U}
08021B9C	HideMoveRangeGraphicsWrapper	{U}
0802219C	ItemCommandEffect	{U}
08022204	ItemSelectMenu_TextDraw	{U}
0802228C	ItemSelectMenu_Usability	{U}
080222DC	ItemSelectMenu_Effect	{U}
08022884	FillBallistaRange	{U}
0802290C	StaffCommandUsability	{U}
08022A44	StaffItemSelect_Usability	{U}
08022A7C	StaffItemSelect_Effect	{U}
08022ABC	StaffItemSelect_TextDraw	{U}
08022AC8	StaffItemSelect_OnHover	{U}
08022F78	StealCommandUsability	{U}
08023000	StealTargetSelection_OnInit	{U}
080230E8	StealItemMenuCommand_Usability	{U}
0802312C	StealItemMenuCommand_Draw	{U}
0802317C	StealItemMenuCommand_Effect	{U}
080232CC	RescueSelection_OnChange	{U}
080232F0	DropSelection_OnConstruction	{U}
08023498	RideCommandUsability	{U}
080234F4	RideCommandEffect	{U}
0802357C	AttackCommandUsability	{U}
080235F8	AttackBallistaCommandUsability	{U}
08023810	GetPhaseAbleUnitCount	{U}
080238B0	AreUnitsAllied	{U}
080238C2	IsSameAllegience	{U}
080238D8	GetCurrentPhase	{U}
080238EC	IsNotEnemyPhaseMaybe	{U}
0802390E	SetPartyGoldAmount	{U}
08023944	ForEachUnitInRange	{U}
08023A1C	ForEachPosInRange	{U}
08023A74	ForEachAdjacentUnit	{U}
08023A74	ForEachAdjacentPosition	{U}
08023ADC	ForEachPosIn12Range	{U}
08023B10	ForEachUnitInMagBy2Range	{U}
08023B60	TryAddTrapsToTargetList	{U}
08023C20	AddUnitToTargetListIfNotAllied	{U}
08023C58	MakeTargetListForWeapon	{U}
08023D64	MakeTradeTargetList	{U}
08023E6C	TryAddToDropTargetList	{U}
08023EF8	TryAddRescuedUnitToTakeTargetList	{U}
080240C8	MakeTargetListForSupport	{U}
080241AC	FillBallistaRangeMaybe	{U}
08024218	TryAddClosedDoorToTargetList	{U}
08024258	TryAddBridgeToTargetList	{U}
08024298	MakeTargetListForDoorAndBridges	{U}
08024538	TryAddUnitToHealTargetList	{U}
080245C0	MakeTargetListForRangedHeal	{U}
0802460C	TryAddUnitToRestoreTargetList	{U}
08024690	TryAddUnitToBarrierTargetList	{U}
08024714	TryAddUnitToRescueStaffTargetList	{U}
08024714	TryAddUnitToWarpTargetList	{U}
08024970	TryAddUnitToHammerneTargetList	{U}
080249FC	MakeTargetListForLatona	{U}
08024C24	TryAddUnitToDanceRingTargetList	{U}
08024C98	SetupMapSpritesPalettes	{U}
08024CF8	SMS_ClearUsageTable	{U}
08024D60	SMS_80266F0	{U}
08024DEE	SMS_SomethingGmapUnit	{U}
08024DEC	SMS_RegisterUsage	{U}
08024EB8	SomethingSMS_16x16_0	{U}
08024F4C	SomethingSMS_16x16	{U}
08025028	SomethingSMS_16x32	{U}
08025118	SomethingSMS_32x32	{U}
08025518	SMS_FlushDirect	{U}
08025580	SMS_FlushIndirect	{U}
080256C8	GetUnitSpritePaletteIndexWrapper	{U}
08025724	SMS_UpdateFromGameData	{U}
080258D8	SMS_GetNewInfoStruct	{U}
08025910	SMS_DisplayAllFromInfoStructs	{U}
08025B54	DisplayUnitAdditionalBlinkingIcons	{U}
08026574	HideUnitSMS	{U}
0802BCBC	GetROMUnitSupportCount	{U}
08026636	GetROMUnitSupportingId	{U}
0802664A	GetUnitSupportingUnit	{U}
08026692	GetSupportLevelBySupportIndex	{U}
080266B8	GetUnitTotalSupportLevels	{U}
080266F2	AddSupportPoints	{U}
08026778	CanUnitSupportCommandWith	{U}
080267F2	GetUnitStartingSupportValue	{U}
0802680C	GetSupportDataIdForOtherUnit	{U}
08026898	HandleSupportGains	{U}
080269B2	StoreAddedAffinityBonusesForSupportLevel	{U}
08026A18	GetUnitSupportBonuses	{U}
08026BF0	CanUnitsStillSupportThisChapter	{U}
08026CD0	CanUnitUseItem	{U}
080270FC	ItemEffect_Call	{U}
080272D0	IsGeneratedTargetListEmpty	{U}
080272E4	CanUseHealingItem	{U}
08027318	CanUseTorch	{U}
08027354	CanUseChestKey	{U}
08027390	CanUseDoorKey	{U}
080273A4	CanOpenBridge	{U}
080273B8	CanUseLockpick	{U}
08027578	CanUseStatBooster	{U}
0802764C	EndItemEffectSelectionThing	{U}
08027680	GenericStaffSelection_OnSelect	{U}
08027698	PrepareTargetSelectionForRescueStaff	{U}
080276D8	SetupTargetSelectionForGenericStaff	{U}
08027718	WarpTargetPosSelect_Init	{U}
080277CC	WarpTargetPosSelect_Loop	{U}
0802790C	WarpTargetPosSelect_Confirm	{U}
08027948	WarpTargetPosSelect_Cancel	{U}
0802797C	WarpTargetPosSelect_Destruct	{U}
08027990	WarpTargetSelection_OnSelect	{U}
080279B8	SetupWarpTargetSelection	{U}
08027A30	PrepareTargetSelectionForMineAndLightRune	{U}
08027A88	HammerneTargetSelection_OnSelect	{U}
08027B3C	HammerneTargetSelection_OnChange	{U}
08027B60	HammerneTargetSelection_OnInit	{U}
08027E58	GenericSelection_DeleteBBAndBG	{U}
08027EC8	TorchTargetPosSelect_Init	{U}
08027F20	TorchTargetSelection_Loop	{U}
08028010	NewTorchStaffSelection	{U}
0802803C	CanUnitUseItemPrepScreen	{U}
08028380	BATTLE_SaveFromBattle	{U}
0802848C	SetupBattleStructFromUnitAndWeapon	{U}
080285D4	CopyUnitToBattleStruct	{U}
080286B8	CopyUnitToBattleStructRawStats	{U}
080286F0	WriteBattleStructTerrainBonuses	{U}
08028728	BattleSetupTerrainData	{U}
0802896C	SetupBattleBallistaWeaponData	{U}
080289B0	FillPreBattleStats	{U}
080289FC	FillBattleStats	{U}
08028A98	BattleLoadDefense	{U}
08028AF8	LoadRawDefense	{U}
08028B68	BattleLoadAS	{U}
08028BA0	BattleLoadHit	{U}
08028D00	BattleLoadCrit	{U}
08028E1C	ComputeLethalityChance	{U}
08028E78	BattleApplySRankBonuses	{U}
08028EB2	BattleComputeBuffStatus	{U}
08028EEC	ComputeSpecialWeapons	{U}
08028FB0	MakeBattle	{U}
08029028	GetBattleUnitPointers	{U}
0802903C	BattleCheckDoubling	{U}
080290B8	MakeBattleRound	{U}
08029114	GetBattleHitCount	{U}
0802914C	CheckForTriangleAttack	{U}
08029234	UpdateBattleStats	{U}
08027714	GenerateCurrentRoundData	{U}
08029324	UpdateBattleTriangleAttackData	{U}
0802939C	CurrentRound_ComputeWeaponEffects	{U}
080295E0	GetStatIncrease	{U}
08029604	GetAutoleveledStat	{U}
08029660	CheckForLevelUp	{U}
08029970	CheckForLevelUpCaps	{U}
08029A70	SaveUnitsFromBattle	{U}
08029AFC	GetBattleNewWExp	{U}
08029BE8	BattleUnit_DidWRankGoUp	{U}
08029C24	SaveUnitFromBattle	{U}
08029D38	UpdateBallistaUsesFromBattle	{U}
08029D6A	NullSomeStuff	{U}
08029FF8	GetBattleUnitStaffExp	{U}
0802A05C	InstigatorAdd10Exp	{U}
0802A11E	BattleReverseWTriangeEffect	{U}
0802A1F6	DoSomeBattleWeaponStuff	{U}
0802A254	MakeSnagBattleTarget	{U}
0802A2D8	FillSnagBattleStats	{U}
0802A3B0	BeginBattleAnimations	{U}
0802A5B4	SaveInstigatorFromBattle	{U}
0802A66C	GetStaffAccuracy	{U}
0802A812	DidWeaponBreak	{U}
0802BA48	ResetTraps	{U}
0802BA94	GetSpecificTrapAt	{U}
0802BACC	AddTrap	{U}
0802BAF4	AddTrapExt	{U}
0802BB24	AddFireTrap	{U}
0802BB40	AddGasTrap	{U}
0802BB60	AddArrowTrap	{U}
0802BB98	AddTrap8	{U}
0802BBA8	AddTrap9	{U}
0802BBB8	AddSnagsAndWalls	{U}
0802BC40	ApplyTrapMapChanges	{U}
0802BC80	UpdateAllLightRunes	{U}
0802BBC6	GetTrapExt1At	{U}
0802BCD0	GetMapChangesPointerById	{U}
0802BD0C	GetMapChangesIdAt	{U}
0802BD68	ApplyMapChangesById	{U}
0802BDD4	AddMapChange	{U}
0802BDE8	UntriggerMapChange	{U}
0802BE12	HideIfUnderRoof	{U}
0802BEA0	AddToTargetListFromPos	{U}
0802BEC0	AddArrowTrapTargetsToTargetList	{U}
0802BFEC	MakeTargetListForTurnTrapDamage	{U}
0802C154	CountDownTraps	{U}
0802C178	ResetCounterForCountedDownTraps	{U}
0802C1E8	AddLightRune	{U}
0802C24C	HandleTrapDecay	{U}
0802BC80	NullAllLightRunesTerrain	{U}
0802C318	GetTrap	{U}
0802C324	ExecStandardHeal	{U}
0802C3AC	ExecRestore	{U}
0802C42C	GetRescueStaffeePosition	{U}
0802C654	ExecRescueStaff	{U}
0802C708	ExecWarpStaff	{U}
0802C76C	ExecStatusStaff	{U}
0802C810	ExecFortify	{U}
0802C8D4	ExecHammerne	{U}
0802C994	ExecSomeSelfHeal	{U}
0802CF4C	ExecTorchStaff	{U}
0802D008	ActionStaffDoorChestUseItem	{U}
0802D324	SetupGameVBlank6C_TileAnimations	{U}
0802D368	GameVBlank6C_Destructor	{U}
0802D374	GameVBlank6C_Loop	{U}
0802D380	SetupGameVBlank6C	{U}
0802D3B4	BlockGameGraphicsLogic	{U}
0802D3E8	UnblockGameGraphicsLogic	{U}
0802D424	SetupOAMSpliceForWeather	{U}
0802DD60	SetupWeatherGraphics_Maybe	{U}
0802DDD0	UpdateWeatherGraphics	{U}
0802DEA8	SetupWeather	{U}
0802DEC0	GetTextSpeed	{U}
0802DFFC	ResetGameState	{U}
0802E37C	MakeBMAPMAIN	{U}
0802E6E4	GetTacticianNameStringPtr	{U}
0802E700	GetConvoyItemArray	{U}
0802E708	ClearConvoyItems	{U}
0802E72C	ShrinkConvoyItemList	{U}
0802E76E	GetConvoyItemCount	{U}
0802E790	AddItemToConvoy	{U}
0802E8D0	InitUnitStack	{U}
0802E8EC	PushUnit	{U}
0802E920	LoadPlayerUnitsFromUnitStack	{U}
0802E920	LoadPlayerUnitsFromUnitStack2	{U}
0802E9A0	PrepareArenaStruct	{U}
0802EA80	PrepareArena	{U}
0802EA9C	PrepareArena2	{U}
0802EAEC	GetClassBestWRankType	{U}
0802EBFC	GetNearLevel	{U}
0802EC18	GetUnitArenaWeight	{U}
0802EE14	PrepareBalancedArenaFight	{U}
0802EA48	AdjustArenaOpponentPower	{U}
0802F434	ActionVisitAndSieze	{U}
0802F4B0	ActionArena	{U}
0802F4C4	ActionDance	{U}
0802F514	ActionTalk	{U}
0802F540	ActionSupport	{U}
0802F5E8	ActionSteal	{U}
0802F85C	BATTLE_GOTO1_IfNobodyIsDead	{U}
0802F8A8	DidUnitDie	{U}
0802F8BC	BATTLE_ProbablyMakesTheDeadUnitDissapear	{U}
0802F954	BATTLE_DeleteLinkedMOVEUNIT	{U}
0802F9C4	BATTLE_HandleItemDrop	{U}
0803077C	CanCharacterBePrepMoved	{U}
08030C28	PrepScreen6C_StartUnitSwap	{U}
08030EFA	CallCursorShop	{U}
0803117C	ShrinkPlayerUnits	{U}
08031270	CanUnitUseVisit	{U}
08031304	CanUnitUseSeize	{U}
08031384	CanUnitUseAttack	{U}
080313CC	CanActiveUnitUseRescue	{U}
080313E8	CanActiveUnitUseTrade	{U}
08031404	GetUnitCommandUseFlags	{U}
08031572	GetChapterMapChangesPointer	{U}
080315E8	GetSomethingRelatedToCurrentDifficulty	{U}
0803168C	NewUnitInfoWindow	{U}
080316B8	UnitInfoWindow_PositionUnitName	{U}
0803182E	GetUnitInfoWindowX	{U}
08031A74	NewUnitInfoWindow_WithAllLines	{U}
08031CBC	DrawHammerneUnitInfoWindow	{U}
08032064	SetupUnitRescueWindow	{U}
08032560	NewBottomHelpText	{U}
0803279C	DeleteEach6CBB	{U}
08033410	BattleForecase_SetupLabelText	{U}
080334E8	AddWeaponStatsAfterRound	{U}
0803351C	BKSEL_SetupHitAndSuchStats	{U}
08033BA0	BKSEL_InitGfx	{U}
08033C28	BKSEL_Destructor	{U}
080340FC	NewBattleForecast	{U}
080343BC	GetPickTrapType	{U}
08034434	ExecTrap	{U}
08034740	AddBallista	{U}
08034770	RideBallista	{U}
080347A8	TryRemoveUnitFromBallista	{U}
080347E2	IsBallista	{U}
0803469C	GetBallistaItemUses	{U}
080349BC	Loop6C_E_CPORDER	{U}
08034BE4	GetCurrentPhaseUnitCount	{U}
08034CF0	CPORDER_End	{U}
08034D30	Call6C_E_CPDECIDE	{U}
08034E30	ClearSomeAIRelatedStruct	{U}
08035294	ApplyAICombat2	{U}
08035420	ApplyAIPickAction	{U}
08036650	FillMovementAndRangeMapForItem	{U}
0803715C	SetupUnitInventoryAIFlags	{U}
08037218	SetupUnitStatusStaffAIFlags	{U}
08037260	SetupUnitHealStaffAIFlags	{U}
080372AC	SaveNumberOfAlliedUnitsIn0To8Range	{U}
08037350	CharStoreAI	{U}
08039704	UpdateAllPhaseHealingAIStatus	{U}
0803975C	UpdateUnitHealingAIStatus	{U}
0803993C	GetEscapePointStructThingMaybe	{U}
08039D48	StoreItemAndGetUnitAttack	{U}
08040568	New6C_SIOMAIN2	{U}
08049A94	LoadOldUIPal	{U}
08049A94	LoadNewUIPal	{U}
08049AC4	LoadOldUIImage	{U}
08049AC4	LoadNewUIImage	{U}
0804A1FC	LoadOldUIGfx	{U}
0804A224	NewMenu_DefaultAdjusted	{U}
0804A254	NewMenu_DefaultChild	{U}
0804A212	NewMenu_Default	{U}
0804A490	EndAllMenus	{U}
0804A4A8	Menu_CallDefinedConstructors	{U}
0804A63C	Menu_Idle	{U}
0804A73C	Menu_HandleDirectionInputs	{U}
0804A822	Menu_HandleSelectInputs	{U}
0804A8B0	Menu_GetCursorGfxCurrentPosition	{U}
0804A8F8	MenuCommand_UsabilityAlways	{U}
0804A8FC	UsabilityGrayed	{U}
0804A900	UsabilityNever	{U}
0804AA34	Menu_CallTextBox	{U}
0804AB9A	ClearMenuRelatedList	{U}
0804ACE4	InitTargets	{U}
0804ACFC	AddTarget	{U}
0804AD50	LinkTargets	{U}
0804AD98	TargetSelection_GetRealCursorPosition	{U}
0804ADAE	TargetSelection_Loop	{U}
0804AE88	NewTargetSelection	{U}
0804A494	NewTargetSelection_Specialized	{U}
0804A4A8	EndTargetSelection	{U}
0804AF34	TargetSelection_HandleMoveInput	{U}
0804AFB0	TargetSelection_HandleSelectInput	{U}
0804B048	GetFarthestTargetIndex	{U}
0804B0A8	LinkTargetsOrdered	{U}
0804B14C	GetLinkedTargetList	{U}
0804B15C	GetFirstTargetPointer	{U}
0804B1AC	NewEkrBattleDeamon	{U}
0804B200	ekrBattleDeamon_Destructor	{U}
0804B218	NewEkrBattle	{U}
0804B284	InBattleMainRoutine	{U}
0804B328	MainUpdate_804FEE4	{U}
0804B3A8	ekrBattle_Init	{U}
0804B43C	ekrBattle_8050000	{U}
0804B490	ekrBattle_8050054	{U}
0804B52E	ekrBattle_80500F0	{U}
0804B570	ekrBattle_8050134	{U}
0804B594	ekrBattle_8050158	{U}
0804B5B0	ekrBattle_8050174	{U}
0804B620	ekrBattle_8050224	{U}
0804B640	ekrBattle_8050244	{U}
0804B68A	ekrBattle_8050290	{U}
0804B6A8	ekrBattle_80502B0	{U}
0804B6FC	ekrBattle_8050304	{U}
0804B730	ekrBattle_8050338	{U}
0804B7DC	ekrBattle_80503EC	{U}
0804B82C	ekrBattle_8050440	{U}
0804B954	ekrBattle_80505EC	{U}
0804B968	ekrBattle_8050600	{U}
0804B9EC	ekrBattle_8050684	{U}
0804BA30	ekrBattle_80506C8	{U}
0804BC16	ekrBattle_80508F0	{U}
0804BC64	ekrBattle_8050940	{U}
0804BCD0	ekrBattle_80509A8	{U}
0804BDAE	ekrBattle_8050A84	{U}
0804BDDE	ekrBattle_8050AB8	{U}
0804BE2C	ekrBattle_8050B08	{U}
0804BF14	ekrBattle_CheckForLevelup_8050C34	{U}
0804BF4C	ekrBattle_WaitForLevelup_8050C6C	{U}
0804BF70	ekrBattle_MakePopups	{U}
0804BF4C	ekrBattle_WaitForPopup	{U}
080583CE	ekrBattle_8050CCC	{U}
0804B5B0	ekrBattle_8050CF8	{U}
0804C058	ekrBattle_8050D88	{U}
0804C078	ekrBattle_8050DA8	{U}
0804C0B4	NewEkrLvlupFan	{U}
0804C1D0	NewEkrGauge	{U}
0804C438	EndEkrGauge	{U}
0804C44C	EkrGauge_8051180	{U}
0804C45C	EkrGauge_8051190	{U}
0804C46C	EkrGauge_80511A0	{U}
0804C47C	EkrGauge_80511B0	{U}
0804C48C	EkrGauge_80511C0	{U}
0804C49C	EkrGauge_80511D0	{U}
0804C4B0	EkrGauge_80511E4	{U}
0804C4C4	EkrGauge_80511F8	{U}
0804C4D4	EkrGauge_8051208	{U}
0804C4E4	EkrGauge_8051218	{U}
0804C4F4	EkrGauge_8051228	{U}
0804C550	ekrGauge_Loop	{U}
0804CD64	NewEkrDispUP	{U}
0804CDE8	EkrDispUP_8051B48	{U}
0804EFDC	StartSpellBG_FLASH	{U}
0804F698	NewEfxStatusUnit	{U}
0804F7C0	DeleteEach6C_efxStatusUnit	{U}
0804FB6C	NewEfxSpellCast	{U}
0804FFF0	SetSomethingSpellFxToTrue	{U}
0804FFFC	SetSomethingSpellFxToFalse	{U}
08050008	ClearBG1Setup	{U}
08050018	ClearBG1	{U}
08050140	ThisMakesTheHPInSpellAnimGoAway	{U}
080505C8	StoreSpellAnimTilesOBJ	{U}
080505F0	StoreSpellAnimPaletteOBJ	{U}
0805060C	StoreSpellAnimTilesBG	{U}
080509A4	BeginAnimsOnBattleAnimations	{U}
08050A38	MainUpdate_8055C68	{U}
08050CDC	ekrBattleStarting_8055F00	{U}
08050D7C	ekrBattleStarting_8055FA0	{U}
08050DC4	ekrBattleStarting_8055FE8	{U}
08050E00	ekrBattleStarting_8056024	{U}
08050E54	ekrBattleStarting_8056078	{U}
08051E84	ekrBattleEnding_8056170	{U}
08050F98	ekrBattleEnding_80561C8	{U}
08050FF4	ekrBattleEnding_8056228	{U}
08051054	ekrBattleEnding_8056288	{U}
08051170	ekrBattleEnding_8056390	{U}
08051A9C	NewEkrWindowAppear	{U}
08051B80	NewEkrNamewinAppear	{U}
08052B08	GetSpellAnimId	{U}
0805285A	GetBattleAnimationId	{U}
08053296	GetAllegienceId	{U}
080532EA	GetSomeAISRelatedIndexMaybeByID	{U}
08053374	IsItemDisplayedInBattle	{U}
08053454	BattleAIS_ExecCommands	{U}
08053F4C	NewEkrChienCHR	{U}
08053F7C	RegisterAISSheetGraphics	{U}
08054760	GetSomeBoolean	{U}
080547A8	GetCoreAIStruct	{U}
08054804	GetSomeAISRelatedIndexMaybe	{U}
08054E88	NewEfxAnimeDrvProc	{U}
08054EBC	ExecAllAIS	{U}
08055570	BeginAnimsOnBattle_Arena	{U}
080555AC	NewEkrTogiInitPROC	{U}
08055808	NewEkrTogiColor	{U}
0805583C	EndEkrTogiColor	{U}
08055888	StartSpellAnimation	{U}
080561D0	StartSpellThing_MagicQuake	{U}
08056214	Loop6C_efxMagicQUAKE	{U}
080563E0	StartSpellAnimDummy	{U}
08056404	Loop6C_efxDummymagic	{U}
08056458	StartSpellAnimHandAxe	{U}
08056458	StartSpellAnimArrow	{U}
08056938	StartSpellAnimJavelin	{U}
08056E7C	StartSpellAnimSong	{U}
08056E7C	StartSpellAnimDance	{U}
08057938	StartSpellAnimFireBreath	{U}
08057C54	StartSpellAnimIceBreath	{U}
08057440	StartSpellAnimDarkBreath	{U}
08057478	Loop6C_efxDarkbreath	{U}
08058044	StartSpellAnimThunder	{U}
08058080	Loop6C_efxThunder	{U}
08058340	StartSpellAnimFire	{U}
08058384	StartSpellAnimElfire	{U}
080583C8	Loop6C_efxFire	{U}
08058530	Loop6C_efxFireBG	{U}
0805865C	StartSubSpell_efxFireHITBG	{U}
08058744	StartSubSpell_efxElfireBG	{U}
08058810	StartSubSpell_efxElfireBGCOL	{U}
0805889C	StartSubSpell_efxElfireOBJ	{U}
0805779C	StartSpellAnimFimbulvetr	{U}
0805779C	StartSpellAnimNosferatu	{U}
080577D8	Loop6C_efxResire	{U}
0805A050	StartSpellAnimPurge	{U}
0805AE90	StartSpellAnimDivine	{U}
0805AECC	DivineSfxLoop	{U}
0805AE90	StartSpellAnimFenrir	{U}
0805C9F0	StartSpellAnimHeal	{U}
0805CB40	StartSpellAnimMend	{U}
0805CB40	StartSpellAnimRecover	{U}
0805DE68	StartSpellAnimSilence	{U}
0805DE68	StartSpellAnimSleep	{U}
0805DBC8	StartSpellAnimHammerne	{U}
0805E69C	StartSpellAnimBerserk	{U}
0805EF10	StartSpellAnimShine	{U}
08061B68	StartSpellAnimLuna	{U}
08060DDC	StartSpellAnimAura	{U}
080606C8	Loop6C_efxIvaldi	{U}
0806062C	PrepareSomeIvaldiParticleGraphics	{U}
08060624	StartSpellOBJ_IvaldiFall	{U}
08060624	StartSpellOBJ_IvaldiSideWash	{U}
0806000E	Loop6C_efxIvaldiOBJSideWash	{U}
08061B68	StartSpellAnimStone	{U}
08061B68	StartSpellAnimEvilEye	{U}
08061B68	StartSpellAnimNaglfar	{U}
0806B7D6	StartSpellAnimCrimsonEye	{U}
08082FD8	NewMapPoisonEffect	{U}
08082FD8	StartMapAnimTargetUnitWarpRingProcs	{U}
0808E39C	GetCurrentChapterBallistae2Ptr	{U}
0808DC9A	ClearLocalEvents	{U}
0808979A	CallRouteSplitMenu	{U}
080843D6	MenuCommand_DrawRouteSplit	{U}
08080270	DrawUnitScreenSupportList	{U}
08080360	DrawUnitWeaponRank	{U}
08081C94	New6CRText	{U}
08084730	GetCameraMovementSpeedMaybe	{U}
08084858	Loop6CUI1_DisplayTransition	{U}
080849D0	Loop6CUI1_HideTransition	{U}
08085110	InitMinimugBoxMaybe	{U}
080857DC	Loop6CUI1_Hidden	{U}
08085888	Loop6CUI1_Displayed	{U}
080859B4	Init6CUI2	{U}
080859E0	Loop6CUI2	{U}
080846C8	New6CPPInterfaceConstructor	{U}
080846DC	DeletePlayerPhaseInterface6Cs	{U}
08085F70	Loop16CPI	{U}
080861C8	Loop26CPI	{U}
08086210	Loop46CPI	{U}
08086618	MinimalVBlankHandler	{U}
08087190	NewChapterStatusScreen	{U}
080A8AA0	__malloc_unlock_1	{U}
0808E1B0	SortPlayerUnitsForPrepScreen	{U}
0808E47C	EndBG3Slider_	{U}
0809047C	Delete6CMenuScroll	{U}
08090490	Make6CMenuScroll	{U}
08091138	SomethingPrepListRelated	{U}
08095C6C	StoreConvoyWeaponIconGraphics	{U}
0809E4F0	LoadSomeUnitStatThingUnlockIdk	{U}
0809E570	SaveSomeUnitStatThingUnlockIdk	{U}
0809E6D8	GetSaveDataOffsetPointer	{U}
0809E934	SaveLocalEventIndexes	{U}
0809E954	SaveGlobalEventIndexes	{U}
0809E974	LoadLocalEventIds	{U}
0809E974	LoadGlobalEventIds	{U}
0809EECC	SetSomeUnitStatThingUnlockMaybeIdk	{U}
0809EAB4	__malloc_unlock_3	{U}
0809FAA4	LoadBWLEntries	{U}
0809FAD0	LoadSomeTable	{U}
0809FAEC	SaveBWLEntries	{U}
0809FB10	SaveChapterWinData	{U}
0809FB24	GetChapterWinDataEntry	{U}
0809FB70	GetWonChapterCount	{U}
0809FBD4	RegisterChapterTimeAndTurnCount	{U}
0809FC5C	GetGameTotalTurnCount	{U}
0809FCB0	GetGameTotalTime	{U}
0809FCF0	GetGameTotalTurnCount2	{U}
0809FF6C	BWL_IncrementMoveValue	{U}
0809FFAC	BWL_IncrementStatScreenViews	{U}
0809FFEC	BWL_IncrementDeployCountMaybe	{U}
080A003C	BWL_AddTilesMoved	{U}
080A009C	BWL_AddExpGained	{U}
080A00FC	StoreSomeUnitSetFlags	{U}
080A0248	BWL_AddFavoritismValue	{U}
080A0550	BWL_GetEntry	{U}
080A0588	Set0203EDB4	{U}
080A0594	Save0203EDB4	{U}
080A05B0	Load0203EDB4	{U}
080A0810	SaveGame	{U}
080A0A60	SaveUnit	{U}
080A0E9C	LoadSavedUnit	{U}
080A16C0	UnpackUnitStructFromSuspend	{U}
080A18D8	SaveTrapStructs	{U}
080A39F8	Loop6C_savemenu	{U}
080A4DB4	Make6C_savemenu	{U}
080A4E20	Make6C_savemenu2	{U}
080A4E34	savemenu_SetDifficultyChoice	{U}
080A5C48	New6C_savedraw	{U}
080A92E8	_CallDifferedLoop	{U}
080A92F8	Get6CDifferedLoop6C	{U}
080A931C	DeleteEach6CDifferedLoop	{U}
080A9338	Find6CDifferedLoop	{U}
080AA178	FadeInOut_Init	{U}
080AA18C	FadeIn_Loop	{U}
080AA1D0	FadeOut_Loop	{U}
080AA216	FadeInOut_DisableGfx	{U}
080AA26C	FadeInExists	{U}
080AA284	FadeOutExists	{U}
080AA29C	NewFadeIn	{U}
080AA2C0	NewFadeOut	{U}
080B9194	WorldMap_Destruct	{U}
080B558C	EndWM	{U}
080B4F70	WM_PutClassSprite	{U}
080B4F70	WM_PutCharSprite	{U}
080A8422	Initialize6CIntroSequence	{U}
080BFA14	DivArm	{U}
080BFA74	SRAMLoader	{U}
080BFAB4	SRAMTransfer	{U}
080BFAF4	SaveChecker	{U}
080BFBD8	SRAMTransfer_WithCheck	{U}
080C2334	_cleanup_r	{U}
080C2344	_cleanup	{U}
080C28E4	setlocale	{U}
080C28FC	localeconv	{U}
080C3880	_ratio	{U}
080C38D0	_mprec_log10	{U}
080C3A34	__sclose	{U}
080C3AC0	remap_handle	{U}
080C3B7C	get_errno	{U}
080C3B90	error	{U}
080C3BA4	wrap	{U}
080C4010	isatty	{U}
080C3F00	alarm	{U}
080C41C0	__unpack_d	{U}
080C4298	_fpadd_parts	{U}
080C4F48	_fpadd_parts_0	{U}
080003A8	ARM_FillRect	arm_func	{J}
080016CE	FlushBackgrounds	{J}
08002EC0	Call6C_02CallAndContinue	{J}
08002CDA	Call6C_0ESleep	{J}
080055DC	Text_AppendString	{J}
080057C4	Font_SpecializedGlyphDrawer	{J}
080059DC	Text_InsertString	{J}
080059DC	Text_InsertNumberOr2Dashes	{J}
08005A24	Text_AppendStringSimple	{J}
0800AD78	Null6CCallback	{J}
0800BDA8	SetSomeRealCamPos	{J}
0800D096	HideAllUnits	{J}
0800D77A	ShouldUNITBeLoaded	{J}
08012090	NewGoldGotPopup	{J}
080135FA	CopyString	{J}
08013614	CopyDirect	{J}
08013688	UnLZ77Decompress	{J}
080136C8	FilterR0ForRawCopy	{J}
0801372C	RegisterObjectTileGraphics	{J}
08013758	CopyTileGfxForObj	{J}
08013B68	SetSomethingInPaletteBB_2A	{J}
08013B78	SetSomethingInPaletteBB_5A	{J}
08013B8C	SetSomethingInPaletteBB_8A	{J}
08013BA0	GetSomethingInPaletteBB_2A	{J}
08013BAC	GetSomethingInPaletteBB_5A	{J}
08013BCC	ArchiveCurrentPalettes	{J}
08013C18	ArchivePalette	{J}
08013C48	WriteFadedPaletteFromArchive	{J}
080147B8	ContinueUntilSomeTransistion6CExists	{J}
080149B4	NewBlockingTimer	{J}
080149D0	Timer6C_Countdown	{J}
08014B58	DeleteAllPaletteAnimator	{J}
08014B68	NewPaletteAnimator	{J}
08014BBC	NewPaletteAnimator_	{J}
08014F64	FutureCall2_Loop	{J}
08014F88	FutureCall_Loop	{J}
08014FB0	SetupFutureCall2	{J}
08014FCC	SetupFutureCall	{J}
080151D4	RerangeSomething	{J}
080151FC	PlaySpacialSoundMaybe	{J}
080156C8	GeneralVBlankHandler	{J}
08015718	SomeUpdateRoutine	{J}
0801585C	MakePhaseController6C	{J}
080158B0	NewPlayerPhase6C	{J}
08015996	SetupBackgroundForWeatherMaybe	{J}
08015A0C	LoadObjUIGfx	{J}
08015A48	LoadGameCoreGfx	{J}
08015A68	HandleCursorMovement	{J}
08015B90	MoveCameraByStepMaybe	{J}
08015D10	GetSomeAdjustedCameraX	{J}
08015D54	GetSomeAdjustedCameraY	{J}
08015DE8	DisplayCursor	{J}
08015F6C	Init6C_GENS	{J}
08016000	Loop6C_GENS	{J}
08016080	StoreAdjustedCameraPositions	{J}
0801615C	EnsureCameraOntoPosition	{J}
080161EC	ShouldMoveCameraPosSomething	{J}
08016318	GetCurrentMapMusicIndex	{J}
08016620	CanUnitUseAsWeapon	{J}
080167FC	CanUnitUseWeapon	{J}
0801684E	CanUnitUseAsStaff	{J}
080168A4	CanUnitUseStaff	{J}
080168EC	DrawItemMenuCommand	{J}
08016A4C	DrawTextAndIconForItem	{J}
08016B8E	ValidateItem	{J}
08016BC4	GetUnitEquippedWeapon	{J}
08016BF4	GetUnitEquippedWeaponSlot	{J}
08016C26	IsItemCoveringRange	{J}
08016C54	EquipUnitItemByIndex	{J}
08016DA4	GetWeaponRankLevel	{J}
08016DD8	GetWRankTextBuffer	{J}
08016E38	GetWRankText	{J}
08016E60	GetWTypeTextInStandardBuffer	{J}
08016E8C	GetWRankBarData	{J}
08016F04	IsItemUsable	{J}
08016F80	CanUnitUse	{J}
08017162	GetUnitItemSlot	{J}
0801718A	IsItemStealable	{J}
080171B4	IsItemHammernable	{J}
08017208	GetWeaponRangeMask	{J}
08017310	GetUnitRangeMask	{J}
08017364	GetUnitStaffRangeMask_0	{J}
080174A0	GetConvoyTotalGoldValue	{J}
08017608	GetItemIndex	{J}
08017664	GetItemWType	{J}
080176C4	GetItemMaxUses	{J}
080176E8	GetItemMight	{J}
08017700	GetItemHit	{J}
08017730	GetItemCrit	{J}
08017746	GetItemCost	{J}
08017774	GetItemMinRange	{J}
0801778C	GetItemMaxRange	{J}
080177A8	GetItemRange	{J}
080177C0	GetItemWRank	{J}
080177D8	GetItemEffectivenessPtr	{J}

08017872	GetItemMaxCost	{J}
0801789C	GetItemWExp	{J}
080178C8	ClearUnits	{J}
080178F8	ClearUnitStruct	r0=@Unit	{J}
08017920	CopyUnitStruct	r0=@Unit	r1=@Unit	{J}
0801793C	GetNextFreeUnitStructPtr	RET=@Unit	r0=faction	{J}
08017974	GetNextFreePlayerUnitStruct	RET=@Unit	{J}
080179AA	GetUnitFogViewRange	{J}
080179D6	SetUnitNewStatus	{J}
080179F0	WriteUnitStatusDuration	{J}
08017A00	GetUnitSMSIndex	{J}
08017A42	UnitAddItem	{J}
08017A62	UnitClearInventory	{J}
08017A78	RemoveUnitBlankItems	{J}
08017ACA	GetUnitItemCount	{J}
08017AE8	UnitHasItem	{J}
08017B24	LoadUnits	{J}
08017C58	StoreNewUnitFromCode	{J}
08017CE4	CharFillInventoryFromCode	{J}
08017D20	LoadUnitStats	{J}
08017DAA	FixROMUnitStructPtr	{J}
08017DE0	LoadUnitSupports	{J}
08017E0C	AutolevelUnitWeaponRanks	{J}
08017EB0	IncreaseUnitStatsByLevelCount	{J}
08017F70	AutolevelUnit	{J}
08018124	GetUnitByCharId	{J}
08018160	GetNonAllyUnitStructById	{J}
080181A4	CanUnitRescue	{J}
080181D4	UnitRescue	{J}
080181F8	UpdateRescuingData	{J}
0801824C	UpdateRescueData	{J}
080182A8	HandleAllegianceChange	{J}
08018318	ApplyUnitMovement	{J}
080184DC	SetupActiveUnit	{J}
08018554	SetActiveUnit	{J}
080187E4	SetAllUnitNotBackSprite	{J}
0801881C	ValidateUnitItem	{J}
08018840	GetUnitAid	{J}
080188A4	GetUnitMagBy2Range	{J}
080188CC	UnitHasMagicRank	{J}
0801899C	GetUnitUseFlags	{J}
08018A4C	CanUnitMove	{J}
08018B0C	IsPosMagicSealed	{J}
08018B7E	CanUnitNotUseMagic	{J}
08018BAC	GetUnitLastItem	{J}
08018C02	GetClassStandingMapSpriteId	{J}
08018CC4	UpdatePrevDeployStates	{J}
08018CBE	LoadUnitPrepScreenPositions	{J}
08018C20	ClearCutsceneUnits	{J}
08018E60	GetUnitCurrentHP	{J}
08018EA0	GetUnitMaxHP	{J}
08018EC0	GetUnitPower	{J}
08018EE0	GetUnitSkill	{J}
08018F20	GetUnitSpeed	{J}
08018F60	GetUnitDefense	{J}
08018F80	GetUnitResistance	{J}
08018FA8	GetUnitLuck	{J}
08019030	SetUnitHP	{J}
0801906C	UnitTryHeal	{J}
080190F4	GetUnitStruct	{J}
08019138	UnitRemoveItem	{J}
08019150	CanUnitCrossTerrain	{J}
08019170	InitChapterMap	{J}
08019454	SetupMapRowPointers	{J}
08019494	ClearMapWith	{J}
0801955C	LoadChapterMap	{J}
080195BC	LoadChapterMapGfx	{J}
08019654	FlushTilesFromBuffer	{J}
08019714	FlushTerrainData	{J}
080197A4	GetSomeTerrainToChangeAtSomePosition	{J}
080197C8	UpdateGameTileGfx	{J}
080198EC	UpdateGameTilesGraphics	{J}
08019C50	UpdateUnitMapAndVision	{J}
08019E24	UpdateTrapFogVision	{J}
08019E50	UpdateTrapHiddenStates	{J}
08019EA4	RefreshFogAndUnitMaps	{J}
08019F00	GetTerrainHealAmount	{J}
08019F10	GetTerrainRestoreBadStatus	{J}
08019F80	FillMovementMapForUnit	{J}
08019FC0	FillMovementMapForUnitAndMovement	{J}
08019FFC	FillMovementMapForUnitPosition	{J}
0801A090	FillMovementMapForUnitAt	{J}
0801A0C0	StoreMovCostTable	{J}
0801A0E0	FillMovementMap	{J}
0801A6B4	MapAddInRange	{J}
0801A7B8	MapSetInRange	{J}
0801A8B4	FillMapAttackRangeForUnit	{J}
0801B040	FillRangeByRangeMask	{J}
0801B1F0	FillMapStaffRangeForUnit	{J}
0801B3E8	ApplyStuffToRangeMaps	{J}
0801B57C	FillRangeMap	{J}
0801B624	Get8	{J}
0801B630	Loop6C_WaitForSelectPress	{J}
0801B9E4	DebugMapMenu_DisplayInfoIdle	{J}
0801BA34	DebugMapMenu_DisplayInfoEffect	{J}
0801BA3A	DebugMenu_WeatherDraw	{J}
0801BBC4	DebugMenu_ClearIdle	{J}
0801BC68	DebugMenu_ClearEffect	{J}
0801BCD4	DEBUGONLY_Startup	{J}
0801C160	DebugMenu_FogEffect	{J}
0801C170	DebugMenu_GNightEffect	{J}
0801B84E	HandlePlayerCursorMovement	{J}
0801C624	PlayerPhase_MainLoop	{J}
0801C8D4	DisplayUnitEffectRange	{J}
0801CE3C	PlayerPhase_PrepareAction	{J}
0801CF9C	TryMakeCantoUnit	{J}
0801D050	RunPotentialWaitEvents	{J}
0801D06C	EnsureCameraOntoActiveUnitPosition	{J}
0801D1C0	PlayerPhase_ApplyUnitMovement	{J}
0801D270	GetUnitSelectionValueThing	{J}
0801D39C	PlayerPhase_WaitForUnitMovement	{J}
0801D47C	MoveLimitViewChange_OnInit	{J}
0801D4CC	MoveLimitViewChange_OnLoop	{J}
0801D5E8	MoveLimitView_OnLoop	{J}
0801D66C	MoveLimitView_OnEnd	{J}
0801D6A4	DisplayMoveRangeGraphics	{J}
0801D6D8	HideMoveRangeGraphics	{J}
0801D7B0	PlayerPhase_HandleAutoEnd	{J}
0801D7DE	GetSomeFacingDirection	{J}
0801D808	Make6CMOVEUNITForUnitBeingRescued	{J}
0801D880	Make6CKOIDO	{J}
0801D8D4	Make6CKOIDOAMM	{J}
0801D9F0	Destruct6CBMXFADE	{J}
0801DA0C	NewBMXFADE	{J}
0801DA0E	MakeNew6CBMXFADE2	{J}
0801DB80	ADJUSTFROMXI_MoveCameraOnSomeUnit	{J}
0801DD54	SendToConvoyMenu_Draw	{J}
0801DD60	MenuCommand_DrawExtraItem	{J}
0801DDA4	SendToConvoyMenu_NormalEffect	{J}
0801DF68	FillWarpRangeMap	{J}
0801EF94	ChangeActiveUnitFacing	{J}
080219F8	CommandEffectEndPlayerPhase	{J}
08021A38	Make6CE_Guide	{J}
08021ACC	GenericSelection_BackToUM	{J}
08021BB0	GenericSelection_BackToUM_CamWait	{J}
08021C28	RescueUsability	{J}
08021C60	RescueEffect	{J}
08021C94	DropUsability	{J}
08021CCC	DropEffect	{J}
08021CEC	DropSelection_OnSelect	{J}
08021D10	TakeUsability	{J}
08021C60	TakeEffect	{J}
//08021D10	GiveUsability	{J}
//08021C60	GiveEffect	{J}
08021DE0	MakeUnitRescueTransferGraphics	{J}
08021E14	TakeSelection_OnSelect	{J}
08021E14	GiveSelection_OnSelect	{J}
08021FAC	DisplayUnitStandingAttackRange	{J}
08022014	HideMoveRangeGraphicsWrapper	{J}
08022614	ItemCommandEffect	{J}
0802267C	ItemSelectMenu_TextDraw	{J}
08022704	ItemSelectMenu_Usability	{J}
08022754	ItemSelectMenu_Effect	{J}
08022CFC	FillBallistaRange	{J}
08022EBC	StaffItemSelect_Usability	{J}
08022EF4	StaffItemSelect_Effect	{J}
08022F34	StaffItemSelect_TextDraw	{J}
08022F40	StaffItemSelect_OnHover	{J}
08023404	StealCommandUsability	{J}
0802348C	StealTargetSelection_OnInit	{J}
08023574	StealItemMenuCommand_Usability	{J}
080235B8	StealItemMenuCommand_Draw	{J}
08023608	StealItemMenuCommand_Effect	{J}
08023758	RescueSelection_OnChange	{J}
0802377C	DropSelection_OnConstruction	{J}
08023924	RideCommandUsability	{J}
08023980	RideCommandEffect	{J}
08023A08	AttackCommandUsability	{J}
08023C9C	GetPhaseAbleUnitCount	{J}
08023D3C	AreUnitsAllied	{J}
08023D4E	IsSameAllegience	{J}
08023DD0	ForEachUnitInRange	{J}
08023EA8	ForEachPosInRange	{J}
08023F00	ForEachAdjacentUnit	{J}
08023F00	ForEachAdjacentPosition	{J}
08023F68	ForEachPosIn12Range	{J}
08023F9C	ForEachUnitInMagBy2Range	{J}
08023FEC	TryAddTrapsToTargetList	{J}
080240AC	AddUnitToTargetListIfNotAllied	{J}
080240E4	MakeTargetListForWeapon	{J}
080241F0	MakeTradeTargetList	{J}
080242F8	TryAddToDropTargetList	{J}
08024384	TryAddRescuedUnitToTakeTargetList	{J}
08024554	MakeTargetListForSupport	{J}
08024638	FillBallistaRangeMaybe	{J}
080246A4	TryAddClosedDoorToTargetList	{J}
080246E4	TryAddBridgeToTargetList	{J}
08024724	MakeTargetListForDoorAndBridges	{J}
080249C4	TryAddUnitToHealTargetList	{J}
08024A4C	MakeTargetListForRangedHeal	{J}
08024A98	TryAddUnitToRestoreTargetList	{J}
08024B1C	TryAddUnitToBarrierTargetList	{J}
08024BA0	TryAddUnitToRescueStaffTargetList	{J}
08024BA0	TryAddUnitToWarpTargetList	{J}
08024DFC	TryAddUnitToHammerneTargetList	{J}
08024E88	MakeTargetListForLatona	{J}
080250B0	TryAddUnitToDanceRingTargetList	{J}
08025124	SetupMapSpritesPalettes	{J}
08025184	SMS_ClearUsageTable	{J}
080251EC	SMS_80266F0	{J}
0802527A	SMS_SomethingGmapUnit	{J}
08025278	SMS_RegisterUsage	{J}
08025344	SomethingSMS_16x16_0	{J}
080253D8	SomethingSMS_16x16	{J}
080254B4	SomethingSMS_16x32	{J}
080255A4	SomethingSMS_32x32	{J}
080259A4	SMS_FlushDirect	{J}
08025A0C	SMS_FlushIndirect	{J}
08025B54	GetUnitSpritePaletteIndexWrapper	{J}
08025BB0	SMS_UpdateFromGameData	{J}
08025D64	SMS_GetNewInfoStruct	{J}
08025D9C	SMS_DisplayAllFromInfoStructs	{J}
08025FE0	DisplayUnitAdditionalBlinkingIcons	{J}
08026A00	HideUnitSMS	{J}
08026ab4	GetROMUnitSupportCount	{J}
08026AC2	GetROMUnitSupportingId	{J}
08026AD6	GetUnitSupportingUnit	{J}
08026b20	GetSupportLevelBySupportIndex	{J}
08026B44	GetUnitTotalSupportLevels	{J}
08026B7E	AddSupportPoints	{J}
08026C04	CanUnitSupportCommandWith	{J}
08026C7E	GetUnitStartingSupportValue	{J}
08026C98	GetSupportDataIdForOtherUnit	{J}
08026D24	HandleSupportGains	{J}
08026E3E	StoreAddedAffinityBonusesForSupportLevel	{J}
08026EA4	GetUnitSupportBonuses	{J}
08027078	CanUnitsStillSupportThisChapter	{J}
08027158	CanUnitUseItem	{J}
08027584	ItemEffect_Call	{J}
0802775C	IsGeneratedTargetListEmpty	{J}
08027770	CanUseHealingItem	{J}
080277A4	CanUseTorch	{J}
080277E0	CanUseChestKey	{J}
0802781C	CanUseDoorKey	{J}
08027830	CanOpenBridge	{J}
08027844	CanUseLockpick	{J}
08027A04	CanUseStatBooster	{J}
08027AD8	EndItemEffectSelectionThing	{J}
08027B24	PrepareTargetSelectionForRescueStaff	{J}
08027B64	SetupTargetSelectionForGenericStaff	{J}
08027BA4	WarpTargetPosSelect_Init	{J}
08027C58	WarpTargetPosSelect_Loop	{J}
08027D98	WarpTargetPosSelect_Confirm	{J}
08027DD4	WarpTargetPosSelect_Cancel	{J}
08027E08	WarpTargetPosSelect_Destruct	{J}
08027E1C	WarpTargetSelection_OnSelect	{J}
08027E44	SetupWarpTargetSelection	{J}
08027EBC	PrepareTargetSelectionForMineAndLightRune	{J}
08027F14	HammerneTargetSelection_OnSelect	{J}
08027FC8	HammerneTargetSelection_OnChange	{J}
08027FEC	HammerneTargetSelection_OnInit	{J}
080282E4	GenericSelection_DeleteBBAndBG	{J}
08028354	TorchTargetPosSelect_Init	{J}
080283AC	TorchTargetSelection_Loop	{J}
0802849C	NewTorchStaffSelection	{J}
080284C8	CanUnitUseItemPrepScreen	{J}
0802880C	BATTLE_SaveFromBattle	{J}
08028918	SetupBattleStructFromUnitAndWeapon	{J}
08028A60	CopyUnitToBattleStruct	{J}
08028B44	CopyUnitToBattleStructRawStats	{J}
08028B7C	WriteBattleStructTerrainBonuses	{J}
08028BB4	BattleSetupTerrainData	{J}
08028DE8	SetupBattleBallistaWeaponData	{J}
08028E2C	FillPreBattleStats	{J}
08028E78	FillBattleStats	{J}
08028F14	BattleLoadDefense	{J}
08028F74	LoadRawDefense	{J}
08029008	BattleLoadAS	{J}
08029040	BattleLoadHit	{J}
080291B0	BattleLoadCrit	{J}
080292CC	ComputeLethalityChance	{J}
08029328	BattleApplySRankBonuses	{J}
08029362	BattleComputeBuffStatus	{J}
0802939C	ComputeSpecialWeapons	{J}
08029460	MakeBattle	{J}
080294EC	BattleCheckDoubling	{J}
08029568	MakeBattleRound	{J}
080295C4	GetBattleHitCount	{J}
080295FC	CheckForTriangleAttack	{J}
080296E4	UpdateBattleStats	{J}
08027BA0	GenerateCurrentRoundData	{J}
080297D4	UpdateBattleTriangleAttackData	{J}
0802984C	CurrentRound_ComputeWeaponEffects	{J}
08029A90	GetStatIncrease	{J}
08029AB4	GetAutoleveledStat	{J}
08029B10	CheckForLevelUp	{J}
08029E20	CheckForLevelUpCaps	{J}
08029F20	SaveUnitsFromBattle	{J}
08029FAC	GetBattleNewWExp	{J}
0802A098	BattleUnit_DidWRankGoUp	{J}
0802A0D4	SaveUnitFromBattle	{J}
0802A1E8	UpdateBallistaUsesFromBattle	{J}
08029D6A	NullSomeStuff	{J}
0802A4A8	GetBattleUnitStaffExp	{J}
0802A50C	InstigatorAdd10Exp	{J}
0802A5CE	BattleReverseWTriangeEffect	{J}
0802A6A6	DoSomeBattleWeaponStuff	{J}
0802A704	MakeSnagBattleTarget	{J}
0802A788	FillSnagBattleStats	{J}
0802A860	BeginBattleAnimations	{J}
0802AA64	SaveInstigatorFromBattle	{J}
0802AB1C	GetStaffAccuracy	{J}
0802ACC2	DidWeaponBreak	{J}
0802BF08	ResetTraps	{J}
0802BFB4	AddTrapExt	{J}
0802BFE4	AddFireTrap	{J}
0802C000	AddGasTrap	{J}
0802C020	AddArrowTrap	{J}
0802C058	AddTrap8	{J}
0802C068	AddTrap9	{J}
0802C078	AddSnagsAndWalls	{J}
0802C140	UpdateAllLightRunes	{J}
0802C086	GetTrapExt1At	{J}
0802C190	GetMapChangesPointerById	{J}
0802C1CC	GetMapChangesIdAt	{J}
0802C228	ApplyMapChangesById	{J}
0802C294	AddMapChange	{J}
0802C2D2	HideIfUnderRoof	{J}
0802C360	AddToTargetListFromPos	{J}
0802C380	AddArrowTrapTargetsToTargetList	{J}
0802C6A8	AddLightRune	{J}
0802C140	NullAllLightRunesTerrain	{J}
0802C7E4	ExecStandardHeal	{J}
0802C86C	ExecRestore	{J}
0802C8EC	GetRescueStaffeePosition	{J}
0802CB14	ExecRescueStaff	{J}
0802CBC8	ExecWarpStaff	{J}
0802CC2C	ExecStatusStaff	{J}
0802CD94	ExecHammerne	{J}
0802CE54	ExecSomeSelfHeal	{J}
0802D40C	ExecTorchStaff	{J}
0802D4C8	ActionStaffDoorChestUseItem	{J}
0802D7E4	SetupGameVBlank6C_TileAnimations	{J}
0802D828	GameVBlank6C_Destructor	{J}
0802D834	GameVBlank6C_Loop	{J}
0802D840	SetupGameVBlank6C	{J}
0802D874	BlockGameGraphicsLogic	{J}
0802D8A8	UnblockGameGraphicsLogic	{J}
0802E290	UpdateWeatherGraphics	{J}
0802E380	GetTextSpeed	{J}
0802E4BC	ResetGameState	{J}
0802E848	MakeBMAPMAIN	{J}
0802EBD4	ClearConvoyItems	{J}
0802EBF8	ShrinkConvoyItemList	{J}
0802EC3A	GetConvoyItemCount	{J}
0802EC5C	AddItemToConvoy	{J}
0802EDB8	PushUnit	{J}
0802EDEC	LoadPlayerUnitsFromUnitStack	{J}
0802EDEC	LoadPlayerUnitsFromUnitStack2	{J}
0802EE6C	PrepareArenaStruct	{J}
0802EF4C	PrepareArena	{J}
0802EF68	PrepareArena2	{J}
0802EFB8	GetClassBestWRankType	{J}
0802F0C8	GetNearLevel	{J}
0802F0E4	GetUnitArenaWeight	{J}
0802F2E0	PrepareBalancedArenaFight	{J}
0802EF14	AdjustArenaOpponentPower	{J}
0802F7F4	
	{J}
0802F900	ActionVisitAndSieze	{J}
0802F97C	ActionArena	{J}
0802F990	ActionDance	{J}
0802F9E0	ActionTalk	{J}
0802FA0C	ActionSupport	{J}
0802FAB4	ActionSteal	{J}
0802FD28	BATTLE_GOTO1_IfNobodyIsDead	{J}
0802FD74	DidUnitDie	{J}
0802FD88	BATTLE_ProbablyMakesTheDeadUnitDissapear	{J}
0802FE20	BATTLE_DeleteLinkedMOVEUNIT	{J}
08030C68	CanCharacterBePrepMoved	{J}
08031114	PrepScreen6C_StartUnitSwap	{J}
080313E6	CallCursorShop	{J}
08031664	ShrinkPlayerUnits	{J}
080317EC	CanUnitUseSeize	{J}
0803186C	CanUnitUseAttack	{J}
080318B4	CanActiveUnitUseRescue	{J}
080318B4	CanActiveUnitUseTrade	{J}
080318EC	GetUnitCommandUseFlags	{J}
08031BF8	NewUnitInfoWindow	{J}
08031C24	UnitInfoWindow_PositionUnitName	{J}
08031D9A	GetUnitInfoWindowX	{J}
08031FAC	NewUnitInfoWindow_WithAllLines	{J}
080321EC	DrawHammerneUnitInfoWindow	{J}
08032594	SetupUnitRescueWindow	{J}
08032A90	NewBottomHelpText	{J}
08032CCC	DeleteEach6CBB	{J}
08033A04	AddWeaponStatsAfterRound	{J}
08033A38	BKSEL_SetupHitAndSuchStats	{J}
08034078	BKSEL_InitGfx	{J}
08034100	BKSEL_Destructor	{J}
080345D4	NewBattleForecast	{J}
08034894	GetPickTrapType	{J}
0803490C	ExecTrap	{J}
08034C18	AddBallista	{J}
08034C48	RideBallista	{J}
08034C80	TryRemoveUnitFromBallista	{J}
08034CBA	IsBallista	{J}
08034B74	GetBallistaItemUses	{J}
08034E94	Loop6C_E_CPORDER	{J}
080350BC	GetCurrentPhaseUnitCount	{J}
080351C8	CPORDER_End	{J}
08035208	Call6C_E_CPDECIDE	{J}
08035308	ClearSomeAIRelatedStruct	{J}
0803576C	ApplyAICombat2	{J}
080358F8	ApplyAIPickAction	{J}
08036B28	FillMovementAndRangeMapForItem	{J}
08037610	SetupUnitInventoryAIFlags	{J}
080376CC	SetupUnitStatusStaffAIFlags	{J}
08037714	SetupUnitHealStaffAIFlags	{J}
08037760	SaveNumberOfAlliedUnitsIn0To8Range	{J}
08037804	CharStoreAI	{J}
08039BB8	UpdateAllPhaseHealingAIStatus	{J}
08039C10	UpdateUnitHealingAIStatus	{J}
08039DF0	GetEscapePointStructThingMaybe	{J}
0803A1FC	StoreItemAndGetUnitAttack	{J}
0804A27C	LoadOldUIPal	{J}
0804A27C	LoadNewUIPal	{J}
0804A2AC	LoadOldUIImage	{J}
0804A2AC	LoadNewUIImage	{J}
0804AA0C	NewMenu_DefaultAdjusted	{J}
0804AA3C	NewMenu_DefaultChild	{J}
0804A9FA	NewMenu_Default	{J}
0804AC78	EndAllMenus	{J}
0804AC90	Menu_CallDefinedConstructors	{J}
0804AE18	Menu_Idle	{J}
0804AF18	Menu_HandleDirectionInputs	{J}
0804AFFE	Menu_HandleSelectInputs	{J}
0804B08C	Menu_GetCursorGfxCurrentPosition	{J}
0804B0D4	MenuCommand_UsabilityAlways	{J}
0804B0D8	UsabilityGrayed	{J}
0804B0DC	UsabilityNever	{J}
0804B210	Menu_CallTextBox	{J}
0804B376	ClearMenuRelatedList	{J}
0804B4D8	AddTarget	{J}
0804B52C	LinkTargets	{J}
0804B574	TargetSelection_GetRealCursorPosition	{J}
0804B58A	TargetSelection_Loop	{J}
0804B664	NewTargetSelection	{J}
0804AC90	EndTargetSelection	{J}
0804B710	TargetSelection_HandleMoveInput	{J}
0804B78C	TargetSelection_HandleSelectInput	{J}
0804B824	GetFarthestTargetIndex	{J}
0804B884	LinkTargetsOrdered	{J}
0804B938	GetFirstTargetPointer	{J}
0804B988	NewEkrBattleDeamon	{J}
0804B9F4	NewEkrBattle	{J}
0804BA60	InBattleMainRoutine	{J}
0804BB04	MainUpdate_804FEE4	{J}
0804BB84	ekrBattle_Init	{J}
0804BC18	ekrBattle_8050000	{J}
0804BC6C	ekrBattle_8050054	{J}
0804BD0A	ekrBattle_80500F0	{J}
0804BD4C	ekrBattle_8050134	{J}
0804BDFC	ekrBattle_8050224	{J}
0804BE1C	ekrBattle_8050244	{J}
0804BE66	ekrBattle_8050290	{J}
0804BE84	ekrBattle_80502B0	{J}
0804BED8	ekrBattle_8050304	{J}
0804BF0C	ekrBattle_8050338	{J}
0804C008	ekrBattle_8050440	{J}
0804C130	ekrBattle_80505EC	{J}
0804C144	ekrBattle_8050600	{J}
0804C1C8	ekrBattle_8050684	{J}
0804C20C	ekrBattle_80506C8	{J}
0804C3F2	ekrBattle_80508F0	{J}
0804C440	ekrBattle_8050940	{J}
0804C4AC	ekrBattle_80509A8	{J}
0804C58A	ekrBattle_8050A84	{J}
0804C5BA	ekrBattle_8050AB8	{J}
0804C608	ekrBattle_8050B08	{J}
0804C728	ekrBattle_WaitForLevelup_8050C6C	{J}
0804C74C	ekrBattle_MakePopups	{J}
0804C728	ekrBattle_WaitForPopup	{J}
08058BB6	ekrBattle_8050CCC	{J}
0804C834	ekrBattle_8050D88	{J}
0804C854	ekrBattle_8050DA8	{J}
0804C890	NewEkrLvlupFan	{J}
0804C9AC	NewEkrGauge	{J}
0804CC14	EndEkrGauge	{J}
0804CC28	EkrGauge_8051180	{J}
0804CC38	EkrGauge_8051190	{J}
0804CC48	EkrGauge_80511A0	{J}
0804CC58	EkrGauge_80511B0	{J}
0804CC68	EkrGauge_80511C0	{J}
0804CC78	EkrGauge_80511D0	{J}
0804CC8C	EkrGauge_80511E4	{J}
0804CCA0	EkrGauge_80511F8	{J}
0804CCB0	EkrGauge_8051208	{J}
0804CCC0	EkrGauge_8051218	{J}
0804CCD0	EkrGauge_8051228	{J}
0804CD2C	ekrGauge_Loop	{J}
0804D540	NewEkrDispUP	{J}
0804D5C4	EkrDispUP_8051B48	{J}
0804F7B8	StartSpellBG_FLASH	{J}
0804FF9C	DeleteEach6C_efxStatusUnit	{J}
08050348	NewEfxSpellCast	{J}
080507CC	SetSomethingSpellFxToTrue	{J}
080507D8	SetSomethingSpellFxToFalse	{J}
080507E4	ClearBG1Setup	{J}
080507F4	ClearBG1	{J}
0805091C	ThisMakesTheHPInSpellAnimGoAway	{J}
08050DA4	StoreSpellAnimTilesOBJ	{J}
08050DCC	StoreSpellAnimPaletteOBJ	{J}
08050DE8	StoreSpellAnimTilesBG	{J}
08051180	BeginAnimsOnBattleAnimations	{J}
08051214	MainUpdate_8055C68	{J}
080514B8	ekrBattleStarting_8055F00	{J}
08051558	ekrBattleStarting_8055FA0	{J}
080515A0	ekrBattleStarting_8055FE8	{J}
08051630	ekrBattleStarting_8056078	{J}
08052660	ekrBattleEnding_8056170	{J}
08051774	ekrBattleEnding_80561C8	{J}
080517D0	ekrBattleEnding_8056228	{J}
08051830	ekrBattleEnding_8056288	{J}
0805194C	ekrBattleEnding_8056390	{J}
08052278	NewEkrWindowAppear	{J}
0805235C	NewEkrNamewinAppear	{J}
080532F0	GetSpellAnimId	{J}
08053A7E	GetAllegienceId	{J}
08053AD2	GetSomeAISRelatedIndexMaybeByID	{J}
08053B5C	IsItemDisplayedInBattle	{J}
08053C3C	BattleAIS_ExecCommands	{J}
08054734	NewEkrChienCHR	{J}
08054764	RegisterAISSheetGraphics	{J}
08054F90	GetCoreAIStruct	{J}
08054FEC	GetSomeAISRelatedIndexMaybe	{J}
08055670	NewEfxAnimeDrvProc	{J}
080556A4	ExecAllAIS	{J}
08055D58	BeginAnimsOnBattle_Arena	{J}
08055D94	NewEkrTogiInitPROC	{J}
08055FF0	NewEkrTogiColor	{J}
08056024	EndEkrTogiColor	{J}
08056070	StartSpellAnimation	{J}
080569B8	StartSpellThing_MagicQuake	{J}
080569FC	Loop6C_efxMagicQUAKE	{J}
08056BC8	StartSpellAnimDummy	{J}
08056BEC	Loop6C_efxDummymagic	{J}
08056C40	StartSpellAnimHandAxe	{J}
08056C40	StartSpellAnimArrow	{J}
08057120	StartSpellAnimJavelin	{J}
08057664	StartSpellAnimSong	{J}
08057664	StartSpellAnimDance	{J}
08058120	StartSpellAnimFireBreath	{J}
0805843C	StartSpellAnimIceBreath	{J}
08057C28	StartSpellAnimDarkBreath	{J}
08057C60	Loop6C_efxDarkbreath	{J}
0805882C	StartSpellAnimThunder	{J}
08058868	Loop6C_efxThunder	{J}
08058B28	StartSpellAnimFire	{J}
08058B6C	StartSpellAnimElfire	{J}
08058BB0	Loop6C_efxFire	{J}
08058D18	Loop6C_efxFireBG	{J}
08058E44	StartSubSpell_efxFireHITBG	{J}
08058F2C	StartSubSpell_efxElfireBG	{J}
08058FF8	StartSubSpell_efxElfireBGCOL	{J}
08059084	StartSubSpell_efxElfireOBJ	{J}
08057F84	StartSpellAnimFimbulvetr	{J}
08057F84	StartSpellAnimNosferatu	{J}
08057FC0	Loop6C_efxResire	{J}
0805A838	StartSpellAnimPurge	{J}
0805B678	StartSpellAnimDivine	{J}
0805B6B4	DivineSfxLoop	{J}
0805B678	StartSpellAnimFenrir	{J}
0805D1D8	StartSpellAnimHeal	{J}
0805D328	StartSpellAnimMend	{J}
0805D328	StartSpellAnimRecover	{J}
08059138	StartSpellAnimSilence	{J}
08059138	StartSpellAnimSleep	{J}
0805A090	StartSpellAnimHammerne	{J}
0805EE84	StartSpellAnimBerserk	{J}
0805882C	StartSpellAnimShine	{J}
08062350	StartSpellAnimLuna	{J}
080615C4	StartSpellAnimAura	{J}
08060EB0	Loop6C_efxIvaldi	{J}
08060E0C	StartSpellOBJ_IvaldiFall	{J}
08060E0C	StartSpellOBJ_IvaldiSideWash	{J}
080607F6	Loop6C_efxIvaldiOBJSideWash	{J}
08062350	StartSpellAnimStone	{J}
08062350	StartSpellAnimEvilEye	{J}
08062350	StartSpellAnimNaglfar	{J}
080839D8	NewMapPoisonEffect	{J}
080839D8	StartMapAnimTargetUnitWarpRingProcs	{J}
0808ECE0	GetCurrentChapterBallistae2Ptr	{J}
0808A0FA	CallRouteSplitMenu	{J}
08084DD2	MenuCommand_DrawRouteSplit	{J}
08080FB8	DrawUnitScreenSupportList	{J}
080810A8	DrawUnitWeaponRank	{J}
080829F4	New6CRText	{J}
0808512C	GetCameraMovementSpeedMaybe	{J}
08085254	Loop6CUI1_DisplayTransition	{J}
080853CC	Loop6CUI1_HideTransition	{J}
08085B0C	InitMinimugBoxMaybe	{J}
080861DC	Loop6CUI1_Hidden	{J}
08086288	Loop6CUI1_Displayed	{J}
080863B4	Init6CUI2	{J}
080863E0	Loop6CUI2	{J}
080850D8	DeletePlayerPhaseInterface6Cs	{J}
08086960	Loop16CPI	{J}
08086BB8	Loop26CPI	{J}
08086C00	Loop46CPI	{J}
08087004	MinimalVBlankHandler	{J}
08087B48	NewChapterStatusScreen	{J}
080A99B4	__malloc_unlock_1	{J}
0808EAF4	SortPlayerUnitsForPrepScreen	{J}
08090DBC	Delete6CMenuScroll	{J}
08090DD0	Make6CMenuScroll	{J}
08091A74	SomethingPrepListRelated	{J}
08096464	StoreConvoyWeaponIconGraphics	{J}
0809EF08	LoadSomeUnitStatThingUnlockIdk	{J}
0809EF88	SaveSomeUnitStatThingUnlockIdk	{J}
0809F0E8	GetSaveDataOffsetPointer	{J}
0809F344	SaveLocalEventIndexes	{J}
0809F364	SaveGlobalEventIndexes	{J}
0809F384	LoadLocalEventIds	{J}
0809F384	LoadGlobalEventIds	{J}
0809F908	SetSomeUnitStatThingUnlockMaybeIdk	{J}
0809F4C4	__malloc_unlock_3	{J}
080A0470	LoadBWLEntries	{J}
080A04B8	SaveBWLEntries	{J}
080A04F0	GetChapterWinDataEntry	{J}
080A053C	GetWonChapterCount	{J}
080A05A0	RegisterChapterTimeAndTurnCount	{J}
080A0628	GetGameTotalTurnCount	{J}
080A067C	GetGameTotalTime	{J}
080A06BC	GetGameTotalTurnCount2	{J}
080A0938	BWL_IncrementMoveValue	{J}
080A0978	BWL_IncrementStatScreenViews	{J}
080A09B8	BWL_IncrementDeployCountMaybe	{J}
080A0A08	BWL_AddTilesMoved	{J}
080A0A68	BWL_AddExpGained	{J}
080A0AC8	StoreSomeUnitSetFlags	{J}
080A0C14	BWL_AddFavoritismValue	{J}
080A0EDC	BWL_GetEntry	{J}
080A0F14	Set0203EDB4	{J}
080A0F3C	Load0203EDB4	{J}
080A119C	SaveGame	{J}
080A13E8	SaveUnit	{J}
080A1824	LoadSavedUnit	{J}
080A2054	UnpackUnitStructFromSuspend	{J}
080A226C	SaveTrapStructs	{J}
080A466C	Loop6C_savemenu	{J}
080A5AA0	Make6C_savemenu	{J}
080A5B0C	Make6C_savemenu2	{J}
080A5B20	savemenu_SetDifficultyChoice	{J}
080A6908	New6C_savedraw	{J}
080AA1FC	_CallDifferedLoop	{J}
080AA20C	Get6CDifferedLoop6C	{J}
080AA230	DeleteEach6CDifferedLoop	{J}
080AA24C	Find6CDifferedLoop	{J}
080AB040	FadeInOut_Init	{J}
080AB054	FadeIn_Loop	{J}
080AB098	FadeOut_Loop	{J}
080AB0DE	FadeInOut_DisableGfx	{J}
080AB134	FadeInExists	{J}
080AB14C	FadeOutExists	{J}
080AB164	NewFadeIn	{J}
080AB188	NewFadeOut	{J}
080B9CF4	WorldMap_Destruct	{J}
080B63AC	EndWM	{J}
080B5D90	WM_PutClassSprite	{J}
080B5D90	WM_PutCharSprite	{J}
080A9336	Initialize6CIntroSequence	{J}
080C0558	DivArm	{J}
080C05B8	SRAMLoader	{J}
080C05F8	SRAMTransfer	{J}
080C0638	SaveChecker	{J}
080C071C	SRAMTransfer_WithCheck	{J}

0841C754	:0841C773	MMBAllyPalette	{J}
0841C774	:0841C793	MMBEnemyPalette	{J}
0841C794	:0841C7B3	MMBNPCPal	{J}

0840453C	:0840455B	MMBAllyPalette	{U}
0840455C	:0840457B	MMBEnemyPalette	{U}
0840457C	:0840459B	MMBNPCPal	{U}

0807AA5C	敵全滅条件	{J}
08079FE8	敵全滅条件	{U}

080ABC04	サウンドルームの曲アンロック エリウッド編クリア条件	{J}
080ABC28	サウンドルームの曲アンロック ヘクトル編クリア条件	{J}
080ABC4C	サウンドルームの曲アンロック 収集率100%	{J}
080ABC5C	サウンドルームの曲アンロック 特殊条件の3曲	{J}
080AAD68	サウンドルームの曲アンロック 収集率100%	{U}
080AAD78	サウンドルームの曲アンロック 特殊条件の3曲	{U}

080823C8	StatusRMenu_Item0Loop	{J}
0808241C	StatusRMenu_Weapon0Getter	{J}
08022330	SeizeCommandUsability	{J}
08021EB4	AttackCommandEffect	{J}
08022E68	DisplayUnitStandingStaff	{J}
08022EB0	HideMoveRangeGraphicsWrapperByStaff	{J}
08022494	PlayCommandUsability	{J}
0802250C	PlayOrDanceCommandEffect	{J}
080224D0	DanceCommandEffect	{J}
08021C60	RescueCommandEffect	{J}
08022FAC	TalkCommandUsability	{J}
08023038	SupportCommandUsability	{J}
08023138	ChestCommandUsability	{J}
080230D0	DoorCommandUsability	{J}
08023280	ArmoryCommandEffect	{J}
08023280	VendorCommandEffect	{J}
08023328	SecretCommandEffect	{J}
08021C5C	TradeCommandEffect	{J}
08021A0C	UnitCommandEffect	{J}
08021A3C	CommandEffect	{J}
0801C164	DebugReleaseEntryCommandEffect	{J}
0801C05C	DebugContinueChpCommandUsability	{J}
0801BFE8	DebugManualContCommandUsability	{J}
08022C10	YesCommandEffect	{J}
08022828	NoCommandEffect	{J}
08022B68	TradeCommandEffect	{J}
08022B9C	DiscardCommandEffect	{J}
080227C4	ItemSelectMenuOnHover	{J}
080227D4	ItemSelectMenuHide	{J}
080227C4	SendToConvoyMenuOnHover	{J}
080227D4	SendToConvoyMenuHide	{J}
0801DE18	SendToConvoyMenuEffect	{J}
0801DEB0	SendToConvoyMenuIdel	{J}
08022374	SeizeCommandEffect	{J}
08023A84	Attack2CommandUsability	{J}
08022D84	StaffCommandUsability	{J}
08022DFC	StaffCommandEffect	{J}
080239AC	ExitCommandUsability	{J}
080239DC	ExitCommandEffect	{J}
08023454	StealCommandEffect	{J}
08022FF0	TalkCommandEffect	{J}
08023088	SupportCommandEffect	{J}
08022394	VisitCommandUsability	{J}
08022404	VisitCommandEffect	{J}
08023174	ChestCommandEffect	{J}
08023110	DoorCommandEffect	{J}
080232F4	SecretCommandUsability	{J}
0802324C	ArmoryCommandUsability	{J}
08023280	ArmoryCommandEffect	{J}
080232A0	VendorCommandUsability	{J}
080232D4	VendorCommandEffect	{J}
08023348	ArenaCommandUsability	{J}
08023398	ArenaCommandEffect	{J}
08021D58	GiveCommandEffect	{J}
08021D78	TakeCommandUsability	{J}
08021DC0	TakeCommandEffect	{J}
080225F4	ItemCommandUsability	{J}
08022288	TradeCommandUsability	{J}
080222DC	TradeCommandEffect	{J}
08023198	SupplyCommandUsability	{J}
0802322C	SupplyCommandEffect	{J}
080233E0	StatusCommandUsability	{J}
080233F8	StatusCommandEffect	{J}
08021ABC	WaitCommandEffect	{J}
080310FC	PreparationCommandEffect	{J}
080219BC	SusspendCommandUsability	{J}
080219D4	SusspendCommandEffect	{J}
08021A28	OptionCommandEffect	{J}
08081668	StatusRMenu_Item0Loop	{U}
080816BC	StatusRMenu_Weapon0Getter	{U}
08021EB8	SeizeCommandUsability	{U}
08021A3C	AttackCommandEffect	{U}
080229F0	DisplayUnitStandingStaff	{U}
08022A38	HideMoveRangeGraphicsWrapperByStaff	{U}
0802201C	PlayCommandUsability	{U}
08022094	PlayOrDanceCommandEffect	{U}
08022058	DanceCommandEffect	{U}
080217E8	RescueCommandEffect	{U}
08022B34	TalkCommandUsability	{U}
08022BC0	SupportCommandUsability	{U}
08022CC0	ChestCommandUsability	{U}
08022C58	DoorCommandUsability	{U}
08022E08	ArmoryCommandEffect	{U}
08022E08	VendorCommandEffect	{U}
08022E08	SecretCommandEffect	{U}
080217E4	TradeCommandEffect	{U}
08021594	UnitCommandEffect	{U}
080215C4	CommandEffect	{U}
0801BDC0	DebugReleaseEntryCommandEffect	{U}
0801BCAC	DebugContinueChpCommandUsability	{U}
0801BC38	DebugManualContCommandUsability	{U}
08022798	YesCommandEffect	{U}
080223B0	NoCommandEffect	{U}
080226F0	TradeCommandEffect	{U}
08022724	DiscardCommandEffect	{U}
0802234C	ItemSelectMenuOnHover	{U}
0802235C	ItemSelectMenuHide	{U}
0802234C	SendToConvoyMenuOnHover	{U}
0802235C	SendToConvoyMenuHide	{U}
0801DB0C	SendToConvoyMenuIdel	{U}
08021EFC	SeizeCommandEffect	{U}
08022984	StaffCommandEffect	{U}
08023520	ExitCommandUsability	{U}
08023550	ExitCommandEffect	{U}
08022FC8	StealCommandEffect	{U}
08022B78	TalkCommandEffect	{U}
08022B78	SupportCommandEffect	{U}
08021F1C	VisitCommandUsability	{U}
08022CFC	ChestCommandEffect	{U}
08022C98	DoorCommandEffect	{U}
08022E08	ArmoryCommandEffect	{U}
08022E08	VendorCommandEffect	{U}
08022ED0	ArenaCommandUsability	{U}
080217E8	GiveCommandEffect	{U}
08021900	TakeCommandUsability	{U}
080217E8	TakeCommandEffect	{U}
0802217C	ItemCommandUsability	{U}
08021E10	TradeCommandUsability	{U}
08021E64	TradeCommandEffect	{U}
08022D20	SupplyCommandUsability	{U}
08022DB4	SupplyCommandEffect	{U}
08030C10	PreparationCommandEffect	{U}
0802155C	SusspendCommandEffect	{U}
080215B0	OptionCommandEffect	{U}
08067F90	Command85	{J}
0800B2CC	EventEngine_Loop	{J}
0800D5E8	EventEngineSub_Loop	{J}
080677A4	Command85	{U}
0800B390	EventEngine_Loop	{U}
0800D6D8	EventEngineSub_Loop	{U}

083A7EC4	:083B96C2	ボツデータ 利用されていないタイルアニメーションデータだと思われる	{J}
083A1B4C	:083B334A	ボツデータ 利用されていないタイルアニメーションデータだと思われる	{U}

0807A9D0	エルクが生存しているか判定	{J}
0807A9C0	セーラが生存しているか判定	{J}
0807AE2C	軍師がいないか判定	{J}
0807A7F0	マーカスが生存しているか判定	{J}
0807A9E0	プリシラが生存しているか判定	{J}
0807AB90	ヒースが生存しているか判定	{J}
0807AD64	範囲に入ったのが自軍のか判定	{J}
0807AC44	ニニアンと支援Aか判定	{J}
0807AC30	リンと支援Aか判定	{J}
0807AC58	フィオーラと支援Aか判定	{J}
0807AC44	ニニアンと支援Aか判定	{J}
0807AC30	リンと支援Aか判定	{J}
0807AC80	フロリーナが生存しているか判定	{J}
0807AC6C	リンとヘクトルが支援Aか判定	{J}
0807AC94	ファリナが生存しているか判定	{J}
0807A830	マシューが生存しているか判定	{J}
0807A970	ホークアイが生存しているか判定	{J}
0807AB30	キシュナが生存しているか判定	{J}
0807DDDC	異伝へ行けるかの判定	{J}
0807DD3C	キアラン兵が一人でも生存しているか判定	{J}
0807DD24	キアラン兵が二人生存しているか判定	{J}
0807DD0C	キアラン兵が全員生存しているか判定	{J}
0807ABF0	アイオンが生存しているか判定	{J}
0807DD54	誰かがファーガスに隣接しているか判定	{J}
0807A880	セーラが生存しているか判定	{J}
0807A800	レベッカが生存しているか判定	{J}
0807A8F0	ウィルが生存しているか判定	{J}
0807DA48	ドルカスを仲間にしているか判定	{J}
0807A870	ドルカスが生存しているか判定	{J}
0807A8A0	ラスが生存しているか判定	{J}
0807AB40	キシュナのモルフが生存しているか判定	{J}
0807A9E0	プリシラが生存しているか判定	{J}
0807DAF4	プリシラがいる村が無事か判定	{J}

0807A3B8	軍師がいないか判定	{U}
0807A2F0	範囲に入ったのが自軍のか判定	{U}
08079F5C	エルクが生存しているか判定	{U}
08079F4C	セーラが生存しているか判定	{U}
08079D7C	マーカスが生存しているか判定	{U}
08079F6C	プリシラが生存しているか判定	{U}
0807A11C	ヒースが生存しているか判定	{U}
0807A1D0	ニニアンと支援Aか判定	{U}
0807A1BC	リンと支援Aか判定	{U}
0807A1E4	フィオーラと支援Aか判定	{U}
0807A1D0	ニニアンと支援Aか判定	{U}
0807A1BC	リンと支援Aか判定	{U}
0807A20C	フロリーナが生存しているか判定	{U}
0807A1F8	リンとヘクトルが支援Aか判定	{U}
0807A220	ファリナが生存しているか判定	{U}
08079DBC	マシューが生存しているか判定	{U}
08079EFC	ホークアイが生存しているか判定	{U}
0807A0BC	キシュナが生存しているか判定	{U}
0807D240	異伝へ行けるかの判定	{U}
0807D1F8	キアラン兵が一人でも生存しているか判定	{U}
0807D1E0	キアラン兵が二人生存しているか判定	{U}
0807D1C8	キアラン兵が全員生存しているか判定	{U}
0807A17C	アイオンが生存しているか判定	{U}
0807D210	誰かがファーガスに隣接しているか判定	{U}
08079E0C	セーラが生存しているか判定	{U}
08079D8C	レベッカが生存しているか判定	{U}
08079E7C	ウィルが生存しているか判定	{U}
0807CFC8	ドルカスを仲間にしているか判定	{U}
08079DFC	ドルカスが生存しているか判定	{U}
08079E2C	ラスが生存しているか判定	{U}
0807A0CC	キシュナのモルフが生存しているか判定	{U}
08079F6C	プリシラが生存しているか判定	{U}
0807CFF4	プリシラがいる村が無事か判定	{U}

08BBFD90	:08BC058F	デバッグ用のフォント画像	{J}
08B8590C	:08B8610B	デバッグ用のフォント画像	{U}
0809E3FC	謎パスワード生成して書き込み	{J}
0809EAAC	謎パスワード表示	{J}

0807E774	カーラが登場する条件の判定	{J}
0807D9E4	カーラが登場する条件の判定	{U}
08031A7C	ステージマップのアドレスを調べる GetChapterMapPointer	{J}
08031584	ステージマップのアドレスを調べる GetChapterMapPointer	{U}

08019624	LoadChapterMapPaletteOnly	{J}
0802E32C	LoadTitleAnimations2Only	{J}
08031AC0	GetChapterMapChangesPointer	{J}
08031AEC	GetChapterEventDataPointer	{J}
0801923C	LoadChapterMapPaletteOnly	{U}
0802DE6C	LoadTitleAnimations2Only	{U}
080315A0	GetChapterMapChangesPointer	{U}
08B7EFE4	:08B808AB	mask_point HUFFMAN TREE	{U}
08BB9328	:08BBB36F	mask_point HUFFMAN TREE	{J}


030049F0	フラグ 0x65-0x6C	{J}
030049F1	フラグ 0x6D-0x74	{J}
030049F2	フラグ 0x75-0x7C	{J}
030049F3	フラグ 0x7D-0x84	{J}
030049F4	フラグ 0x85-0x8C	{J}
030049F5	フラグ 0x8D-0x94	{J}
030049F6	フラグ 0x95-0x9C	{J}
030049F7	フラグ 0x9D-0xA4	{J}
030049F8	フラグ 0x01-0x08	{J}
030049F9	フラグ 0x09-0x10	{J}
030049FA	フラグ 0x11-0x18	{J}
030049FB	フラグ 0x19-0x20	{J}
030049FC	フラグ 0x21-0x28	{J}

03004AD0	フラグ 0x65-0x6C	{U}
03004AD1	フラグ 0x6D-0x74	{U}
03004AD2	フラグ 0x75-0x7C	{U}
03004AD3	フラグ 0x7D-0x84	{U}
03004AD4	フラグ 0x85-0x8C	{U}
03004AD5	フラグ 0x8D-0x94	{U}
03004AD6	フラグ 0x95-0x9C	{U}
03004AD7	フラグ 0x9D-0xA4	{U}
03004AD8	フラグ 0x01-0x08	{U}
03004AD9	フラグ 0x09-0x10	{U}
03004ADA	フラグ 0x11-0x18	{U}
03004ADB	フラグ 0x19-0x20	{U}
03004ADC	フラグ 0x21-0x28	{U}
08D6F71C	&EVENT	イベント GameOver	{J}
08CA749C	&EVENT	イベント GameOver	{U}
08BFF828	:08BFF841	顔画像関係のOAMの何か1	{J}
08BFF842	:08BFF85B	顔画像関係のOAMの何か2	{J}
08BFF85C	:08BFF881	顔画像関係のOAMの何か3	{J}
08BFF882	:08BFF8A7	顔画像関係のOAMの何か4	{J}
08BFF8A8	:08BFF8D9	顔画像関係のOAMの何か5	{J}
08BFF8DA	:08BFF90B	顔画像関係のOAMの何か6	{J}
08BFF90C	:08BFF93D	顔画像関係のOAMの何か7	{J}
08BFF93E	:08BFF96F	顔画像関係のOAMの何か8	{J}
08B90678	:08B90691	顔画像関係のOAMの何か1	{U}
08B90692	:08B906AB	顔画像関係のOAMの何か2	{U}
08B906AC	:08B906D1	顔画像関係のOAMの何か3	{U}
08B906D2	:08B906F7	顔画像関係のOAMの何か4	{U}
08B906F8	:08B90729	顔画像関係のOAMの何か5	{U}
08B9072A	:08B9075B	顔画像関係のOAMの何か6	{U}
08B9075C	:08B9078D	顔画像関係のOAMの何か7	{U}
08B9078E	:08B907BF	顔画像関係のOAMの何か8	{U}
08006C48	どの顔画像のOAMを利用するか決定する	{J}
08006DB8	どの顔画像のOAMを利用するか決定する	{U}

08004960	_6CSleepLoop	{J}
08004A84	_6CSleepLoop	{U}

@BGMSTRUCT@00	byte	音楽関係のフラグ1
@BGMSTRUCT@02	short	待機しているBGM
@BGMSTRUCT@04	short	再生しているBGM
@BGMSTRUCT@06	byte	音楽関係のフラグ2
@BGMSTRUCT@07	byte	音楽関係のフラグ3

02024E14	@BGMSTRUCT	BGM	{J}
02024E1C	@BGMSTRUCT	BGM	{U}

080c57b4	CallARM_FillTileRect	{U}
080C0C20	CallARM_FillTileRect	{J}

0807C1E8	竜の火炎エフェクト1	{J}
0807B774	竜の火炎エフェクト1	{U}
0807C210	竜の火炎エフェクト2	{J}
0807B79C	竜の火炎エフェクト2	{U}

08B909B8	RAMのテキストバッファへのポインタ	{U}
08BFFB68	RAMのテキストバッファへのポインタ	{J}
03000040	TextBufferOffsetで次に表示する位置	{U}
0300007C	価格などの数字 文章中の @0080@0005 で取得できる数字	{U}
03000040	TextBufferOffsetで次に表示する位置	{J}
0300007C	価格などの数字 文章中の @0080@0005 で取得できる数字	{J}
0802E3AC	特種な常時条件:チュートリアルイベントの発動	{J}
0802DEEC	特種な常時条件:チュートリアルイベントの発動	{U}

08053040	GetBattleAnimationId	{J}
08052858	GetBattleAnimationId	{U}
@BATTLE_ANIME@00	左側	戦闘アニメID-1
@BATTLE_ANIME@02	右側	戦闘アニメID-1
0203E066	@BATTLE_ANIME	戦闘アニメ関係1	{J}
0203DFF0	@BATTLE_ANIME	戦闘アニメ関係2	{J}
0203E08E	@BATTLE_ANIME	戦闘アニメ関係1	{U}
0203E018	@BATTLE_ANIME	戦闘アニメ関係2	{U}


08050e10	フレームとTSA画像による魔法のアニメ	{J}
0805081c	フレームとTSA画像による魔法のアニメ2	{J}
08050634	フレームとTSA画像による魔法のアニメ	{U}
08050040	フレームとTSA画像による魔法のアニメ2	{U}

080C86D4	&PALETTE	何かのパレット	01	{J}
0818BC3C	&PALETTE	何かのパレット	02	{J}
08190168	&PALETTE	何かのパレット	03	{J}
08190188	&PALETTE	何かのパレット	04	{J}
081901A8	&PALETTE	何かのパレット	05	{J}
081901C8	&PALETTE	何かのパレット	06	{J}
081901E8	&PALETTE	何かのパレット	07	{J}
08190228	&PALETTE	何かのパレット	08	{J}
08190268	&PALETTE	何かのパレット	09	{J}
081902A8	&PALETTE	何かのパレット	10	{J}
081902C8	&PALETTE	何かのパレット	11	{J}
08190BDC	&PALETTE	何かのパレット	12	{J}
08191054	&PALETTE	何かのパレット	13	{J}
08191B04	&PALETTE	何かのパレット	14	{J}
08192F48	&PALETTE	何かのパレット	15	{J}
08192F68	&PALETTE	何かのパレット	16	{J}
08193CB8	&PALETTE	何かのパレット	17	{J}
0819436C	&PALETTE	何かのパレット	18	{J}
08194F8C	&PALETTE	何かのパレット	19	{J}
0819510C	&PALETTE	何かのパレット	20	{J}
08195668	&PALETTE	何かのパレット	21	{J}
08196DAC	&PALETTE	何かのパレット	22	{J}
081980C0	&PALETTE	何かのパレット	23	{J}
08198AE4	&PALETTE	何かのパレット	24	{J}
08198D78	&PALETTE	何かのパレット	25	{J}
081A7F00	&PALETTE	何かのパレット	26	{J}
081ACA20	&PALETTE	何かのパレット	27	{J}
081BD514	&PALETTE	何かのパレット	28	{J}
081BD6C4	&PALETTE	何かのパレット	29	{J}
081BEF08	&PALETTE	何かのパレット	30	{J}
081BF2E0	&PALETTE	何かのパレット	31	{J}
081C1CA4	&PALETTE	何かのパレット	32	{J}
081C6C34	&PALETTE	何かのパレット	33	{J}
081C85F0	&PALETTE	何かのパレット	34	{J}
081C8AF8	&PALETTE	何かのパレット	35	{J}
081CD738	&PALETTE	何かのパレット	36	{J}
081CD798	&PALETTE	何かのパレット	37	{J}
081CD818	&PALETTE	何かのパレット	38	{J}
081CD858	&PALETTE	何かのパレット	39	{J}
081CD938	&PALETTE	何かのパレット	40	{J}
081CD978	&PALETTE	何かのパレット	41	{J}
081CD9D8	&PALETTE	何かのパレット	42	{J}
081CD9F8	&PALETTE	何かのパレット	43	{J}
081CDA18	&PALETTE	何かのパレット	44	{J}
081CF79C	&PALETTE	何かのパレット	45	{J}
081CF7DC	&PALETTE	何かのパレット	46	{J}
081D0E50	&PALETTE	何かのパレット	47	{J}
081D3AB0	&PALETTE	何かのパレット	48	{J}
081D7BF0	&PALETTE	何かのパレット	49	{J}
081D7F74	&PALETTE	何かのパレット	50	{J}
081D83B0	&PALETTE	何かのパレット	51	{J}
081D8E2C	&PALETTE	何かのパレット	52	{J}
081DBD84	&PALETTE	何かのパレット	53	{J}
081DDA48	&PALETTE	何かのパレット	54	{J}
0827BE0C	&PALETTE	何かのパレット	55	{J}
083FB16C	&PALETTE	何かのパレット	56	{J}
083FB664	&PALETTE	何かのパレット	57	{J}
083FB8E4	&PALETTE	何かのパレット	58	{J}
083FBC24	&PALETTE	何かのパレット	59	{J}
083FDAAC	&PALETTE	何かのパレット	60	{J}
083FDB20	&PALETTE	何かのパレット	61	{J}
083FF508	&PALETTE	何かのパレット	62	{J}
083FFB48	&PALETTE	何かのパレット	63	{J}
08402A4C	&PALETTE	何かのパレット	64	{J}
0840364C	&PALETTE	何かのパレット	65	{J}
0840366C	&PALETTE	何かのパレット	66	{J}
084038AC	&PALETTE	何かのパレット	67	{J}
08404BB4	&PALETTE	何かのパレット	68	{J}
084061F8	&PALETTE	何かのパレット	69	{J}
08407E9C	&PALETTE	何かのパレット	70	{J}
08408CC8	&PALETTE	何かのパレット	71	{J}
08409020	&PALETTE	何かのパレット	72	{J}
08409040	&PALETTE	何かのパレット	73	{J}
0841B080	&PALETTE	何かのパレット	74	{J}
0841BB50	&PALETTE	何かのパレット	75	{J}
0841BBB0	&PALETTE	何かのパレット	76	{J}
0841BC44	&PALETTE	何かのパレット	77	{J}
0841D100	&PALETTE	何かのパレット	78	{J}
0841DE88	&PALETTE	何かのパレット	79	{J}
0841E45C	&PALETTE	何かのパレット	80	{J}
0841E7F4	&PALETTE	何かのパレット	81	{J}
0841EC70	&PALETTE	何かのパレット	82	{J}
08428A40	&PALETTE	何かのパレット	83	{J}
08428DB4	&PALETTE	何かのパレット	84	{J}
084291AC	&PALETTE	何かのパレット	85	{J}
08429638	&PALETTE	何かのパレット	86	{J}
0842971C	&PALETTE	何かのパレット	87	{J}
0842B4BC	&PALETTE	何かのパレット	88	{J}
0842D710	&PALETTE	何かのパレット	89	{J}
0842D730	&PALETTE	何かのパレット	90	{J}
08432594	&PALETTE	何かのパレット	91	{J}
08432694	&PALETTE	何かのパレット	92	{J}
08432DE4	&PALETTE	何かのパレット	93	{J}
08433A90	&PALETTE	何かのパレット	94	{J}
08434448	&PALETTE	何かのパレット	95	{J}
084352DC	&PALETTE	何かのパレット	96	{J}
08436460	&PALETTE	何かのパレット	97	{J}
0843927C	&PALETTE	何かのパレット	98	{J}
0843F084	&PALETTE	何かのパレット	99	{J}
0843F144	&PALETTE	何かのパレット	A0	{J}
0843F164	&PALETTE	何かのパレット	A1	{J}
0843FDC8	&PALETTE	何かのパレット	A2	{J}
08440300	&PALETTE	何かのパレット	A3	{J}
0844182C	&PALETTE	何かのパレット	A4	{J}
0844186C	&PALETTE	何かのパレット	A5	{J}
0844C614	&PALETTE	何かのパレット	A6	{J}
0844C9E8	&PALETTE	何かのパレット	A7	{J}
0844F1E8	&PALETTE	何かのパレット	A8	{J}
0844F64C	&PALETTE	何かのパレット	A9	{J}
08452C74	&PALETTE	何かのパレット	B0	{J}
08452E70	&PALETTE	何かのパレット	B1	{J}
0860FE18	&PALETTE	何かのパレット	B2	{J}
08615F00	&PALETTE	何かのパレット	B3	{J}
08615F40	&PALETTE	何かのパレット	B4	{J}
08618CE0	&PALETTE	何かのパレット	B5	{J}
0861A360	&PALETTE	何かのパレット	B6	{J}
0861A380	&PALETTE	何かのパレット	B7	{J}
0861A3A0	&PALETTE	何かのパレット	B8	{J}
0861A3E0	&PALETTE	何かのパレット	B9	{J}
0861AB70	&PALETTE	何かのパレット	C0	{J}
08622C7C	&PALETTE	何かのパレット	C1	{J}
086284F8	&PALETTE	何かのパレット	C2	{J}
0862E778	&PALETTE	何かのパレット	C3	{J}
0862F448	&PALETTE	何かのパレット	C4	{J}
08630338	&PALETTE	何かのパレット	C5	{J}
0864ACF4	&PALETTE	何かのパレット	C6	{J}
08661544	&PALETTE	何かのパレット	C7	{J}
086C08D0	&PALETTE	何かのパレット	C8	{J}
086C10B4	&PALETTE	何かのパレット	C9	{J}
086C25FC	&PALETTE	何かのパレット	D0	{J}
086C3CF8	&PALETTE	何かのパレット	D1	{J}
08C01D0C	&PALETTE	何かのパレット	D2	{J}

081900E4	&PALETTE	何かのパレット	02	{U}
08194614	&PALETTE	何かのパレット	03	{U}
08194634	&PALETTE	何かのパレット	04	{U}
08194654	&PALETTE	何かのパレット	05	{U}
08194674	&PALETTE	何かのパレット	06	{U}
08194694	&PALETTE	何かのパレット	07	{U}
081946D4	&PALETTE	何かのパレット	08	{U}
08194714	&PALETTE	何かのパレット	09	{U}
08194754	&PALETTE	何かのパレット	10	{U}
08194774	&PALETTE	何かのパレット	11	{U}
08195088	&PALETTE	何かのパレット	12	{U}
08195500	&PALETTE	何かのパレット	13	{U}
08195FB0	&PALETTE	何かのパレット	14	{U}
081973F4	&PALETTE	何かのパレット	15	{U}
08197414	&PALETTE	何かのパレット	16	{U}
08198164	&PALETTE	何かのパレット	17	{U}
08198818	&PALETTE	何かのパレット	18	{U}
08199438	&PALETTE	何かのパレット	19	{U}
081995B8	&PALETTE	何かのパレット	20	{U}
08199B14	&PALETTE	何かのパレット	21	{U}
0819B258	&PALETTE	何かのパレット	22	{U}
0819C56C	&PALETTE	何かのパレット	23	{U}
0819CF90	&PALETTE	何かのパレット	24	{U}
0819D20C	&PALETTE	何かのパレット	25	{U}
081A71C8	&PALETTE	何かのパレット	26	{U}
081AA898	&PALETTE	何かのパレット	27	{U}
081B9790	&PALETTE	何かのパレット	28	{U}
081B98C8	&PALETTE	何かのパレット	29	{U}
081BABFC	&PALETTE	何かのパレット	30	{U}
081BAFD4	&PALETTE	何かのパレット	31	{U}
081BD758	&PALETTE	何かのパレット	32	{U}
081C23C8	&PALETTE	何かのパレット	33	{U}
080CBEA4	&PALETTE	何かのパレット	34	{U}
081C39A4	&PALETTE	何かのパレット	35	{U}
081C7EA4	&PALETTE	何かのパレット	36	{U}
081C7F04	&PALETTE	何かのパレット	37	{U}
081C7F84	&PALETTE	何かのパレット	38	{U}
081C7FC4	&PALETTE	何かのパレット	39	{U}
081C80A4	&PALETTE	何かのパレット	40	{U}
081C80E4	&PALETTE	何かのパレット	41	{U}
081C8144	&PALETTE	何かのパレット	42	{U}
081C8164	&PALETTE	何かのパレット	43	{U}
081C8184	&PALETTE	何かのパレット	44	{U}
081C9F08	&PALETTE	何かのパレット	45	{U}
081C9F48	&PALETTE	何かのパレット	46	{U}
081CB5BC	&PALETTE	何かのパレット	47	{U}
081CE21C	&PALETTE	何かのパレット	48	{U}
081D235C	&PALETTE	何かのパレット	49	{U}
081D26E0	&PALETTE	何かのパレット	50	{U}
081D2B1C	&PALETTE	何かのパレット	51	{U}
081D3598	&PALETTE	何かのパレット	52	{U}
081D6110	&PALETTE	何かのパレット	53	{U}
081D7DD4	&PALETTE	何かのパレット	54	{U}
08276198	&PALETTE	何かのパレット	55	{U}
083F46F0	&PALETTE	何かのパレット	56	{U}
083F4BE8	&PALETTE	何かのパレット	57	{U}
083F4E68	&PALETTE	何かのパレット	58	{U}
083F51A8	&PALETTE	何かのパレット	59	{U}
083F7030	&PALETTE	何かのパレット	60	{U}
083F70A4	&PALETTE	何かのパレット	61	{U}
083F8A8C	&PALETTE	何かのパレット	62	{U}
083F90CC	&PALETTE	何かのパレット	63	{U}
083FBFD0	&PALETTE	何かのパレット	64	{U}
083FCBAC	&PALETTE	何かのパレット	65	{U}
083FCBCC	&PALETTE	何かのパレット	66	{U}
083FCE0C	&PALETTE	何かのパレット	67	{U}
083FE11C	&PALETTE	何かのパレット	68	{U}
083FF760	&PALETTE	何かのパレット	69	{U}
08401404	&PALETTE	何かのパレット	70	{U}
08402230	&PALETTE	何かのパレット	71	{U}
08402588	&PALETTE	何かのパレット	72	{U}
084025A8	&PALETTE	何かのパレット	73	{U}
084032B4	&PALETTE	何かのパレット	74	{U}
08403914	&PALETTE	何かのパレット	75	{U}
08403974	&PALETTE	何かのパレット	76	{U}
08403A08	&PALETTE	何かのパレット	77	{U}
08404BBC	&PALETTE	何かのパレット	78	{U}
08405670	&PALETTE	何かのパレット	79	{U}
08405B0C	&PALETTE	何かのパレット	80	{U}
08405EA4	&PALETTE	何かのパレット	81	{U}
0840624C	&PALETTE	何かのパレット	82	{U}
0840DCE4	&PALETTE	何かのパレット	83	{U}
0840E058	&PALETTE	何かのパレット	84	{U}
081C7F84	&PALETTE	何かのパレット	85	{U}
0840E3EC	&PALETTE	何かのパレット	86	{U}
0840E4EC	&PALETTE	何かのパレット	87	{U}
0840E978	&PALETTE	何かのパレット	88	{U}
0840F8B0	&PALETTE	何かのパレット	89	{U}
0840F8D0	&PALETTE	何かのパレット	90	{U}
084138F0	&PALETTE	何かのパレット	91	{U}
084139F0	&PALETTE	何かのパレット	92	{U}
08413D0C	&PALETTE	何かのパレット	93	{U}
084150C0	&PALETTE	何かのパレット	95	{U}
08415AA0	&PALETTE	何かのパレット	96	{U}
0841625C	&PALETTE	何かのパレット	97	{U}
08418D40	&PALETTE	何かのパレット	98	{U}
0841E2D8	&PALETTE	何かのパレット	99	{U}
0841E398	&PALETTE	何かのパレット	A0	{U}
0841E3B8	&PALETTE	何かのパレット	A1	{U}
0841EFEC	&PALETTE	何かのパレット	A2	{U}
0841F524	&PALETTE	何かのパレット	A3	{U}
084205A8	&PALETTE	何かのパレット	A4	{U}
084205E8	&PALETTE	何かのパレット	A5	{U}
084221D4	&PALETTE	何かのパレット	A6	{U}
084225A8	&PALETTE	何かのパレット	A7	{U}
08424CD8	&PALETTE	何かのパレット	A8	{U}
0842513C	&PALETTE	何かのパレット	A9	{U}
0842535C	&PALETTE	何かのパレット	B0	{U}
08425558	&PALETTE	何かのパレット	B1	{U}
085D5FEC	&PALETTE	何かのパレット	B2	{U}
085DC0D4	&PALETTE	何かのパレット	B3	{U}
085DC114	&PALETTE	何かのパレット	B4	{U}
085DE54C	&PALETTE	何かのパレット	B5	{U}
085DFA70	&PALETTE	何かのパレット	B6	{U}
085DFA90	&PALETTE	何かのパレット	B7	{U}
085DFAB0	&PALETTE	何かのパレット	B8	{U}
085DFAF0	&PALETTE	何かのパレット	B9	{U}
085E0280	&PALETTE	何かのパレット	C0	{U}
085E9AD4	&PALETTE	何かのパレット	C1	{U}
085E9D2C	&PALETTE	何かのパレット	C2	{U}
085ECDF4	&PALETTE	何かのパレット	C3	{U}
085ED1C4	&PALETTE	何かのパレット	C4	{U}
085EE02C	&PALETTE	何かのパレット	C5	{U}
086005A4	&PALETTE	何かのパレット	C6	{U}
08616D74	&PALETTE	何かのパレット	C7	{U}
08673D38	&PALETTE	何かのパレット	C8	{U}
0867451C	&PALETTE	何かのパレット	C9	{U}
086758C0	&PALETTE	何かのパレット	D0	{U}
08676E04	&PALETTE	何かのパレット	D1	{U}
08B92A48	&PALETTE	何かのパレット	D2	{U}

08034884	制圧できるか判定する	{U}

//パッチで予約される領域
0203AB00	:0203AB0F	UnitSelectSFXパッチ	ユニット選択時に音を再生するパッチで利用	{J}
0203AB00	:0203AB0F	UnitSelectSFXパッチ	ユニット選択時に音を再生するパッチで利用	{U}

//Class Change (Promotion)
08B1271C	ccramify	PROCS	Promotion(Class Change)	{U}
08B12A08	CCRamifyMenuSelect	PROCS	Promotion(Class Change)	{U}
08D8C9C0	ccramify	PROCS	Promotion(Class Change)	{J}
08D8C9C0	CCRamifyMenuSelect	PROCS	Promotion(Class Change)	{J}

08064214	瞬殺アニメ(Silencer)	{J}
08063A2C	瞬殺アニメ(Silencer)	{U}
08062E30	瞬殺アニメのパレット設定	{J}
08062648	瞬殺アニメのパレット設定	{U}
082B99F0	&PALETTE	Silencer PAL1	{J}
082B3D7C	&PALETTE	Silencer PAL1	{U}
0801BC6C	DebugMenu_ErasedEffect	{J}
08006F1C	MinimugWriter	{U}
08007428	一般兵の顔画像をメモリに転送する	{J}
08007598	一般兵の顔画像をメモリに転送する	{U}

08018FC8	GetUnitPortraitId	{J}
08018FE4	GetUnitMiniPortraitId	{J}
08019010	GetUnitLeader	{J}
08018BD8	GetUnitPortraitId	{U}
08018BF4	GetUnitMiniPortraitId	{U}
08018C20	GetUnitLeader	{U}


080164e8	GetItemPowBonus	{J}
080157a4	GetThread2SkipStack	{J}
08006320	AIS_ExecAll	{J}
08006490	AIS_ExecAll	{U}
08006840	ClearIntermediateOAMBuffer	DON'T CALL THIS YOURSELF (called in main loop); resets buffers	{J}
080069b0	ClearIntermediateOAMBuffer	DON'T CALL THIS YOURSELF (called in main loop); resets buffers	{U}

0802A964	SetupBattleStructForStaffUser	{J}
0802A4B4	SetupBattleStructForStaffUser	{U}
0802AA10	SetupBattleStructForStaffTarget	{J}
0802A560	SetupBattleStructForStaffTarget	{U}

0807931C	支援会話のBGMの指定	ただし、再生される曲はIDではなく限られる。実質利用不可	{J}
08078B4C	支援会話のBGMの指定	ただし、再生される曲はIDではなく限られる。実質利用不可	{U}

080075C8	一般兵の顔画像のパレットを転送する	{U}
08007458	一般兵の顔画像のパレットを転送する	{J}
080346A0	戦闘予測ダイアログのRMenu_Procs_BKSEL関係	{J}
080341C8	戦闘予測ダイアログのRMenu_Procs_BKSEL関係	{U}
08082A18	戦闘予測ダイアログがRMenuを登録するラッパー関数	{J}
08070A0C	戦闘予測ダイアログがRMenuを登録するラッパー関数	{U}
08CC26D4	:08CC2783	ゲームシステムが参照する文字列ID	{U}

080190B0	GetRescuingUnitNameId	{J}
080190E0	WriteStatusTextToRAM	{J}
08019108	GetROMClassStruct	{J}
08019120	GetROMCharStruct	{J}
0806d4a4	ClearMOVEUNITs	{J}
0806c2dc	MakeMOVEUNITForMapUnit	{J}
08018CC0	GetRescuingUnitNameId	{U}
08018D38	GetROMCharStruct	{U}
0806ccb8	ClearMOVEUNITs	{U}
0806baf0	MakeMOVEUNITForMapUnit	{U}
0805313C	戦闘アニメの床のタイルの画像IDを取得する	{J}
08053218	戦闘アニメの背景の画像IDを取得する	{J}
08052954	戦闘アニメの床のタイルの画像IDを取得する	{U}
08052A30	戦闘アニメの背景の画像IDを取得する	{U}
08005F70	ステータス画面用のフォントを読込む	{J}
080060E0	ステータス画面用のフォントを読込む	{U}
08000e60	Roll1RN	{U}
08000e38	Roll1RN	{J}
080CB51A	:080CB7E7	used by FEditor auto patching system FE7U	{U}
080BA640	攻略評価の画像をロード	{J}
080BAAB8	攻略評価の画像をロードするProcsを起動する	{J}
0803AF24	AiGetStaffAiIndex	{J}
0803AA70	AiGetStaffAiIndex	{U}
0803B104	AIの杖利用判定	ライブ	リライブ	リカバー	{J}
0803B27C	AIの杖利用判定	リブロー	レスキュー	{J}
0803B44C	AIの杖利用判定	リザーブ	{J}
0803B558	AIの杖利用判定	ワープ	{J}
0803B6B0	AIの杖利用判定	レスト	{J}
0803B8A0	AIの杖利用判定	サイレス	{J}
0803BA2C	AIの杖利用判定	スリープ	バーサク	{J}
0803BBB0	AIの杖利用判定	Ｍシールド	{J}
0803AC50	AIの杖利用判定	ライブ	リライブ	リカバー	{U}
0803ADC8	AIの杖利用判定	リブロー	レスキュー	{U}
0803AF98	AIの杖利用判定	リザーブ	{U}
0803B0A4	AIの杖利用判定	ワープ	{U}
0803B1FC	AIの杖利用判定	レスト	{U}
0803B3EC	AIの杖利用判定	サイレス	{U}
0803B578	AIの杖利用判定	スリープ	バーサク	{U}
0803B6FC	AIの杖利用判定	Ｍシールド	{U}
0802D596	天気の画像のスプライト番号	change light snow	{U}
0802D89D	天気の画像のスプライト番号	change heavy snow	{U}
08B961FF	天気の画像のスプライト番号	change rain1	{U}
08B96207	天気の画像のスプライト番号	change rain2	{U}
0802DBDE	天気の画像のスプライト番号	change BBQ	{U}
0802D76D	天気の画像のスプライト番号	change sandstorm	{U}
0802DD5D	天気の画像のスプライト番号	change clouds	{U}
0808e6a4	IsCharacterForceDeployed	{J}
0808E794	CanCharacterBePrepSwap	{J}
0808dd78	IsCharacterForceDeployed	{U}
0808DE68	CanCharacterBePrepSwap	{U}
080AAD7C	SoundRoom	% Completion modifier 1 (Changed from 100% to 75%)	{U}
080AAD94	SoundRoom	% Completion modifier 2 (Changed from 100% to 86% combined with the previous, 120% alone)	{U}
080AADEC	SoundRoom	Full song list (It also allowed to show more than 100 songs)	{U}
080AB654	SoundRoom	曲IDを表示する	{U}
080ABAB4	SoundRoom	指定した曲を再生する	{U}
080AC174	SoundRoom	再生時間を表示	{U}
080AC384	SoundRoom	曲名を表示	{U}
080AB440	SoundRoom	初回読み込み時に呼び出される1	{U}
080AB4EC	SoundRoom	曲を切り替えたときに背景CGを取得する	{U}
080AB548	SoundRoom	初回読み込み時に呼び出される2	{U}
080ABC60	SoundRoom	% Completion modifier 1 (Changed from 100% to 75%)	{J}
080ABC78	SoundRoom	% Completion modifier 2 (Changed from 100% to 86% combined with the previous, 120% alone)	{J}
080ABCD0	SoundRoom	Full song list (It also allowed to show more than 100 songs)	{J}
080AC538	SoundRoom	曲IDを表示する	{J}
080AC998	SoundRoom	指定した曲を再生する	{J}
080AD058	SoundRoom	再生時間を表示	{J}
080AD1A4	SoundRoom	曲名を表示	{J}
080AC324	SoundRoom	初回読み込み時に呼び出される1	{J}
080AC3D0	SoundRoom	曲を切り替えたときに背景CGを取得する	{J}
080AC42C	SoundRoom	初回読み込み時に呼び出される2	{J}


081911D4	&HEADERTSA	顔画像関係のタイル	{J}
0819128C	&HEADERTSA	FillTileRectされる何かのタイル	01	{J}
08409060	&HEADERTSA	FillTileRectされる何かのタイル	02	{J}
08404BD4	&HEADERTSA	FillTileRectされる何かのタイル	05	{J}
08191780	&HEADERTSA	FillTileRectされる何かのタイル	06	{J}
081CDA58	&HEADERTSA	FillTileRectされる何かのタイル	10	{J}
081BD6E4	&HEADERTSA	FillTileRectされる何かのタイル	29	{J}
0861A460	&HEADERTSA	FillTileRectされる何かのタイル	30	{J}

08191D7C	&ROMTCS	何かのROMTCSデータ	01	{J}
083F641C	&ROMTCS	何かのROMTCSデータ	02	{J}
08C00DEC	&NewPopupSimple	ポップアップするためのデータ	03	{J}
08C00D44	&NewPopupSimple	ポップアップするためのデータ	07	{J}
08C00D44	&NewPopupSimple	ポップアップするためのデータ	08	{J}

080C86D4	&PALETTE	何かのパレット	01	{J}
0818BC3C	&PALETTE	何かのパレット	02	{J}
08190168	&PALETTE	何かのパレット	03	{J}
08190188	&PALETTE	何かのパレット	04	{J}
081901A8	&PALETTE	何かのパレット	05	{J}
081901C8	&PALETTE	何かのパレット	06	{J}
081901E8	&PALETTE	何かのパレット	07	{J}
08190228	&PALETTE	何かのパレット	08	{J}
08190268	&PALETTE	何かのパレット	09	{J}
081902A8	&PALETTE	何かのパレット	10	{J}
081902C8	&PALETTE	何かのパレット	11	{J}
08190BDC	&PALETTE	何かのパレット	12	{J}
08191054	&PALETTE	何かのパレット	13	{J}
08191B04	&PALETTE	何かのパレット	14	{J}
08192F48	&PALETTE	何かのパレット	15	{J}
08192F68	&PALETTE	何かのパレット	16	{J}
08193CB8	&PALETTE	何かのパレット	17	{J}
0819436C	&PALETTE	何かのパレット	18	{J}
08194F8C	&PALETTE	何かのパレット	19	{J}
0819510C	&PALETTE	何かのパレット	20	{J}
08195668	&PALETTE	何かのパレット	21	{J}
08196DAC	&PALETTE	何かのパレット	22	{J}
081980C0	&PALETTE	何かのパレット	23	{J}
08198AE4	&PALETTE	何かのパレット	24	{J}
081A7F00	&PALETTE	何かのパレット	26	{J}
081ACA20	&PALETTE	何かのパレット	27	{J}
081BD514	&PALETTE	何かのパレット	28	{J}
081BD6C4	&PALETTE	何かのパレット	29	{J}
081BEF08	&PALETTE4	何かのパレット	30	{J}
08429638	&PALETTE	何かのパレット	31	{J}
081DBD64	&PALETTE	何かのパレット	32	{J}
081C6C34	&PALETTE	何かのパレット	33	{J}
081C85F0	&PALETTE	何かのパレット	34	{J}
081C8AF8	&PALETTE	何かのパレット	35	{J}
081CD738	&PALETTE	何かのパレット	36	{J}
081CD798	&PALETTE	何かのパレット	37	{J}
081CD818	&PALETTE	何かのパレット	38	{J}
081CD858	&PALETTE	何かのパレット	39	{J}
081CD938	&PALETTE	何かのパレット	40	{J}
081CD978	&PALETTE	何かのパレット	41	{J}
081CD9D8	&PALETTE	何かのパレット	42	{J}
081CD9F8	&PALETTE	何かのパレット	43	{J}
081CDA18	&PALETTE	何かのパレット	44	{J}
081CF79C	&PALETTE	何かのパレット	45	{J}
081CF7DC	&PALETTE	何かのパレット	46	{J}
081D0E50	&PALETTE	何かのパレット	47	{J}
081D3AB0	&PALETTE	何かのパレット	48	{J}
081D7BF0	&PALETTE	何かのパレット	49	{J}
081D7F74	&PALETTE	何かのパレット	50	{J}
081D83B0	&PALETTE	何かのパレット	51	{J}
081D8E2C	&PALETTE	何かのパレット	52	{J}
081DBD84	&PALETTE	何かのパレット	53	{J}
081DDA48	&PALETTE	何かのパレット	54	{J}
0827BE0C	&PALETTE	何かのパレット	55	{J}
083FB16C	&PALETTE	何かのパレット	56	{J}
083FB664	&PALETTE	何かのパレット	57	{J}
083FB8E4	&PALETTE	何かのパレット	58	{J}
083FBC24	&PALETTE	何かのパレット	59	{J}
083FDAAC	&PALETTE	何かのパレット	60	{J}
083FDB20	&PALETTE	何かのパレット	61	{J}
08407E9C	&PALETTE	何かのパレット	62	{J}
083FFB48	&PALETTE	何かのパレット	63	{J}
08402A4C	&PALETTE	何かのパレット	64	{J}
0840364C	&PALETTE	何かのパレット	65	{J}
0840366C	&PALETTE	何かのパレット	66	{J}
084038AC	&PALETTE	何かのパレット	67	{J}
08404BB4	&PALETTE4	何かのパレット	68	{J}
084061F8	&PALETTE	何かのパレット	69	{J}
08407E9C	&PALETTE8	何かのパレット	70	{J}
08408CC8	&PALETTE	何かのパレット	71	{J}
08409020	&PALETTE	何かのパレット	72	{J}
08409040	&PALETTE3	何かのパレット	73	{J}
0841BB50	&PALETTE2	何かのパレット	75	{J}
0841BC44	&PALETTE	何かのパレット	77	{J}
0841D100	&PALETTE	何かのパレット	78	{J}
08429638	&PALETTE	何かのパレット	80	{J}
0841E7F4	&PALETTE	何かのパレット	81	{J}
0841EC70	&PALETTE	何かのパレット	82	{J}
08428A40	&PALETTE	何かのパレット	83	{J}
08428DB4	&PALETTE	何かのパレット	84	{J}
084291AC	&PALETTE	何かのパレット	85	{J}
08429638	&PALETTE	何かのパレット	86	{J}
08429638	&PALETTE	何かのパレット	88	{J}
0842D710	&PALETTE	何かのパレット	89	{J}
0842D730	&PALETTE	何かのパレット	90	{J}
08432594	&PALETTE	何かのパレット	91	{J}
08432694	&PALETTE	何かのパレット	92	{J}
08432DE4	&PALETTE	何かのパレット	93	{J}
08433A90	&PALETTE	何かのパレット	94	{J}
08434448	&PALETTE	何かのパレット	95	{J}
084352DC	&PALETTE	何かのパレット	96	{J}
08436460	&PALETTE	何かのパレット	97	{J}
0843927C	&PALETTE	何かのパレット	98	{J}
0843F084	&PALETTE	何かのパレット	99	{J}

083FAD4C	&LZ77	何か小さい圧縮データ	04	{J}
02028E6C	gAISArray	{J}
0202A580	gFaceGfxData	{J}
0202B5B4	gPaletteFadeBuffer	{J}
0202BBB4	gMainLoopEndedFlag	{J}
0202BBF4	gChapterData	{J}

0202BC44	gSomeCameraMovementTableMaybe	{J}
0202BD44	gActiveUnitIndex	{J}
0202BD48	gActiveUnitPosition	{J}
0202BD4C	gUnitArray	{J}
0202E3D4	gMapSize	{J}
0202E3D8	gMapUnit	{J}
0202E3DC	gMapTerrain	{J}
0202E3E0	gMapMovement	{J}
0202E3E4	gMapRange	{J}
0202E3E8	gMapFog	{J}
0202E3EC	gMapHidden	{J}
0202E3F0	gMapMovement2	{J}
0202E3F4	gMapUnitPool	{J}
0202EBAC	gMapTerrainPool	{J}
02030A8C	gTileConfigBuffer	{J}
02033DFC	gUnitMoveBuffer	{J}
02033E3C	gUnitSubject	{J}
02033E40	gSMSGfxIndexLookup	{J}
02033F10	gSMSGfxBuffer_Frame1	{J}
02035F10	gSMSGfxBuffer_Frame2	{J}
02037F10	gSMSGfxBuffer_Frame3	{J}
02039F10	gSMS16xGfxIndexCounter	{J}
02039F14	gSMS32xGfxIndexCounter	{J}
02039F18	gSMSHandleArray	{J}
0203A3C8	gSMSHandleIt	{J}
0203A3CC	gSMSSyncFlag	{J}
0203A510	gpTradeMenuProc	{J}
0203A714	gTrapArrayBack	{J}
0203A7E4	gpSomeUnitPool	{J}
0203A7E8	gpSomeUnitIt	{J}
0203A7EC	gSomeUnitCounter	{J}
0203A810	@Unit	gArenaOpponent	{J}
0203A858	gActionData	{J}
0203A8E8	@AiData	gAiData	{J}
0203DCCC	gTargetPosition	{J}
0203DCD0	gTargetArray	{J}
0203DFD0	gTargetArraySize	{J}
0203DFD8	gBoolBattleDeamonActive	{J}
0203DFDC	gpEkrBattleDeamon	{J}
0203E004	gSomethingRelatedToAnimAndDistance	{J}
0203E066	gStoredBattleAnimId11Ptr	{J}
0203E64C	gSomeTextRelatedStuff	{J}
0203E768	gBWLDataArray	{J}
0203E774	gpBWLSaveTarget	{J}
0203E778	gBWLDataStorage	{J}
0203EBD8	gChapterWinDataArray	{J}

030000C8	gDialogueText	{J}
03000438	gpCurrentInitMap	{J}
030013B0	gAiScriptEndedFlag	{J}
030013B4	gBoolIsAI2	{J}
030013B8	gpAiScriptCurrent	{J}
030013BC	gpCurrentAiFunctionCall	{J}
030013C0	gpAiBattleWeightFactorTable	{J}
03001458	gMenuRelatedList	{J}
030040B0	gOAMAllocIt	{J}
030040E0	gpFaceProcs	{J}
03004110	gpSubjectMap	{J}
030045C0	gMovementFillConfig	{J}
030046C0	gpAiPerformer	{J}
03004750	gCurrentUnitIndex	{J}
03005D90	gpReadSramFast	{J}
03005D94	gpVerifySramFast	{J}
03007FF8	IRQCheckFlags	{J}
08D8C9C0	ccramify	PROCS	Promotion(Class Change)	{J}
08D8C9C0	CCRamifyMenuSelect	PROCS	Promotion(Class Change)	{J}
08D8C9C0	CCRamifyMenuSelect	{J}
0203DFE4	gBattleAttackPhaseBool	{J}
083FD3D8	:083FD457	傷薬の回復エフェクトのパレットアニメ	{J}
08DBAD14	:08DC038F	通信闘技場のデータ	{J}

080346A0	戦闘予測ダイアログのRMenu_Procs_BKSEL関係	{J}
082710C8	:0827191B	ライブの杖に関係する何のデータ1	0x0854	{J}
08271A28	:0827227B	ライブの杖に関係する何のデータ2	0x0854	{J}
0826FAFC	:0826FB1B	ライブの杖に関係する何のデータ3	0x1F	{J}
0827045C	:0827065B	ライブの杖のパレット関係1	{J}
081EE9C0	:081EEBDF	ライブの杖のパレット関係2	{J}
081EE93C	:081EEB5B	ライブの杖の何かのデータ	{J}
08BBFD28	&ASM_POINTER_ARRAY	Procs(6c) Function	{J}
086C4560	&ASM_POINTER_ARRAY	MPlayJumpTable Midi Function	M4ALIB	{J}
086C45F0	:086C4637	MidiKeyToFreqTable1	M4ALIB	{J}
086C46D4	:086C46EB	SampleFreqSetTable	M4ALIB	{J}
086C46EC	:086C476F	MidiKeyToCgbFreq Data Table1	M4ALIB	{J}
086C4770	:086C4787	MidiKeyToCgbFreq Data Table2	M4ALIB	{J}
086C4788	:086C47C3	MidiKeyToCgbFreq Data Table3	M4ALIB	{J}
086C47C4	:086C47D3	CgbSound Data Table	M4ALIB	{J}
086C47D4	:086C4807	ply_note_Table	M4ALIB	{J}
086C4808	&ASM_POINTER_ARRAY	ply_xcmd Function	M4ALIB	{J}
08191ED4	&ROMTCS	何かのROMTCSデータ	05	{J}
08192178	&ROMTCS	何かのROMTCSデータ	06	{J}
08193260	&ROMTCS	何かのROMTCSデータ	08	{J}
08193CD8	&ROMTCS	何かのROMTCSデータ	09	{J}
08194D78	&ROMTCS	何かのROMTCSデータ	12	{J}
08194F14	&ROMTCS	何かのROMTCSデータ	13	{J}
083F96B8	&ROMTCS	何かのROMTCSデータ	15	{J}
083F9964	&ROMTCS	何かのROMTCSデータ	16	{J}
083F44FC	&ROMTCS	何かのROMTCSデータ	17	{J}
083F4464	&ROMTCS	何かのROMTCSデータ	18	{J}
083F371C	&ROMTCS	何かのROMTCSデータ	19	{J}
083FF528	&ROMTCS	何かのROMTCSデータ	20	{J}
083FEE30	&ROMTCS	何かのROMTCSデータ	21	{J}
083FFB68	&ROMTCS	何かのROMTCSデータ	22	{J}
083F3778	&ROMTCS	何かのROMTCSデータ	23	{J}
083F2F90	&ROMTCS	何かのROMTCSデータ	25	{J}
081C855C	&ROMTCS	何かのROMTCSデータ	29	{J}
08BC05EC	&FONTCOLOR0x200	FontColor	01	{J}
08BC07EC	&FONTCOLOR0x200	FontColor	02	{J}
08BC09EC	&FONTCOLOR0x200	FontColor	03	{J}
08BC0BEC	&FONTCOLOR0x200	FontColor	04	{J}
08BC0DEC	&FONTCOLOR0x200	FontColor	05	{J}
08BC0FEC	&FONTCOLOR0x200	FontColor	06	{J}
08BC11EC	&FONTCOLOR0x200	FontColor	07	{J}
08BC13EC	&FONTCOLOR0x200	FontColor	08	{J}
08BC15EC	&FONTCOLOR0x200	FontColor	09	{J}
08BC17EC	&FONTCOLOR0x200	FontColor	10	{J}
08BC19EC	&FONTCOLOR0x200	FontColor	11	{J}
08BC1BEC	&FONTCOLOR0x200	FontColor	12	{J}
08BC1DEC	&FONTCOLOR0x200	FontColor	13	{J}
080C1358	:080C13D7	QuakePure Table	{J}
081DDB74	:081DDB95	QuakePure	01	{J}
081DDB96	:081DDBdf	QuakePure	02	{J}
081DDBE0	:081DDC29	QuakePure	03	{J}
081DDC2A	:081DDC73	QuakePure	04	{J}
081DDC74	:081DDCBD	QuakePure	05	{J}
081DDCBE	:081DDDD9	QuakePure	06	{J}
081DDDDA	:081DDDEB	QuakePure	07	{J}
081DDDEC	:081DDE0D	QuakePure	08	{J}
081DDE0E	:081DDE1f	QuakePure	09	{J}
081DDE20	:081DDE43	QuakePure	10	{J}
081DDE44	:081DDED9	HitQuake	01	{J}
081DDEDA	:081DE00B	HitQuake	02	{J}
081DF444	:081DF463	たぶん、何かの複数パレット	A7	{J}
08C01CEC	&PALETTE	真っ黒なパレット	{J}
081E4210	&PALETTE4	たぶん、何かの複数パレット	A8	{J}
081E4290	&PALETTE4	たぶん、何かの複数パレット	A9	{J}
081E4310	&PALETTE4	たぶん、何かの複数パレット	A10	{J}
08C09D60	:08C09D8f	何かのAISデータ	01	{J}
08C09D90	:08C09E4f	何かのAISデータ	02	{J}
08C09E50	:08C09E67	何かのAISデータ	06	{J}
08C09E68	:08C09E7f	何かのAISデータ	07	{J}
08C09E80	:08C09E97	何かのAISデータ	08	{J}
08C09E98	:08C09Eaf	何かのAISデータ	09	{J}
08C09EB0	:08C09EC7	何かのAISデータ	10	{J}
08C09EC8	:08C09Edf	何かのAISデータ	11	{J}
08C09EE0	:08C09EF7	何かのAISデータ	12	{J}
0841ECB0	&PALETTE	何かのパレット	102	{J}
08190288	&PALETTE	何かのパレット	103	{J}
081CD9B8	&PALETTE	何かのパレット	104	{J}
081CD9B8	&PALETTE	何かのパレット	105	{J}
0841ECB0	&PALETTE	何かのパレット	106	{J}
081CD818	&PALETTE	何かのパレット	108	{J}
08421C24	&PALETTE	何かのパレット	109	{J}
08428A80	&PALETTE	何かのパレット	111	{J}
083FEBC4	&HEADERTSA	何かの無圧縮TSAを利用したアニメパターン	1	{J}
083FDC84	&HEADERTSA	何かの無圧縮TSAを利用したアニメパターン	2	{J}
0840085C	&HEADERTSA	何かの無圧縮TSAを利用したアニメパターン	3	{J}
083FDC60	&HEADERTSA	何かの無圧縮TSAを利用したアニメパターン	4	{J}
081D83D0	&LZ77	謎のダイアログと数字データ	{J}
081D8E2C	&PALETTE	謎のダイアログと数字データのパレット	{J}
081D83B0	&PALETTE	日本語版のみの何かのパレット	1	{J}
082010C8	:08201129	何かのパレット	118	{J}
082022A8	:08202349	何かのパレット	119	{J}
08204A74	&PALETTE	何かのパレット	120	{J}
08210150	:821034F	何かのパレット	121	{J}
0822FED0	&PALETTE	何かのパレット	123	{J}
08248128	&PALETTE	何かのパレット	124	{J}
082539B4	:8253B93	何かのパレット	125	{J}
0825CF18	:825CF59	何かのパレット	126	{J}
082708B0	&PALETTE	何かのパレット	127	{J}
081DBD64	&PALETTE	何かのパレット	133	{J}
081DC658	&PALETTE	何かのパレット	134	{J}
081DCF18	&PALETTE	何かのパレット	135	{J}
081DD794	&PALETTE	何かのパレット	136	{J}

0800EF54	NewItemGot	{U}
0800EE60	NewItemGot	{J}
0800AD5C	NewPopup	{U}
0800AD04	NewPopup	{J}



08195680	&HEADERTSA	顔画像関係のタイル	{U}
08195738	&HEADERTSA	FillTileRectされる何かのタイル	01	{U}
084025C8	&HEADERTSA	FillTileRectされる何かのタイル	02	{U}
083FE13C	&HEADERTSA	FillTileRectされる何かのタイル	05	{U}
08195C2C	&HEADERTSA	FillTileRectされる何かのタイル	06	{U}
081C81C4	&HEADERTSA	FillTileRectされる何かのタイル	10	{U}
085DFB70	&HEADERTSA	FillTileRectされる何かのタイル	30	{U}

08196228	&ROMTCS	何かのROMTCSデータ	01	{U}
083EF9A0	&ROMTCS	何かのROMTCSデータ	02	{U}
08B91BE4	&NewPopupSimple	ポップアップするためのデータ	03	{U}

081900E4	&PALETTE	何かのパレット	02	{U}
08194614	&PALETTE	何かのパレット	03	{U}
08194634	&PALETTE	何かのパレット	04	{U}
08194654	&PALETTE	何かのパレット	05	{U}
08194674	&PALETTE	何かのパレット	06	{U}
08194694	&PALETTE	何かのパレット	07	{U}
081946D4	&PALETTE	何かのパレット	08	{U}
08194714	&PALETTE	何かのパレット	09	{U}
08194754	&PALETTE	何かのパレット	10	{U}
08194774	&PALETTE	何かのパレット	11	{U}
08195088	&PALETTE	何かのパレット	12	{U}
08195500	&PALETTE	何かのパレット	13	{U}
08195FB0	&PALETTE	何かのパレット	14	{U}
081973F4	&PALETTE	何かのパレット	15	{U}
08197414	&PALETTE	何かのパレット	16	{U}
08198164	&PALETTE	何かのパレット	17	{U}
08198818	&PALETTE	何かのパレット	18	{U}
08199438	&PALETTE	何かのパレット	19	{U}
081995B8	&PALETTE	何かのパレット	20	{U}
08199B14	&PALETTE	何かのパレット	21	{U}
0819B258	&PALETTE	何かのパレット	22	{U}
0819C56C	&PALETTE	何かのパレット	23	{U}
0819CF90	&PALETTE	何かのパレット	24	{U}
081A71C8	&PALETTE	何かのパレット	26	{U}
081AA898	&PALETTE	何かのパレット	27	{U}
081B9790	&PALETTE	何かのパレット	28	{U}
081B98C8	&PALETTE	何かのパレット	29	{U}
081BABFC	&PALETTE4	何かのパレット	30	{U}
0840E978	&PALETTE	何かのパレット	31	{U}
081D60F0	&PALETTE	何かのパレット	32	{U}
081C23C8	&PALETTE	何かのパレット	33	{U}
080CBEA4	&PALETTE	何かのパレット	34	{U}
081C39A4	&PALETTE	何かのパレット	35	{U}
081C7EA4	&PALETTE	何かのパレット	36	{U}
081C7F04	&PALETTE	何かのパレット	37	{U}
081C7F84	&PALETTE	何かのパレット	38	{U}
081C7FC4	&PALETTE	何かのパレット	39	{U}
081C80A4	&PALETTE	何かのパレット	40	{U}
081C80E4	&PALETTE	何かのパレット	41	{U}
081C8144	&PALETTE	何かのパレット	42	{U}
081C8164	&PALETTE	何かのパレット	43	{U}
081C8184	&PALETTE	何かのパレット	44	{U}
081C9F08	&PALETTE	何かのパレット	45	{U}
081C9F48	&PALETTE	何かのパレット	46	{U}
081CB5BC	&PALETTE	何かのパレット	47	{U}
081CE21C	&PALETTE	何かのパレット	48	{U}
081D235C	&PALETTE	何かのパレット	49	{U}
081D26E0	&PALETTE	何かのパレット	50	{U}
081D2B1C	&PALETTE	何かのパレット	51	{U}
081D3598	&PALETTE	何かのパレット	52	{U}
081D6110	&PALETTE	何かのパレット	53	{U}
081D7DD4	&PALETTE	何かのパレット	54	{U}
08276198	&PALETTE	何かのパレット	55	{U}
083F46F0	&PALETTE	何かのパレット	56	{U}
083F4BE8	&PALETTE	何かのパレット	57	{U}
083F4E68	&PALETTE	何かのパレット	58	{U}
083F51A8	&PALETTE	何かのパレット	59	{U}
083F7030	&PALETTE	何かのパレット	60	{U}
083F70A4	&PALETTE	何かのパレット	61	{U}
08401404	&PALETTE	何かのパレット	62	{U}
083F90CC	&PALETTE	何かのパレット	63	{U}
083FBFD0	&PALETTE	何かのパレット	64	{U}
083FCBAC	&PALETTE	何かのパレット	65	{U}
083FCBCC	&PALETTE	何かのパレット	66	{U}
083FCE0C	&PALETTE	何かのパレット	67	{U}
083FE11C	&PALETTE4	何かのパレット	68	{U}
083FF760	&PALETTE	何かのパレット	69	{U}
08401404	&PALETTE8	何かのパレット	70	{U}
08402230	&PALETTE	何かのパレット	71	{U}
08402588	&PALETTE	何かのパレット	72	{U}
084025A8	&PALETTE3	何かのパレット	73	{U}
08403914	&PALETTE2	何かのパレット	75	{U}
08403A08	&PALETTE	何かのパレット	77	{U}
08404BBC	&PALETTE	何かのパレット	78	{U}
0840E978	&PALETTE	何かのパレット	80	{U}
08405EA4	&PALETTE	何かのパレット	81	{U}
0840624C	&PALETTE	何かのパレット	82	{U}
0840DCE4	&PALETTE	何かのパレット	83	{U}
0840E058	&PALETTE	何かのパレット	84	{U}
081C7F84	&PALETTE	何かのパレット	85	{U}
0840E978	&PALETTE	何かのパレット	86	{U}
0840E978	&PALETTE	何かのパレット	88	{U}
0840F8B0	&PALETTE	何かのパレット	89	{U}
0840F8D0	&PALETTE	何かのパレット	90	{U}
084138F0	&PALETTE	何かのパレット	91	{U}
084139F0	&PALETTE	何かのパレット	92	{U}
08413D0C	&PALETTE	何かのパレット	93	{U}
084150C0	&PALETTE	何かのパレット	95	{U}
08415AA0	&PALETTE	何かのパレット	96	{U}
0841625C	&PALETTE	何かのパレット	97	{U}
08418D40	&PALETTE	何かのパレット	98	{U}
0841E2D8	&PALETTE	何かのパレット	99	{U}

083F42D0	&LZ77	何か小さい圧縮データ	04	{U}
02028E78	gAISArray	{U}
0202A58C	gFaceGfxData	{U}
0202B5B8	gPaletteFadeBuffer	{U}
0202BBB8	gMainLoopEndedFlag	{U}
0202BBF8	gChapterData	{U}

0202BC48	gSomeCameraMovementTableMaybe	{U}
0202BD48	gActiveUnitIndex	{U}
0202BD4C	gActiveUnitPosition	{U}
0202BD50	gUnitArray	{U}
0202E3D8	gMapSize	{U}
0202E3DC	gMapUnit	{U}
0202E3E0	gMapTerrain	{U}
0202E3E4	gMapMovement	{U}
0202E3E8	gMapRange	{U}
0202E3EC	gMapFog	{U}
0202E3F0	gMapHidden	{U}
0202E3F4	gMapMovement2	{U}
0202E3F8	gMapUnitPool	{U}
0202EBB0	gMapTerrainPool	{U}
02030A90	gTileConfigBuffer	{U}
02033E00	gUnitMoveBuffer	{U}
02033E40	gUnitSubject	{U}
02033E44	gSMSGfxIndexLookup	{U}
02033F14	gSMSGfxBuffer_Frame1	{U}
02035F14	gSMSGfxBuffer_Frame2	{U}
02037F14	gSMSGfxBuffer_Frame3	{U}
02039F14	gSMS16xGfxIndexCounter	{U}
02039F18	gSMS32xGfxIndexCounter	{U}
02039F1C	gSMSHandleArray	{U}
0203A3CC	gSMSHandleIt	{U}
0203A3D0	gSMSSyncFlag	{U}
0203A514	gpTradeMenuProc	{U}
0203A718	gTrapArrayBack	{U}
0203A7E8	gpSomeUnitPool	{U}
0203A7EC	gpSomeUnitIt	{U}
0203A7F0	gSomeUnitCounter	{U}
0203A814	@Unit	gArenaOpponent	{U}
0203A85C	gActionData	{U}
0203A8EC	@AiData	gAiData	{U}
0203DCF4	gTargetPosition	{U}
0203DCF8	gTargetArray	{U}
0203DFF8	gTargetArraySize	{U}
0203E000	gBoolBattleDeamonActive	{U}
0203E004	gpEkrBattleDeamon	{U}
0203E02C	gSomethingRelatedToAnimAndDistance	{U}
0203E08E	gStoredBattleAnimId11Ptr	{U}
0203E674	gSomeTextRelatedStuff	{U}
0203E790	gBWLDataArray	{U}
0203E79C	gpBWLSaveTarget	{U}
0203E7A0	gBWLDataStorage	{U}
0203EC00	gChapterWinDataArray	{U}

030000C8	gDialogueText	{U}
03000438	gpCurrentInitMap	{U}
030013B0	gAiScriptEndedFlag	{U}
030013B4	gBoolIsAI2	{U}
030013B8	gpAiScriptCurrent	{U}
030013BC	gpCurrentAiFunctionCall	{U}
030013C0	gpAiBattleWeightFactorTable	{U}
03001458	gMenuRelatedList	{U}
03004190	gOAMAllocIt	{U}
030041C0	gpFaceProcs	{U}
030041F0	gpSubjectMap	{U}
030046A0	gMovementFillConfig	{U}
030047A0	gpAiPerformer	{U}
03004830	gCurrentUnitIndex	{U}
03005E70	gpReadSramFast	{U}
03005E74	gpVerifySramFast	{U}
03007FF8	IRQCheckFlags	{U}
08CC4448	ccramify	PROCS	Promotion(Class Change)	{U}
08CC4448	CCRamifyMenuSelect	PROCS	Promotion(Class Change)	{U}
08CC4448	CCRamifyMenuSelect	{U}
0203E00C	gBattleAttackPhaseBool	{U}
083F695C	:083F69DB	傷薬の回復エフェクトのパレットアニメ	{U}
08CF0CD0	:08CF634B	通信闘技場のデータ	{U}

080341C8	戦闘予測ダイアログのRMenu_Procs_BKSEL関係	{U}
0826B454	:0826BCA8	ライブの杖に関係する何のデータ1	0x0854	{U}
0826BDB4	:0826C608	ライブの杖に関係する何のデータ2	0x0854	{U}
08269E88	:08269EA7	ライブの杖に関係する何のデータ3	0x1F	{U}
0826A7E8	:0826A9E7	ライブの杖のパレット関係1	{U}
081E8D4C	:081E8F6B	ライブの杖のパレット関係2	{U}
081E8CC8	:081E8EE7	ライブの杖の何かのデータ	{U}
08B858A4	&ASM_POINTER_ARRAY	Procs(6c) Function	{U}
08677370	&ASM_POINTER_ARRAY	MPlayJumpTable Midi Function	M4ALIB	{U}
08677400	:08677447	MidiKeyToFreqTable1	M4ALIB	{U}
086774E4	:086774FB	SampleFreqSetTable	M4ALIB	{U}
086774FC	:0867757F	MidiKeyToCgbFreq Data Table1	M4ALIB	{U}
08677580	:08677597	MidiKeyToCgbFreq Data Table2	M4ALIB	{U}
08677598	:086775D3	MidiKeyToCgbFreq Data Table3	M4ALIB	{U}
086775D4	:086775E3	CgbSound Data Table	M4ALIB	{U}
086775E4	:08677617	ply_note_Table	M4ALIB	{U}
08677618	&ASM_POINTER_ARRAY	ply_xcmd Function	M4ALIB	{U}
08196380	&ROMTCS	何かのROMTCSデータ	05	{U}
08196624	&ROMTCS	何かのROMTCSデータ	06	{U}
0819770C	&ROMTCS	何かのROMTCSデータ	08	{U}
08198184	&ROMTCS	何かのROMTCSデータ	09	{U}
08199224	&ROMTCS	何かのROMTCSデータ	12	{U}
081993C0	&ROMTCS	何かのROMTCSデータ	13	{U}
083F2C3C	&ROMTCS	何かのROMTCSデータ	15	{U}
083F2EE8	&ROMTCS	何かのROMTCSデータ	16	{U}
083EDA80	&ROMTCS	何かのROMTCSデータ	17	{U}
083ED9E8	&ROMTCS	何かのROMTCSデータ	18	{U}
083ECCA0	&ROMTCS	何かのROMTCSデータ	19	{U}
083F8AAC	&ROMTCS	何かのROMTCSデータ	20	{U}
083F83B4	&ROMTCS	何かのROMTCSデータ	21	{U}
083F90EC	&ROMTCS	何かのROMTCSデータ	22	{U}
083ECCFC	&ROMTCS	何かのROMTCSデータ	23	{U}
083EC514	&ROMTCS	何かのROMTCSデータ	25	{U}
081C34DC	&ROMTCS	何かのROMTCSデータ	29	{U}
08B86168	&FONTCOLOR0x200	FontColor	01	{U}
08B86368	&FONTCOLOR0x200	FontColor	02	{U}
08B86568	&FONTCOLOR0x200	FontColor	03	{U}
08B86768	&FONTCOLOR0x200	FontColor	04	{U}
08B86968	&FONTCOLOR0x200	FontColor	05	{U}
08B86B68	&FONTCOLOR0x200	FontColor	06	{U}
08B86D68	&FONTCOLOR0x200	FontColor	07	{U}
08B86F68	&FONTCOLOR0x200	FontColor	08	{U}
08B87168	&FONTCOLOR0x200	FontColor	09	{U}
08B87368	&FONTCOLOR0x200	FontColor	10	{U}
08B87568	&FONTCOLOR0x200	FontColor	11	{U}
08B87768	&FONTCOLOR0x200	FontColor	12	{U}
08B87968	&FONTCOLOR0x200	FontColor	13	{U}

080C5F08	:080C5F87	QuakePure Table	{U}
081D7F00	:081D7F21	QuakePure	01	{U}
081D7F22	:081D7F6B	QuakePure	02	{U}
081D7F6C	:081D7FB5	QuakePure	03	{U}
081D7FB6	:081D7FFF	QuakePure	04	{U}
081D8000	:081D8049	QuakePure	05	{U}
081D804A	:081D8165	QuakePure	06	{U}
081D8166	:081D8177	QuakePure	07	{U}
081D8178	:081D8199	QuakePure	08	{U}
081D819A	:081D81AB	QuakePure	09	{U}
081D81AC	:081D81CF	QuakePure	10	{U}
081D81D0	:081D8265	HitQuake	01	{U}
081D8266	:081D8397	HitQuake	02	{U}
081D97D0	:081D97EF	たぶん、何かの複数パレット	A7	{U}
08B92A28	&PALETTE	真っ黒なパレット	{U}
081DE59C	&PALETTE4	たぶん、何かの複数パレット	A8	{U}
081DE61C	&PALETTE4	たぶん、何かの複数パレット	A9	{U}
081DE69C	&PALETTE4	たぶん、何かの複数パレット	A10	{U}
08B9AA14	:08B9AA43	何かのAISデータ	01	{U}
08B9AA44	:08B9AB03	何かのAISデータ	02	{U}
08B9AB04	:08B9AB1B	何かのAISデータ	06	{U}
08B9AB1C	:08B9AB33	何かのAISデータ	07	{U}
08B9AB34	:08B9AB4B	何かのAISデータ	08	{U}
08B9AB4C	:08B9AB63	何かのAISデータ	09	{U}
08B9AB64	:08B9AB7B	何かのAISデータ	10	{U}
08B9AB7C	:08B9AB93	何かのAISデータ	11	{U}
08B9AB94	:08B9ABAB	何かのAISデータ	12	{U}
0840628C	&PALETTE	何かのパレット	102	{U}
08194734	&PALETTE	何かのパレット	103	{U}
081C8124	&PALETTE	何かのパレット	104	{U}
081C8124	&PALETTE	何かのパレット	105	{U}
0840628C	&PALETTE	何かのパレット	106	{U}
081C7F84	&PALETTE	何かのパレット	108	{U}
08407400	&PALETTE	何かのパレット	109	{U}
0840DD24	&PALETTE	何かのパレット	111	{U}
083F8148	&HEADERTSA	何かの無圧縮TSAを利用したアニメパターン	1	{U}
083F7208	&HEADERTSA	何かの無圧縮TSAを利用したアニメパターン	2	{U}
083F9DE0	&HEADERTSA	何かの無圧縮TSAを利用したアニメパターン	3	{U}
083F71E4	&HEADERTSA	何かの無圧縮TSAを利用したアニメパターン	4	{U}
081D2B3C	&LZ77	謎のダイアログと数字データ	{U}
081D3598	&PALETTE	謎のダイアログと数字データのパレット	{U}
081D2B1C	&PALETTE	日本語版のみの何かのパレット	1	{U}
081FB454	:081FB4B5	何かのパレット	118	{U}
081FC634	:081FC6D5	何かのパレット	119	{U}

081FEE00	&PALETTE	何かのパレット	120	{U}
0820A4DC	:0820A6DB	何かのパレット	121	{U}
0822A25C	&PALETTE	何かのパレット	123	{U}
082424B4	&PALETTE	何かのパレット	124	{U}
0824DD40	:0824DF1F	何かのパレット	125	{U}
082572A4	:082572E5	何かのパレット	126	{U}
0826AC3C	&PALETTE	何かのパレット	127	{U}
081D60F0	&PALETTE	何かのパレット	133	{U}
081D69E4	&PALETTE	何かのパレット	134	{U}
081D72A4	&PALETTE	何かのパレット	135	{U}
081D7B20	&PALETTE	何かのパレット	136	{U}
08075F68	マップ上で奏でた時の効果音(0x2d5)を再生する	{J}
08075FAC	マップ上で踊った時の効果音(0x2d6)を再生する	{J}
08075798	マップ上で奏でた時の効果音(0x2d5)を再生する	{U}
080757DC	マップ上で踊った時の効果音(0x2d6)を再生する	{U}
0202BC23	Tactician_Birth_Month	{U}
0202BC1F	Tactician_Birth_Month	{J}
0802ebb0	GetTacticianNameStringPtr	{J}
080157B0	SwitchPhases	{J}
08015308	AddSkipThread2	{U}
08015318	SubSkipThread2	{U}
08015784	AddSkipThread2	{J}
08015794	SubSkipThread2	{J}
0808E344	PrepScreenTextHandler	{J}
0808E4D4	PrepMenu_PickUnits	{J}
0808E558	PrepMenu_StartBattle	{J}
0808E57C	PrepMenu_CheckMap_UnuseDummy	{J}
080AA390	DrawBlueBarForActiveItemInPrepScreenMenu	{J}
0808DA04	PrepScreenTextHandler	{U}
0808DF9C	PrepScreenHandler	{U}
0808DB94	PrepMenu_PickUnits	{U}
0808DC18	PrepMenu_StartBattle	{U}
080A947C	DrawBlueBarForActiveItemInPrepScreenMenu	{U}
0806c8f0	MOVEUNIT6C_ChangeFutureMovement	r0=pointer to MOVEUNIT	r1=pointer to movement buffer	{J}
0806c738	MOVEUNIT6C_SetSpriteDirection	r0=pointer to MOVEUNIT	r1=direction id (use prGetFacingDirectionId, or 0xB for idle)	{J}
0806e2c8	MU_Show	{J}
0806fc64	GetFacingDirection	{J}
0802f6e4	ApplyUnitAction	{J}
080357E4	CpPerform_PerformEscape	{J}
08035824	CpPerform_PerformSteal	{J}
08035870	CpPerform_LootWait	{J}
080793e4	RunLocationEvents	{J}
0802d4cc	ActionStaffDoorChestUseItem	{J}
0800ace8	NewPopupSimple	{J}
08035930	CpPerform_StaffWait	{J}
08035964	CpPerform_DanceWait	{J}
08035968	CpPerform_TalkWait	{J}
080359AC	CpPerform_ExitBallistaWait	{J}
0806C104	MOVEUNIT6C_ChangeFutureMovement	r0=pointer to MOVEUNIT	r1=pointer to movement buffer	{U}
0806BF4C	MOVEUNIT6C_SetSpriteDirection	r0=pointer to MOVEUNIT	r1=direction id (use prGetFacingDirectionId, or 0xB for idle)	{U}
0806DADC	MU_Show	{U}
0806F478	GetFacingDirection	{U}
0802F218	ApplyUnitAction	{U}
0803530C	CpPerform_PerformEscape	{U}
0803534C	CpPerform_PerformSteal	{U}
08035398	CpPerform_LootWait	{U}
08078C14	RunLocationEvents	{U}
0802D00C	ActionStaffDoorChestUseItem	{U}
0800AD40	NewPopupSimple	{U}
08035458	CpPerform_StaffWait	{U}
0803548C	CpPerform_DanceWait	{U}
08035490	CpPerform_TalkWait	{U}
080354D4	CpPerform_ExitBallistaWait	{U}
02020140	gGenericBuffer	{J}
02020140	gGenericBuffer	{U}
08050ABC	"戦闘用の不明なフラグ4バイト"に値を設定	{J}
08050AC8	"戦闘用の不明なフラグ4バイト"を取得する	{J}
0203E0EC	戦闘用の不明なフラグ4バイト	{J}
0804B194	"戦闘用の不明なフラグ4バイト"に値を設定	{U}
0804B1A0	"戦闘用の不明なフラグ4バイト"を取得する	{U}
0203DFFC	戦闘用の不明なフラグ4バイト	{U}
0804B9B4	EndEkrBattleDeamon	{J}
0804B9C4	IsBattleDeamonActive	{J}

@ArenaData@00	&Unit	playerUnit
@ArenaData@04	&Unit	opponentUnit
@ArenaData@08	short	betMoney
@ArenaData@0A	byte	battleResults
@ArenaData@0B	byte	unk0B
@ArenaData@0C	byte	range
@ArenaData@0D	byte	playerWpnType
@ArenaData@0E	byte	opponentWpnType
@ArenaData@0F	byte	playerClassId
@ArenaData@10	byte	opponentClassId
@ArenaData@11	byte	playerLevel
@ArenaData@12	byte	oppenentLevel
@ArenaData@13	byte	playerIsMagic
@ArenaData@14	byte	opponentIsMagic
@ArenaData@15	byte	_pad_15
@ArenaData@16	short	playerPowerWeight
@ArenaData@18	short	opponentPowerWeight
@ArenaData@1a	short	playerWeapon
@ArenaData@1c	short	opponentWeapon
@ArenaData@1e	short	_pad_1e

0802f7f4	ActionRescue	{J}
0802f328	ActionRescue	{U}
0802f870	ActionDrop	{J}
0802f3a4	ActionDrop	{U}
0802f92c	ActionCombat	{J}
0802f460	ActionCombat	{U}

0203A7F0	@ArenaData	闘技場の一時データ	{J}
0806c7cc	_MOVEUNIT6C_SetDefaultFacingDirection	{J}
0806dd98	GetItemIconId	{J}
0806C274	Make6CMOVEUNITForUnit	{J}
0806c4a0	NewMOVEUNIT	{J}
08025b80	GetUnitMapSpritePaletteIndex	{J}
0203A7F4	@ArenaData	闘技場の一時データ	{U}
0806BFE0	_MOVEUNIT6C_SetDefaultFacingDirection	{U}
0806D5AC	GetItemIconId	{U}
0806BA88	Make6CMOVEUNITForUnit	{U}
0806BCB4	NewMOVEUNIT	{U}
080256F4	GetUnitMapSpritePaletteIndex	{U}
0802B4DC	アイテム交換で、実際にアイテムを交換した時	{J}
0802B02C	アイテム交換で、実際にアイテムを交換した時	{U}
080973EC	進撃準備画面で、輸送体からアイテムを受け取る	{J}
08096C60	進撃準備画面で、輸送体からアイテムを受け取る	{U}
08097990	進撃準備画面で、輸送体にアイテムを送る	{J}
08097204	進撃準備画面で、輸送体にアイテムを送る	{U}
080384EC	AiDoBerserkAction	{U}
0803aad8	AiTryDoStaff	{U}
0801727c	GetItemAttributes	{U}
0803AB78	gStaffAiPerformTable_2	{U}
0803AB80	GetAiSafestAccessibleAdjacentPosition	{U}
08039304	AiGetPositionTerrainSafetyWeight	{U}
08039344	AiGetPositionUnitSafetyWeight	{U}
080389A0	AiDoBerserkAction	{J}
0803AF8C	AiTryDoStaff	{J}
08017684	GetItemAttributes	{J}
0803B02C	gStaffAiPerformTable_2	{J}
0803B034	GetAiSafestAccessibleAdjacentPosition	{J}
080397B8	AiGetPositionTerrainSafetyWeight	{J}
080397F8	AiGetPositionUnitSafetyWeight	{J}

0809F950	GGM_IsCharacterKnown	{J}
0809BB98	支援画面	ユニットの支援関係をキャッシュするgStringBufferAltを構築する	メイン	{J}
0809F770	支援画面	ユニットの支援関係をキャッシュするgStringBufferAltを構築する	1ユニット	{J}
0809EF14	GGM_IsCharacterKnown	{U}
0809B1C4	支援画面	ユニットの支援関係をキャッシュするgStringBufferAltを構築する	メイン	{U}
0809ED34	支援画面	ユニットの支援関係をキャッシュするgStringBufferAltを構築する	1ユニット	{U}
080178B4	GetROMItemStructPtr	{J}
08028f8c	BattleLoadAttack	{J}
080290f8	BattleLoadAvoid	{J}
080291ec	BattleLoadDodge	{J}
08028ea0	BattleApplyMiscBonuses	{J}
08029364	BattleComputeBuffStatus	{J}
080291f8	ComputeHit	{J}
08029224	ComputeCrit	{J}
08028EA0	BattleApplyMiscBonuses	{J}
08034ba0	GetBallistaItemAt	{J}
08028b10	BattleLoadAttack	{U}
08028c50	BattleLoadAvoid	{U}
08028d3c	BattleLoadDodge	{U}
08028a24	BattleApplyMiscBonuses	{U}
08028eb4	BattleComputeBuffStatus	{U}
08028d48	ComputeHit	{U}
08028d74	ComputeCrit	{U}
08028A24	BattleApplyMiscBonuses	{U}
080346c8	GetBallistaItemAt	{U}
0842D19C	:0842D1A3	謎のデータ	8バイト	{J}
0842D1A8	:0842D1AF	謎のデータ	8バイト	{J}
0842D1B8	:0842D1BF	謎のデータ	8バイト	{J}
0800562E	不明文字のハート文字	{J}
0800571A	不明文字のハート文字	{J}
08004C08	LoadIconPalettes	{J}
08004C20	LoadIconPalette	{J}
02026D08	gIconDataToIndexLookup	{J}
02026A48	gIconIndexToDataLookup	{J}
08004D2C	LoadIconPalettes	{U}
08004D44	LoadIconPalette	{U}
02026D10	gIconDataToIndexLookup	{U}
02026A50	gIconIndexToDataLookup	{U}
08004BC4	ResetIconGraphics_	{J}
08004BD0	ResetIconGraphics	{J}
08004CE8	ResetIconGraphics_	{U}
08004CF4	ResetIconGraphics	{U}

081DE00C	&ROMPALETTEANIMEFRAME	efxHPBarColorChangePaletteAnimeFrame1	{J}
081DE036	&ROMPALETTEANIMEFRAME	efxHPBarColorChangePaletteAnimeFrame2	{J}
081DE058	&ROMPALETTEANIMEFRAME	efxStatusUnitPaletteAnimeFrame	{J}
081DE07A	&ROMPALETTEANIMEFRAME	efxWeaponIconPaletteAnimeFrame	{J}
081DE2B8	&ROMPALETTEANIMEFRAME	ekrTogiColorPaletteAnimeFrame	{J}
081EDCDE	&ROMPALETTEANIMEFRAME	efxEckesachsBGCOLPaletteAnimeFrame	{J}
081EDD00	&ROMPALETTEANIMEFRAME	efxFirebreathBGCOLPaletteAnimeFrame	{J}
081EDE20	&ROMPALETTEANIMEFRAME	efxDarkbreathBGCOLPaletteAnimeFrame	{J}
081EDECC	&ROMPALETTEANIMEFRAME	efxThunderBGCOLPaletteAnimeFrame	{J}
081EDCDE	&ROMPALETTEANIMEFRAME	efxEckesachsBGCOLPaletteAnimeFrame	{J}
081EDD00	&ROMPALETTEANIMEFRAME	efxFirebreathBGCOL2PaletteAnimeFrame	{J}
081EDF96	&ROMPALETTEANIMEFRAME	efxElfireBGCOLPaletteAnimeFrame	{J}
081EE7E4	&ROMPALETTEANIMEFRAME	efxFenrirBGCOLPaletteAnimeFrame	{J}
081EE97E	&ROMPALETTEANIMEFRAME	efxLiveBGPaletteAnimeFrame	{J}
081EE7E4	&ROMPALETTEANIMEFRAME	efxLunaBGCOLPaletteAnimeFrame	{J}
081EEF7A	&ROMPALETTEANIMEFRAME	efxExcaliburBGCOLPaletteAnimeFrame	{J}
081EF02A	&ROMPALETTEANIMEFRAME	efxGespenstBGCOL2PaletteAnimeFrame	{J}
081EDF40	&ROMPALETTEANIMEFRAME	efxMaohFlashBGCOLPaletteAnimeFrame	{J}
081EDD00	&ROMPALETTEANIMEFRAME	efxDrzDrakbreathBGCOLPaletteAnimeFrame	{J}
081EDF40	&ROMPALETTEANIMEFRAME	efxChillEffectBGCOLPaletteAnimeFrame	{J}
081EF2C4	&ROMPALETTEANIMEFRAME	efxPierceCriticalEffectBGCOLPaletteAnimeFrame	{J}
081EF346	&ROMPALETTEANIMEFRAME	efxMagfcastBG2PaletteAnimeFrame	{J}
081EDF0E	&ROMPALETTEANIMEFRAME	efxOpFireBGPaletteAnimeFrame	{J}
081EDECC	&ROMPALETTEANIMEFRAME	efxOpThunderBGCOLPaletteAnimeFrame	{J}
081EE7E4	&ROMPALETTEANIMEFRAME	efxopLiveBGCOLPaletteAnimeFrame	{J}
081EE248	&ROMPALETTEANIMEFRAME	efxopLightningBGPaletteAnimeFrame	{J}
08281C7C	&PALETTE	efxFirebreathBGCOLPalette	{J}
0827045C	&PALETTE16	efxLiveSomePalette	{J}
081D8398	&ROMPALETTEANIMEFRAME	efxHPBarColorChangePaletteAnimeFrame1	{U}
081D83C2	&ROMPALETTEANIMEFRAME	efxHPBarColorChangePaletteAnimeFrame2	{U}
081D83E4	&ROMPALETTEANIMEFRAME	efxStatusUnitPaletteAnimeFrame	{U}
081D8406	&ROMPALETTEANIMEFRAME	efxWeaponIconPaletteAnimeFrame	{U}
081D8644	&ROMPALETTEANIMEFRAME	ekrTogiColorPaletteAnimeFrame	{U}
081E806A	&ROMPALETTEANIMEFRAME	efxEckesachsBGCOLPaletteAnimeFrame	{U}
081E808C	&ROMPALETTEANIMEFRAME	efxFirebreathBGCOLPaletteAnimeFrame	{U}
081E81AC	&ROMPALETTEANIMEFRAME	efxDarkbreathBGCOLPaletteAnimeFrame	{U}
081E8258	&ROMPALETTEANIMEFRAME	efxThunderBGCOLPaletteAnimeFrame	{U}
081E806A	&ROMPALETTEANIMEFRAME	efxEckesachsBGCOLPaletteAnimeFrame	{U}
081E808C	&ROMPALETTEANIMEFRAME	efxFirebreathBGCOL2PaletteAnimeFrame	{U}
081E8322	&ROMPALETTEANIMEFRAME	efxElfireBGCOLPaletteAnimeFrame	{U}
081E8B70	&ROMPALETTEANIMEFRAME	efxFenrirBGCOLPaletteAnimeFrame	{U}
081E8D0A	&ROMPALETTEANIMEFRAME	efxLiveBGPaletteAnimeFrame	{U}
081E8B70	&ROMPALETTEANIMEFRAME	efxLunaBGCOLPaletteAnimeFrame	{U}
081E9306	&ROMPALETTEANIMEFRAME	efxExcaliburBGCOLPaletteAnimeFrame	{U}
081E93B6	&ROMPALETTEANIMEFRAME	efxGespenstBGCOL2PaletteAnimeFrame	{U}
081E82CC	&ROMPALETTEANIMEFRAME	efxMaohFlashBGCOLPaletteAnimeFrame	{U}
081E808C	&ROMPALETTEANIMEFRAME	efxDrzDrakbreathBGCOLPaletteAnimeFrame	{U}
081E82CC	&ROMPALETTEANIMEFRAME	efxChillEffectBGCOLPaletteAnimeFrame	{U}
081E9650	&ROMPALETTEANIMEFRAME	efxPierceCriticalEffectBGCOLPaletteAnimeFrame	{U}
081E96D2	&ROMPALETTEANIMEFRAME	efxMagfcastBG2PaletteAnimeFrame	{U}
081E829A	&ROMPALETTEANIMEFRAME	efxOpFireBGPaletteAnimeFrame	{U}
081E8258	&ROMPALETTEANIMEFRAME	efxOpThunderBGCOLPaletteAnimeFrame	{U}
081E8B70	&ROMPALETTEANIMEFRAME	efxopLiveBGCOLPaletteAnimeFrame	{U}
081E85D4	&ROMPALETTEANIMEFRAME	efxopLightningBGPaletteAnimeFrame	{U}
0827C008	&PALETTE	efxFirebreathBGCOLPalette	{U}
0826A7E8	&PALETTE16	efxLiveSomePalette	{U}

0807C658	Creates the Fire Ring effect, and causes the screen to redden	{J}
0807BCEC	Terminate "Unknown08CA762C" Procs	{J}
0807C1FC	Terminate "Dragon's flame effect" Procs	{J}
0807B70C	Creates shaking screen	{J}
0807BCD8	Run "Unknown08CA762C" Procs	{J}
0807CD48	Goto Label 0x00 "Unknown08CA77AC" Procs	{J}
0807CD60	Goto Label 0x01 "Unknown08CA77AC" Procs	{J}

0807BBE4	Creates the Fire Ring effect, and causes the screen to redden	{U}
0807B278	Terminate "Unknown08CA762C" Procs	{U}
0807B788	Terminate "Dragon's flame effect" Procs	{U}
0807AC98	Creates shaking screen	{U}
0807B264	Run "Unknown08CA762C" Procs	{U}
0807C2D4	Goto Label 0x00 "Unknown08CA77AC" Procs	{U}
0807C2EC	Goto Label 0x01 "Unknown08CA77AC" Procs	{U}
0807C304	Terminate "Unknown08CA77AC" Procs	{U}
0802EFE4	闘技場	相手の選出	{J}
0802EB18	闘技場	相手の選出	{U}
08034d44	GetCurrentPromotedLevelBonus	{J}
0803486c	GetCurrentPromotedLevelBonus	{U}
0801782c	GetItemWeaponEffect	{J}
08017424	GetItemWeaponEffect	{U}
08017340	GetItemCost	{U}
08017748	GetItemCost	{J}
08016d0c	GetUnitItemSlot	{U}
08017160	GetUnitItemSlot	{J}
080B1D40	お店の販売価格の取得	{U}
080B2B64	お店の販売価格の取得	{J}
080B1D90	売り値を求める関数 RET=売値 r0=個数 << 8 + アイテムID	{U}
080B2BB4	売り値を求める関数 RET=売値 r0=個数 << 8 + アイテムID	{J}
0806CA48	NewSoundStepPlay6C	{J}
0806D2E4	MOVEUNIT6C_PlaySoundStepByClass	{J}
0806C25C	NewSoundStepPlay6C	{U}
0806CAF8	MOVEUNIT6C_PlaySoundStepByClass	{U}
08018914	GetUnitKeyItemSlotForTerrain	{J}
08018968	GetUnitAidIconId	{J}
08018524	GetUnitKeyItemSlotForTerrain	{U}
08018578	GetUnitAidIconId	{U}
080A3284	DisplayMiniMap	{U}
080A3EF8	DisplayMiniMap	{J}
08081E84	Called when you have an R-text bubble open and you move the cursor UP	{U}
08081EB4	Called when R-text is open and moving DOWN	{U}
08081EE4	Called when R-text is open and moving LEFT	{U}
08081f14	Called when R-text is open and moving RIGHT	{U}
08082BE4	Called when you have an R-text bubble open and you move the cursor UP	{J}
08082C14	Called when R-text is open and moving DOWN	{J}
08082C44	Called when R-text is open and moving LEFT	{J}
08082C74	Called when R-text is open and moving RIGHT	{J}
080A00C8	LoadSoundRoomEnableList	{J}
080A0120	SaveSoundRoomEnableList_Overwrite	{J}
080A0184	SaveSoundRoomEnableList	r1=SongID	{J}
0809F68C	LoadSoundRoomEnableList	{U}
0809F6E4	SaveSoundRoomEnableList_Overwrite	{U}
0809F748	SaveSoundRoomEnableList	r1=SongID	{U}
0806CAF8	MOVEUNIT6C_PlaySoundStepByClass	{U}
08C9CED0	:08C9CEF3	Move Sound: Walk	{U}
08C9CEF4	:08C9CF37	Move Sound: Armor	{U}
08C9CF38	:08C9CF65	Move Sound: Cavale	{U}
08C9CF66	:08C9CF91	Move Sound: Wyverm	{U}
08C9CF92	:08C9CFBD	Move Sound: Peg	{U}
08C9CFBE	:08C9CFEB	Move Sound: Fire Dragon	{U}
0806D2E4	MOVEUNIT6C_PlaySoundStepByClass	{J}
08D64E10	:08D64E33	Move Sound: Walk	{J}
08D64E34	:08D64E77	Move Sound: Armor	{J}
08D64E78	:08D64EA5	Move Sound: Cavale	{J}
08D64EA6	:08D64ED1	Move Sound: Wyverm	{J}
08D64ED2	:08D64EFD	Move Sound: Peg	{J}
08D64EFE	:08D64F2B	Move Sound: Fire Dragon	{J}
08031B54	GetSomethingRelatedToCurrentDifficulty	{J}
08043330	名前入力イベント	{J}
08042C58	名前入力イベント	{U}
08006ac4	NewFace	{J}
08075224	MapAnimLevelUpProc_InitLevelUpBox	{J}
08006C34	NewFace	{U}
08074A28	MapAnimLevelUpProc_InitLevelUpBox	{U}
0802AA9C	FinishUpItemBattle	アイテムを利用した時のモーションを登録	r1=ITEM ID	{J}
0802A5EC	FinishUpItemBattle	アイテムを利用した時のモーションを登録	r1=ITEM ID	{U}
0803AA40	敵AIから会話イベントを実行する	{J}
0803A58C	敵AIから会話イベントを実行する	{U}
0803AA40	AiUpdateDecision	{J}
0803A58C	AiUpdateDecision	{U}
08005998	DrawTextInline	{J}
08005ad4	DrawTextInline	{U}
0802D06C	ApplyUnitDefaultPromotion	{J}
08029818	ApplyUnitDefaultPromotion	{U}
0801F208	ShowBrokenWallEffect	{J}
0801EE84	ShowBrokenWallEffect	{U}
080B7980	10分割されたCGをロード	{J}
0807DEC0	砂漠の財宝の判定	{J}
0807D2B0	砂漠の財宝の判定	{U}
0800AEB0	イベント命令を動作させる関数	r0=イベント命令ポインタ:POINTER_EVENT	r1=引数?1-3	{J}
0800af74	イベント命令を動作させる関数	r0=イベント命令ポインタ:POINTER_EVENT	r1=引数?1-3	{U}
0808667C	DeletePlayerPhaseInterface6Cs	{J}
08085C7C	DeletePlayerPhaseInterface6Cs	{U}
080793a0	GetAvailableLocaCommandAt	{J}
08079990	MaybeCallEndEvent_	{J}
080799A0	MaybeCallEndEvent	{J}
0807977c	ShouldCallEndEvent	{J}
0807a208	CallEndEvent	{J}
08078BD0	GetAvailableLocaCommandAt	{U}
080791C0	MaybeCallEndEvent_	{U}
080791D0	MaybeCallEndEvent	{U}
08078FAC	ShouldCallEndEvent	{U}
08079A38	CallEndEvent	{U}
0800AE98	CallExecuteEvent_Slot3	r0=event	{J}
0800AEA4	Call_ExecuteEvent	r0=event	r1=slot	{J}
0800AF5C	CallExecuteEvent_Slot3	r0=event	{U}
0800AF68	Call_ExecuteEvent	r0=event	r1=slot	{U}
080070AC	ShouldPortraitBeSmol	{J}
0800721C	ShouldPortraitBeSmol	{U}
08007160	DisplayBgFaceCore	r0=bgOut	r1=portrait	r2=tileId	r3=palId	{J}
080072D0	DisplayBgFaceCore	r0=bgOut	r1=portrait	r2=tileId	r3=palId	{U}
0807D368	Judgment Branch Ch24	{U}
0807DF88	Judgment Branch Ch24	{J}
0807D4C0	Judgment Branch Ch27	{U}
0807E14C	Judgment Branch Ch27	{J}
0807D448	Get Sum levelup count	{U}
0807E0D4	Get Sum levelup count	{J}
0802A24C	GetUnitRoundExp	{J}
0802a22c	GetUnitEffectiveLevel	{J}
0802a324	GetUnitKillExpBonus	{J}
0802A3C0	ComputeExpFromBattle	{J}
08029ae4	CanUnitNotLevelUp	{J}
08029A1C	BattleApplyExpGains	{J}
080288b0	BattleGenerate	{J}
0802a1bc	UpdateUnitDuringBattle	{J}
0802a940	nullsub_11	{J}
080a1a88	SaveSuspendedGame	{J}
08028c08	SetupBattleWeaponData	{J}
0802a620	BattleApplyWeaponTriangle	{J}
0802AB90	BattleGenerateArena	{J}
0802EAC4	MapMain_ResumeFromArena	{J}
0802EB40	MapMain_ResumeFromPhaseSwitch	{J}
080b7880	ComputeChapterRankings	{J}
080a0054	SaveEndgameRankingsMaybe	{J}
0802EB7C	GAMECTRLから呼ばれる攻略評価	{J}
08013200	SetNextGameActionId	{J}
080a0e48	RegisterCompletedPlaythrough	{J}
0809ee90	IsSramWorking	{J}
080a22cc	GetNextSuspendSaveId	{J}
0809f280	GetSaveDataLocation	{J}
08000eec	GetGameClock	{J}
080a1d80	PackUnitStructForSuspend	{J}
0802ad58	BattleUnwindScripted	{J}
0802887C	SimulateBattleBallista	{J}
08028654	BattleGenerateSimulationInternal	{J}
08028868	BattleGenerateReal	{J}
08028724	BattleGenerateRealInternal	{J}
08028654	BattleGenerateSimulationInternal	{J}
08028830	SimulateBattle	{J}
0802a944	BattlePrintDebugHitInfo	{J}
08029D9C)	GetUnitRoundExp	{U}
08029D7C)	GetUnitEffectiveLevel	{U}
08029E74)	GetUnitKillExpBonus	{U}
08029F10)	ComputeExpFromBattle	{U}
08029634)	CanUnitNotLevelUp	{U}
0802956C)	BattleApplyExpGains	{U}
08028424)	BattleGenerate	{U}
08029D0C)	UpdateUnitDuringBattle	{U}
0802a490	nullsub_11	{U}
080a1100	SaveSuspendedGame	{U}
0802877c	SetupBattleWeaponData	{U}
0802a170	BattleApplyWeaponTriangle	{U}
0802A6E0	BattleGenerateArena	{U}
0802E5F8	MapMain_ResumeFromArena	{U}
0802E500	MapMain_ResumeFromPhaseSwitch	{U}
080B6A74	ComputeChapterRankings	{U}
0809F618	SaveEndgameRankingsMaybe	{U}
0802E6B0	GAMECTRLから呼ばれる攻略評価	{U}
08012B48	SetNextGameActionId	{U}
080A049C	RegisterCompletedPlaythrough	{U}
0809e478	IsSramWorking	{U}
080A1938	GetNextSuspendSaveId	{U}
0809E870	GetSaveDataLocation	{U}
08000F14	GetGameClock	{U}
080A13EC	PackUnitStructForSuspend	{U}
0802A8A8	BattleUnwindScripted	{U}
080283F0	SimulateBattleBallista	{U}
080281C8	BattleGenerateSimulationInternal	{U}
08028410	BattleGenerateReal	{U}
08028298	BattleGenerateRealInternal	{U}
080281C8	BattleGenerateSimulationInternal	{U}
080283A4	SimulateBattle	{U}
0802A494	BattlePrintDebugHitInfo	{U}
0802a27c	GetUnitEffectivePowerLevel	{J}
0802a2b8	GetUnitClassKillExpBonus	{J}
0802a2e0	GetUnitExpMultiplier	{J}
08029DCC	GetUnitEffectivePowerLevel	{U}
08029E08	GetUnitClassKillExpBonus	{U}
08029E30	GetUnitExpMultiplier	{U}
080AD424	サウンドルーム	音の波形を描画	{J}
080AD39C	サウンドルーム	音の波形を描画LOW	{J}
080AD460	サウンドルーム	RANDOM MODE タイム表示	{J}
080ad2d0	サウンドルーム	曲名の表示	{J}
080AD544	SoundRoom サウンドルームの描画関係	{J}
08006884	RegisterObjectSafe	I don't see any difference with the above, except that x & y are truncated properly (it's "Safe") r0=root node index	r1=base x coord	r2=base y coord	r3=ROM OAM Data pointer	[sp+0]=base OAM2 data	{J}
08DAEDF8	&OAMREGS	サウンドルーム	RANDOMMODE	RANDOM MODE 表示	OAM	{J}
08DAEE18	&OAMREGS	サウンドルーム	RANDOMMODE	再生位置のシークバーのメモリ	OAM	{J}
08DAEE38	&OAMREGS	サウンドルーム	RANDOMMODE	再生位置のシークバーのつまみ	OAM	{J}
08DAEDE0	&OAMREGS	サウンドルーム	コントロール	再生開始ボタン	OAM	{J}
08DAEDE8	&OAMREGS	サウンドルーム	コントロール	停止開始ボタン	OAM	{J}
08DAEDF0	&OAMREGS	サウンドルーム	コントロール	ランダムモードボタン	OAM	{J}
08BFF7A8	&OAMREGS	サウンドルーム	曲名	名前	OAM	{J}
080AC54C	サウンドルーム	音の波形を描画	{U}
080AC4C4	サウンドルーム	音の波形を描画LOW	{U}
080AC588	サウンドルーム	RANDOM MODE タイム表示	{U}
080AC3F8	サウンドルーム	曲名の表示	{U}
080AC66C	SoundRoom サウンドルームの描画関係	{U}
080069F4	RegisterObjectSafe	I don't see any difference with the above, except that x & y are truncated properly (it's "Safe") r0=root node index	r1=base x coord	r2=base y coord	r3=ROM OAM Data pointer	[sp+0]=base OAM2 data	{U}
08CE560C	&OAMREGS	サウンドルーム	RANDOMMODE	RANDOM MODE 表示	OAM	{U}
08CE562C	&OAMREGS	サウンドルーム	RANDOMMODE	再生位置のシークバーのメモリ	OAM	{U}
08CE564C	&OAMREGS	サウンドルーム	RANDOMMODE	再生位置のシークバーのつまみ	OAM	{U}
08CE55F4	&OAMREGS	サウンドルーム	コントロール	再生開始ボタン	OAM	{U}
08CE55FC	&OAMREGS	サウンドルーム	コントロール	停止開始ボタン	OAM	{U}
08CE5604	&OAMREGS	サウンドルーム	コントロール	ランダムモードボタン	OAM	{U}
08B905F8	&OAMREGS	サウンドルーム	曲名	名前	OAM	{U}
08B91AD8	CallEvent	戦闘会話と死亡セリフの表示イベント1	{U}
08B91AE8	CallEvent	戦闘会話と死亡セリフの表示イベント2	{U}
08C00CE8	CallEvent	戦闘会話と死亡セリフの表示イベント1	{J}
08C00CF8	CallEvent	戦闘会話と死亡セリフの表示イベント2	{J}
080A2E6C	CopyMiniMapTerrainChips	{U}
080A3AE0	CopyMiniMapTerrainChips	{J}
080229A8	UseCommandUsability	{J}
08022A20	EquipCommandUsability	{J}
08022A68	DiscardCommandUsability	{J}
08022A9C	UseCommandEffect	{J}
08022B28	EquipCommandEffect	{J}
08005320	SetFont	{J}
08005308	Font_ResetAllocation	{J}
080270C0	SwapUnitStats	{J}
080273D4	ItemEffect_ErrorMessage	{J}
08022530	UseCommandUsability	{U}
080225A8	EquipCommandUsability	{U}
080225F0	DiscardCommandUsability	{U}
08022624	UseCommandEffect	{U}
080226B0	EquipCommandEffect	{U}
08005450	SetFont	{U}
08005438	Font_ResetAllocation	{U}
08026C38	SwapUnitStats	{U}
08026F4C	ItemEffect_ErrorMessage	{U}
0800515C	SetupDebugFontForOBJ	{J}
080051E8	PrintDebugStringAsOBJ	{J}
08005280	SetupDebugFontForOBJ	{U}
0800530C	PrintDebugStringAsOBJ	{U}

08210350	&LZ77	ELFIRE_TSA_1	{J}
081F7440	&LZ77	ELFIRE_TSA_2	{J}
081F87B8	&LZ77	CriticalBG_TSA_1	{J}
081F8C58	&LZ77	CriticalBG_TSA_2	{J}
081F9194	&LZ77	SRankWeaponEffectBG_TSA	{J}
082ED718	&LZ77	何かのTSA	29	{J}
082ED82C	&LZ77	何かのTSA	30	{J}
082ED950	&LZ77	何かのTSA	31	{J}
082EDA28	&LZ77	何かのTSA	32	{J}
082EDB44	&LZ77	何かのTSA	33	{J}
082EDC68	&LZ77	何かのTSA	34	{J}
081FED14	&LZ77	MagfcastBG_TSA_1	{J}
081FEDB0	&LZ77	MagfcastBG_TSA_2	{J}
081FEE4C	&LZ77	MagfcastBG_TSA_3	{J}
081FEEEC	&LZ77	MagfcastBG_TSA_4	{J}
081FEF90	&LZ77	MagfcastBG_TSA_5	{J}
081FF044	&LZ77	MagfcastBG_TSA_6	{J}
0826C950	&LZ77	何かのTSA	36	{J}
0826CCB0	&LZ77	何かのTSA	37	{J}
0826D004	&LZ77	何かのTSA	38	{J}
0826D314	&LZ77	何かのTSA	39	{J}
0826D5F8	&LZ77	何かのTSA	40	{J}
0826D8C8	&LZ77	何かのTSA	41	{J}
0826DB60	&LZ77	何かのTSA	42	{J}
0826DDF8	&LZ77	何かのTSA	43	{J}
0826E024	&LZ77	何かのTSA	44	{J}
0826E2D8	&LZ77	何かのTSA	45	{J}
0826E598	&LZ77	何かのTSA	46	{J}
0826E8C8	&LZ77	何かのTSA	47	{J}
0826EC18	&LZ77	何かのTSA	48	{J}
0826EF90	&LZ77	何かのTSA	49	{J}
0826F318	&LZ77	何かのTSA	50	{J}
0828CEAC	&LZ77	何かのTSA	54	{J}
08281C9C	&LZ77	FirebreathBG_TSA_1	{J}
082A1DD0	&LZ77	何かのTSA	55	{J}
082B9E7C	&LZ77	何かのTSA	56	{J}
082BA2D8	&LZ77	何かのTSA	57	{J}

0820A6DC	&LZ77	ELFIRE_TSA_1	{U}
081F17CC	&LZ77	ELFIRE_TSA_2	{U}
081F2B44	&LZ77	CriticalBG_TSA_1	{U}
081F2FE4	&LZ77	CriticalBG_TSA_2	{U}
081F3520	&LZ77	SRankWeaponEffectBG_TSA	{U}
082E7A4C	&LZ77	何かのTSA	29	{U}
082E7B60	&LZ77	何かのTSA	30	{U}
082E7C84	&LZ77	何かのTSA	31	{U}
082E7D5C	&LZ77	何かのTSA	32	{U}
082E7E78	&LZ77	何かのTSA	33	{U}
082E7F9C	&LZ77	何かのTSA	34	{U}
081F90A0	&LZ77	MagfcastBG_TSA_1	{U}
081F913C	&LZ77	MagfcastBG_TSA_2	{U}
081F91D8	&LZ77	MagfcastBG_TSA_3	{U}
081F9278	&LZ77	MagfcastBG_TSA_4	{U}
081F931C	&LZ77	MagfcastBG_TSA_5	{U}
081F93D0	&LZ77	MagfcastBG_TSA_6	{U}
08266CDC	&LZ77	何かのTSA	36	{U}
0826703C	&LZ77	何かのTSA	37	{U}
08267390	&LZ77	何かのTSA	38	{U}
082676A0	&LZ77	何かのTSA	39	{U}
08267984	&LZ77	何かのTSA	40	{U}
08267C54	&LZ77	何かのTSA	41	{U}
08267EEC	&LZ77	何かのTSA	42	{U}
08268184	&LZ77	何かのTSA	43	{U}
082683B0	&LZ77	何かのTSA	44	{U}
08268664	&LZ77	何かのTSA	45	{U}
08268924	&LZ77	何かのTSA	46	{U}
08268C54	&LZ77	何かのTSA	47	{U}
08268FA4	&LZ77	何かのTSA	48	{U}
0826931C	&LZ77	何かのTSA	49	{U}
082696A4	&LZ77	何かのTSA	50	{U}
08287238	&LZ77	何かのTSA	54	{U}
0827C028	&LZ77	FirebreathBG_TSA_1	{U}
0829C15C	&LZ77	何かのTSA	55	{U}
082B4208	&LZ77	何かのTSA	56	{U}
082B4664	&LZ77	何かのTSA	57	{U}

0807A820	ニニアンが生存しているか判定	{J}
0807A810	マリナスが生存しているか判定	{J}
0807A840	ニノが生存しているか判定	{J}
0807A850	ジャファルが生存しているか判定	{J}
0807A860	プリシラが生存しているか判定	{J}
0807A890	エルクが生存しているか判定	{J}
0807A8B0	ケント0x17が生存しているか判定	{J}
0807A8C0	ケント0x2fが生存しているか判定	{J}
0807A8D0	セイン0x18が生存しているか判定	{J}
0807A8E0	セイン0x30が生存しているか判定	{J}
0807A8F0	ウィル0x0Dが生存しているか判定	{J}
0807A900	ウィル0x2Eが生存しているか判定	{J}
0807A910	フロリーナ0x1Dが生存しているか判定	{J}
0807A920	フロリーナ0x31が生存しているか判定	{J}
0807A930	ダーツが生存しているか判定	{J}
0807A940	パントが生存しているか判定	{J}
0807A950	ルイーズが生存しているか判定	{J}
0807A960	ラガルトが生存しているか判定	{J}
0807A980	アトスが生存しているか判定	{J}
0807AB20	エリックが生存しているか判定	{J}
08079DAC	ニニアンが生存しているか判定	{U}
08079D9C	マリナスが生存しているか判定	{U}
08079DCC	ニノが生存しているか判定	{U}
08079DDC	ジャファルが生存しているか判定	{U}
08079DEC	プリシラが生存しているか判定	{U}
08079E1C	エルクが生存しているか判定	{U}
08079E3C	ケント0x17が生存しているか判定	{U}
08079E4C	ケント0x2fが生存しているか判定	{U}
08079E5C	セイン0x18が生存しているか判定	{U}
08079E6C	セイン0x30が生存しているか判定	{U}
08079E7C	ウィル0x0Dが生存しているか判定	{U}
08079E8C	ウィル0x2Eが生存しているか判定	{U}
08079E9C	フロリーナ0x1Dが生存しているか判定	{U}
08079EAC	フロリーナ0x31が生存しているか判定	{U}
08079EBC	ダーツが生存しているか判定	{U}
08079ECC	パントが生存しているか判定	{U}
08079EDC	ルイーズが生存しているか判定	{U}
08079EEC	ラガルトが生存しているか判定	{U}
08079F0C	アトスが生存しているか判定	{U}
0807A0AC	エリックが生存しているか判定	{U}
08093CD0	DrawPickupUnitsList_PrepScreen	{J}
08093DC8	DrawCountOfPickupUnits_PrepScreen	{J}
080933C4	DrawPickupUnitsList_PrepScreen	{U}
080934BC	DrawCountOfPickupUnits_PrepScreen	{U}
@AiData@00	byte	aiUnits
@AiData@74	byte	aiUnitIt
@AiData@78	byte	cpOrderNext
@AiData@79	byte	cpDecideNext
@AiData@7A	byte	dangerMapActive
@AiData@7B	byte	aiConfig
@AiData@7C	byte	Unk7C
@AiData@7D	byte	Unk7D
@AiData@7E	byte	Unk7E
@AiData@7F	byte	_pad7F
@AiData@80	word	someFlag80
@AiData@84	byte	Unk84
@AiData@85	byte	highestBlueMov
@AiData@86	byte	AI Result1
@AiData@87	byte	AI Result2
@AiData@88	byte	AI Result3
@AiData@89	byte	AI Result4
@AiData@8A	byte	AI Result5
@AiData@8B	byte	_pad8B
@AiData@8C	byte	_pad8C
@AiData@8D	byte	_pad8D
@AiData@8E	byte	_pad8E
@AiData@8F	byte	_pad8F
@AiData@90	byte	decisionType;
@AiData@91	byte	unitIndex
@AiData@92	byte	xMovement
@AiData@93	byte	yMovement
@AiData@94	byte	pad_04
@AiData@95	byte	pad_05
@AiData@96	byte	unitTargetIndex
@AiData@97	byte	usedItemSlot
@AiData@98	byte	xOther
@AiData@99	byte	yOther
@AiData@9A	byte	decisionTaken
@AiData@9B	byte	decisionType

//https://discord.com/channels/144670830150811649/725478895226191892/850481060751999016
08013508	GetValueFromEasingFunction	r0=rate function	r1=start x	r2=end x	r3=current t	sp0=end t	{J}
08012FE8	GetValueFromEasingFunction	r0=rate function	r1=start x	r2=end x	r3=current t	sp0=end t	{U}

08085478	地形回避率等の描画	{U}
080c57bc	TileMap_FillRect	{U}
080056a8	GetStringTextCenteredPos	{U}
080054e0	TextVRAMClearer This function gets a space in VRAM and prepares it for the new text		{U}
08005588	Text_SetParameters r0=Text Struct r1=cursor r2=color id	{U}
08005590	Text_Draw	{U}
08005044	NumBufferWriter StoreNumberStringToSmallBuffer	{U}

08085E6C	地形回避率等の描画	{J}
080c0c30	TileMap_FillRect	{J}
08005458	Text_SetParameters r0=Text Struct r1=cursor r2=color id	{J}
08005460	Text_Draw	{J}
08013870	GetTerrainTypeID	{J}

08005580	Text_SetColorId	{U}
08005570	Text_GetXCursor	{U}
080171e4	GetItemSomeString	{U}

08005450	Text_SetColorId	{J}
08005440	Text_GetXCursor	{J}
0203A508	@BattleRound@[7]	gRoundArray	{J}
0203A50C	@BattleRound@[7]	gRoundArray	{U}
0808F3D0	マシューがch8の進撃準備でしゃべる	{U}
0808FD10	マシューがch8の進撃準備でしゃべる	{J}
0808F43C	マリナスが進撃準備でしゃべる	{U}
0808FD7C	マリナスが進撃準備でしゃべる	{J}
0808F4A8	占い師がch14の進撃準備でしゃべる	{U}
0808FDE8	占い師がch14の進撃準備でしゃべる	{J}
0808F52C	マリナスが馬車を手に入れた時に進撃準備でしゃべる	{U}
0808FE6C	マリナスが馬車を手に入れた時に進撃準備でしゃべる	{J}
0801CACC	PlayerPhase_RangeDisplayIdle	{J}
0801C6C8	PlayerPhase_RangeDisplayIdle	{U}
08015f0c	SetCursorMapPosition	{J}
0801c584	HandlePlayerCursorMovement	{J}
0801C194	HandlePlayerCursorMovement	{U}
080AD190	サウンドルーム画面を表示	{J}
080AC2AC	サウンドルーム画面を表示	{U}
03005E80	:03006A7F	ipatix High Quality Sound Mixer 2 getting somewhat dangerously close to the stack)	{J}
03005DA0	:0300699F	ipatix High Quality Sound Mixer 2 getting somewhat dangerously close to the stack)	{U}
0802D940	FlamesWeatherHBlank	{U}
0802D984	ApplyFlamesWeatherGradient	{U}
0802DA04	FlamesWeatherInitGradient	{U}
0802DA94	FlamesWeatherInitParticles	{U}
0802DAF8	WeatherInit_Flames	{U}
0802DE00	FlamesWeatherHBlank	{J}
0802DE44	ApplyFlamesWeatherGradient	{J}
0802DEC4	FlamesWeatherInitGradient	{J}
0802DF54	FlamesWeatherInitParticles	{J}
0802DFB8	WeatherInit_Flames	{J}
080A2640	CalcGraphicsFromMiniMapTypeFromCoordinateXY	{U}
080a2454	GetMiniMapTypeFromCoordinateXY	{U}
080A32B4	CalcGraphicsFromMiniMapTypeFromCoordinateXY	{J}
080A30C8	GetMiniMapTypeFromCoordinateXY	{J}
08039870	SetupAiDangerMap	{J}
0803989c	FillAiDangerMap	{J}
080393BC	SetupAiDangerMap	{U}
080393E8	FillAiDangerMap	{U}
0803627c	CouldUnitBeInRangeHeuristic	{J}
08035DA4	CouldUnitBeInRangeHeuristic	{U}
0802CEB8	ExecElixirSelfHeal	{J}
0802CFA4	ExecAntitoxin	{J}
0802D3CC	ExecLightRune	{J}
0802D440	ExecRingItem	{J}
0802CCDC	ExecFortify	{J}
0802CBC8	ExecNightmare	{J}
0802CFE4	ExecChestKey	{J}
0802C9F8	ExecElixirSelfHeal	{U}
0802CAE4	ExecAntitoxin	{U}
0802CF0C	ExecLightRune	{U}
0802CF80	ExecRingItem	{U}
0802C81C	ExecFortify	{U}
0802C708	ExecNightmare	{U}
0802CB24	ExecChestKey	{U}
0807DB3C	ch15 リン編の資産評価に応じてリンに白の宝玉を渡す	{J}
0807D020	ch15 リン編の資産評価に応じてリンに白の宝玉を渡す	{U}
0807FD58	リン編攻略時の資産評価 ch15で与える宝玉のためのフラグのセット	{J}
0807EF90	リン編攻略時の資産評価 ch15で与える宝玉のためのフラグのセット	{U}
08016820	IsWeaponEffective	{U}
08016c80	IsWeaponEffective	{J}
08067ddc	IsHealStaffBGM	{U}
080685c8	IsHealStaffBGM	{J}
0807A0A0	ClearGlobalTriggerState	{J}
080798D0	ClearGlobalTriggerState	{U}
0808DEA8	出撃禁止判定	{U}
0808E7D4	出撃禁止判定	{J}
08006f80	CreateMinimug	This routine draws the minimug to VRAM and writes its tilemap	{U}
08006E10	CreateMinimug	This routine draws the minimug to VRAM and writes its tilemap	{J}
08006688	HandleNextAISFrame	{U}
08006518	HandleNextAISFrame	{J}
08006850	_AIS_Display	r0=@AnimationInterpreter	{U}
080066E0	_AIS_Display	r0=@AnimationInterpreter	{J}
0807E5E0	ローランの祭壇の上にある剣にピカピカマークを表示	ASMC	{J}
08021550	ローランの祭壇の上にある剣にピカピカマークを表示する実装部	{J}
